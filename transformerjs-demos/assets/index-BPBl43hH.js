(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=t(n);fetch(n.href,o)}})();const ra=new Map,vn=[],Dv=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){const s=ra.get(e);if(s===void 0)ra.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){const n=vn.indexOf(e);n!==-1&&vn.splice(n,1);for(let o=0;o<vn.length;o++)if(ra.get(vn[o]).priority<=t){vn.splice(o,0,e);return}vn.push(e)}return}throw new TypeError("not a valid backend")},Lv=async e=>{const r=ra.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{const t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},zv=async e=>{const r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?vn:t;let n;const o=[],a=new Set;for(const l of s){const c=await Lv(l);typeof c=="string"?o.push({name:l,err:c}):(n||(n=c),n===c&&a.add(l))}if(!n)throw new Error(`no available backend found. ERR: ${o.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(const{name:l,err:c}of o)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${c}`);const i=r.filter(l=>a.has(typeof l=="string"?l:l.name));return[n,new Proxy(e,{get:(l,c)=>c==="executionProviders"?i:Reflect.get(l,c)})]},Bv="1.21.0";let __="warning";const vs={wasm:{},webgl:{},webgpu:{},versions:{common:Bv},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);__=e}},get logLevel(){return __}};Object.defineProperty(vs,"logLevel",{enumerable:!0});const Rv=vs,jv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];const s=t.getContext("2d");if(s!=null){let n,o;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);const a=r?.format!==void 0?r.format:"RGB",i=r?.norm;let l,c;i===void 0||i.mean===void 0?l=[255,255,255,255]:typeof i.mean=="number"?l=[i.mean,i.mean,i.mean,i.mean]:(l=[i.mean[0],i.mean[1],i.mean[2],0],i.mean[3]!==void 0&&(l[3]=i.mean[3])),i===void 0||i.bias===void 0?c=[0,0,0,0]:typeof i.bias=="number"?c=[i.bias,i.bias,i.bias,i.bias]:(c=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(c[3]=i.bias[3]));const p=o*n;let d=0,u=p,f=p*2,_=-1;a==="RGBA"?(d=0,u=p,f=p*2,_=p*3):a==="RGB"?(d=0,u=p,f=p*2):a==="RBG"&&(d=0,f=p,u=p*2);for(let v=0;v<o;v++)for(let I=0;I<n;I++){const b=(e.data[d++]-c[0])*l[0],M=(e.data[u++]-c[1])*l[1],$=(e.data[f++]-c[2])*l[2],y=_===-1?255:(e.data[_++]-c[3])*l[3];s.fillStyle="rgba("+b+","+M+","+$+","+y+")",s.fillRect(I,v,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Nv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let s;if(t!=null){let n,o,a;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],a=e.dims[3]):(n=e.dims[3],o=e.dims[2],a=e.dims[1]);const i=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r?.norm;let c,p;l===void 0||l.mean===void 0?c=[255,255,255,255]:typeof l.mean=="number"?c=[l.mean,l.mean,l.mean,l.mean]:(c=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(c[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));const d=o*n;if(r!==void 0&&(r.format!==void 0&&a===4&&r.format!=="RGBA"||a===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const u=4;let f=0,_=1,v=2,I=3,b=0,M=d,$=d*2,y=-1;i==="RGBA"?(b=0,M=d,$=d*2,y=d*3):i==="RGB"?(b=0,M=d,$=d*2):i==="RBG"&&(b=0,$=d,M=d*2),s=t.createImageData(n,o);for(let T=0;T<o*n;f+=u,_+=u,v+=u,I+=u,T++)s.data[f]=(e.data[b++]-p[0])*c[0],s.data[_]=(e.data[M++]-p[1])*c[1],s.data[v]=(e.data[$++]-p[2])*c[2],s.data[I]=y===-1?255:(e.data[y++]-p[3])*c[3]}else throw new Error("Can not access image data");return s},Fl=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:t,width:s}=r,n=r.norm??{mean:255,bias:0};let o,a;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?a=[n.bias,n.bias,n.bias,n.bias]:a=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];const i=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",c=t*s,p=l==="RGBA"?new Float32Array(c*4):new Float32Array(c*3);let d=4,u=0,f=1,_=2,v=3,I=0,b=c,M=c*2,$=-1;i==="RGB"&&(d=3,u=0,f=1,_=2,v=-1),l==="RGBA"?$=c*3:l==="RBG"?(I=0,M=c,b=c*2):l==="BGR"&&(M=0,b=c,I=c*2);for(let T=0;T<c;T++,u+=d,_+=d,f+=d,v+=d)p[I++]=(e[u]+a[0])/o[0],p[b++]=(e[f]+a[1])/o[1],p[M++]=(e[_]+a[2])/o[2],$!==-1&&v!==-1&&(p[$++]=(e[v]+a[3])/o[3]);return l==="RGBA"?new is("float32",p,[1,4,t,s]):new is("float32",p,[1,3,t,s])},Vv=async(e,r)=>{const t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string";let a,i=r??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){const p=l();p.width=e.width,p.height=e.height;const d=c(p);if(d!=null){let u=e.height,f=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(u=r.resizedHeight,f=r.resizedWidth),r!==void 0){if(i=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=u,i.width=f}else i.tensorFormat="RGBA",i.height=u,i.width=f;d.drawImage(e,0,0),a=d.getImageData(0,0,f,u).data}else throw new Error("Can not access image data")}else if(s){let p,d;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,d=r.resizedWidth):(p=e.height,d=e.width),r!==void 0&&(i=r),i.format="RGBA",i.height=p,i.width=d,r!==void 0){const u=l();u.width=d,u.height=p;const f=c(u);if(f!=null)f.putImageData(e,0,0),a=f.getImageData(0,0,d,p).data;else throw new Error("Can not access image data")}else a=e.data}else if(n){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");const p=l();p.width=e.width,p.height=e.height;const d=c(p);if(d!=null){const u=e.height,f=e.width;return d.drawImage(e,0,0,f,u),a=d.getImageData(0,0,f,u).data,i.height=u,i.width=f,Fl(a,i)}else throw new Error("Can not access image data")}else{if(o)return new Promise((p,d)=>{const u=l(),f=c(u);if(!e||!f)return d();const _=new Image;_.crossOrigin="Anonymous",_.src=e,_.onload=()=>{u.width=_.width,u.height=_.height,f.drawImage(_,0,0,u.width,u.height);const v=f.getImageData(0,0,u.width,u.height);i.height=u.height,i.width=u.width,p(Fl(v.data,i))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Fl(a,i);throw new Error("Input data provided is not supported - aborted tensor creation")},Uv=(e,r)=>{const{width:t,height:s,download:n,dispose:o}=r,a=[1,s,t,4];return new is({location:"texture",type:"float32",texture:e,dims:a,download:n,dispose:o})},Wv=(e,r)=>{const{dataType:t,dims:s,download:n,dispose:o}=r;return new is({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:n,dispose:o})},Gv=(e,r)=>{const{dataType:t,dims:s,download:n,dispose:o}=r;return new is({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:n,dispose:o})},Kv=(e,r,t)=>new is({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]}),eo=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),sa=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let f_=!1;const Hv=()=>{if(!f_){f_=!0;const e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(eo.set("int64",BigInt64Array),sa.set(BigInt64Array,"int64")),r&&(eo.set("uint64",BigUint64Array),sa.set(BigUint64Array,"uint64")),s?(eo.set("float16",t),sa.set(t,"float16")):eo.set("float16",Uint16Array)}},qv=e=>{let r=1;for(let t=0;t<e.length;t++){const s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},Qv=(e,r)=>{switch(e.location){case"cpu":return new is(e.type,e.data,r);case"cpu-pinned":return new is({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new is({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new is({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new is({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}};let is=class{constructor(r,t,s){Hv();let n,o;if(typeof r=="object"&&"location"in r)switch(this.dataLocation=r.location,n=r.type,o=r.dims,r.location){case"cpu-pinned":{const i=eo.get(n);if(!i)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(r.data instanceof i))throw new TypeError(`buffer should be of type ${i.name}`);this.cpuData=r.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=r.texture,this.downloader=r.download,this.disposer=r.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=r.gpuBuffer,this.downloader=r.download,this.disposer=r.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=r.mlTensor,this.downloader=r.download,this.disposer=r.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,l;if(typeof r=="string")if(n=r,l=s,r==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{const c=eo.get(r);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${r}.`);if(Array.isArray(t)){if(r==="float16"&&c===Uint16Array||r==="uint4"||r==="int4")throw new TypeError(`Creating a ${r} tensor from number array is not supported. Please use ${c.name} as data.`);r==="uint64"||r==="int64"?i=c.from(t,BigInt):i=c.from(t)}else if(t instanceof c)i=t;else if(t instanceof Uint8ClampedArray)if(r==="uint8")i=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(r==="float16"&&t instanceof Uint16Array&&c!==Uint16Array)i=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length);else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(l=t,Array.isArray(r)){if(r.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const c=typeof r[0];if(c==="string")n="string",i=r;else if(c==="boolean")n="bool",i=Uint8Array.from(r);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else if(r instanceof Uint8ClampedArray)n="uint8",i=Uint8Array.from(r);else{const c=sa.get(r.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${r.constructor}.`);n=c,i=r}if(l===void 0)l=[i.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");o=l,this.cpuData=i,this.dataLocation="cpu"}const a=qv(o);if(this.cpuData&&a!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(a/2)===this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=a}static async fromImage(r,t){return Vv(r,t)}static fromTexture(r,t){return Uv(r,t)}static fromGpuBuffer(r,t){return Wv(r,t)}static fromMLTensor(r,t){return Gv(r,t)}static fromPinnedBuffer(r,t,s){return Kv(r,t,s)}toDataURL(r){return jv(this,r)}toImageData(r){return Nv(this,r)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(r){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,r&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(r){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Qv(this,r)}};const Yn=is,Jw=(e,r)=>{(typeof vs.trace>"u"?!vs.wasm.trace:!vs.trace)||console.timeStamp(`${e}::ORT::${r}`)},Yw=(e,r)=>{const t=new Error().stack?.split(/\r\n|\r|\n/g)||[];let s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(o+=`::${r}`),Jw("CPU",o);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},Oc=e=>{(typeof vs.trace>"u"?!vs.wasm.trace:!vs.trace)||Yw("BEGIN",e)},Dc=e=>{(typeof vs.trace>"u"?!vs.wasm.trace:!vs.trace)||Yw("END",e)};let Xv=class Zw{constructor(r){this.handler=r}async run(r,t,s){Oc();const n={};let o={};if(typeof r!="object"||r===null||r instanceof Yn||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof Yn)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const c of t){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let c=!1;const p=Object.getOwnPropertyNames(t);for(const d of this.outputNames)if(p.indexOf(d)!==-1){const u=t[d];(u===null||u instanceof Yn)&&(c=!0,a=!1,n[d]=u)}if(c){if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else o=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const c of this.inputNames)if(typeof r[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(a)for(const c of this.outputNames)n[c]=null;const i=await this.handler.run(r,n,o),l={};for(const c in i)if(Object.hasOwnProperty.call(i,c)){const p=i[c];p instanceof Yn?l[c]=p:l[c]=new Yn(p.type,p.data,p.dims)}return Dc(),l}async release(){return this.handler.dispose()}static async create(r,t,s,n){Oc();let o,a={};if(typeof r=="string"){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){const p=r;let d=0,u=r.byteLength;if(typeof t=="object"&&t!==null)a=t;else if(typeof t=="number"){if(d=t,!Number.isSafeInteger(d))throw new RangeError("'byteOffset' must be an integer.");if(d<0||d>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(u=r.byteLength-d,typeof s=="number"){if(u=s,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||d+u>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-d}].`);if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(p,d,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[i,l]=await zv(a),c=await i.createInferenceSessionHandler(o,l);return Dc(),new Zw(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}};const Jv=Xv,Yv=Object.freeze(Object.defineProperty({__proto__:null,InferenceSession:Jv,TRACE:Jw,TRACE_FUNC_BEGIN:Oc,TRACE_FUNC_END:Dc,Tensor:Yn,env:Rv,registerBackend:Dv},Symbol.toStringTag,{value:"Module"}));/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Zc=Object.defineProperty,Zv=Object.getOwnPropertyDescriptor,ex=Object.getOwnPropertyNames,tx=Object.prototype.hasOwnProperty,rx=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),Be=(e,r)=>()=>(e&&(r=e(e=0)),r),no=(e,r)=>{for(var t in r)Zc(e,t,{get:r[t],enumerable:!0})},sx=(e,r,t,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of ex(r))!tx.call(e,n)&&n!==t&&Zc(e,n,{get:()=>r[n],enumerable:!(s=Zv(r,n))||s.enumerable});return e},Qo=e=>sx(Zc({},"__esModule",{value:!0}),e),Ao,Js,En,g_,eM,tM=Be(()=>{Ao=new Map,Js=[],En=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){let s=Ao.get(e);if(s===void 0)Ao.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){let n=Js.indexOf(e);n!==-1&&Js.splice(n,1);for(let o=0;o<Js.length;o++)if(Ao.get(Js[o]).priority<=t){Js.splice(o,0,e);return}Js.push(e)}return}throw new TypeError("not a valid backend")},g_=async e=>{let r=Ao.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{let t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},eM=async e=>{let r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?Js:t,n,o=[],a=new Set;for(let l of s){let c=await g_(l);typeof c=="string"?o.push({name:l,err:c}):(n||(n=c),n===c&&a.add(l))}if(!n)throw new Error(`no available backend found. ERR: ${o.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(let{name:l,err:c}of o)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${c}`);let i=r.filter(l=>a.has(typeof l=="string"?l:l.name));return[n,new Proxy(e,{get:(l,c)=>c==="executionProviders"?i:Reflect.get(l,c)})]}}),nx=Be(()=>{tM()}),rM,ox=Be(()=>{rM="1.22.0-dev.20250409-89f8206ba4"}),Ol,os,sM=Be(()=>{ox(),Ol="warning",os={wasm:{},webgl:{},webgpu:{},versions:{common:rM},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Ol=e}},get logLevel(){return Ol}},Object.defineProperty(os,"logLevel",{enumerable:!0})}),Yt,ix=Be(()=>{sM(),Yt=os}),nM,oM,ax=Be(()=>{nM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];let s=t.getContext("2d");if(s!=null){let n,o;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let a=r?.format!==void 0?r.format:"RGB",i=r?.norm,l,c;i===void 0||i.mean===void 0?l=[255,255,255,255]:typeof i.mean=="number"?l=[i.mean,i.mean,i.mean,i.mean]:(l=[i.mean[0],i.mean[1],i.mean[2],0],i.mean[3]!==void 0&&(l[3]=i.mean[3])),i===void 0||i.bias===void 0?c=[0,0,0,0]:typeof i.bias=="number"?c=[i.bias,i.bias,i.bias,i.bias]:(c=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(c[3]=i.bias[3]));let p=o*n,d=0,u=p,f=p*2,_=-1;a==="RGBA"?(d=0,u=p,f=p*2,_=p*3):a==="RGB"?(d=0,u=p,f=p*2):a==="RBG"&&(d=0,f=p,u=p*2);for(let v=0;v<o;v++)for(let I=0;I<n;I++){let b=(e.data[d++]-c[0])*l[0],M=(e.data[u++]-c[1])*l[1],$=(e.data[f++]-c[2])*l[2],y=_===-1?255:(e.data[_++]-c[3])*l[3];s.fillStyle="rgba("+b+","+M+","+$+","+y+")",s.fillRect(I,v,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},oM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),s;if(t!=null){let n,o,a;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],a=e.dims[3]):(n=e.dims[3],o=e.dims[2],a=e.dims[1]);let i=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r?.norm,c,p;l===void 0||l.mean===void 0?c=[255,255,255,255]:typeof l.mean=="number"?c=[l.mean,l.mean,l.mean,l.mean]:(c=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(c[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let d=o*n;if(r!==void 0&&(r.format!==void 0&&a===4&&r.format!=="RGBA"||a===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let u=4,f=0,_=1,v=2,I=3,b=0,M=d,$=d*2,y=-1;i==="RGBA"?(b=0,M=d,$=d*2,y=d*3):i==="RGB"?(b=0,M=d,$=d*2):i==="RBG"&&(b=0,$=d,M=d*2),s=t.createImageData(n,o);for(let T=0;T<o*n;f+=u,_+=u,v+=u,I+=u,T++)s.data[f]=(e.data[b++]-p[0])*c[0],s.data[_]=(e.data[M++]-p[1])*c[1],s.data[v]=(e.data[$++]-p[2])*c[2],s.data[I]=y===-1?255:(e.data[y++]-p[3])*c[3]}else throw new Error("Can not access image data");return s}}),Vi,iM,aM,lM,cM,uM,lx=Be(()=>{eu(),Vi=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:t,width:s}=r,n=r.norm??{mean:255,bias:0},o,a;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?a=[n.bias,n.bias,n.bias,n.bias]:a=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let i=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",c=t*s,p=l==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),d=4,u=0,f=1,_=2,v=3,I=0,b=c,M=c*2,$=-1;i==="RGB"&&(d=3,u=0,f=1,_=2,v=-1),l==="RGBA"?$=c*3:l==="RBG"?(I=0,M=c,b=c*2):l==="BGR"&&(M=0,b=c,I=c*2);for(let y=0;y<c;y++,u+=d,_+=d,f+=d,v+=d)p[I++]=(e[u]+a[0])/o[0],p[b++]=(e[f]+a[1])/o[1],p[M++]=(e[_]+a[2])/o[2],$!==-1&&v!==-1&&(p[$++]=(e[v]+a[3])/o[3]);return l==="RGBA"?new Jr("float32",p,[1,4,t,s]):new Jr("float32",p,[1,3,t,s])},iM=async(e,r)=>{let t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",a,i=r??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){let p=l();p.width=e.width,p.height=e.height;let d=c(p);if(d!=null){let u=e.height,f=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(u=r.resizedHeight,f=r.resizedWidth),r!==void 0){if(i=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=u,i.width=f}else i.tensorFormat="RGBA",i.height=u,i.width=f;d.drawImage(e,0,0),a=d.getImageData(0,0,f,u).data}else throw new Error("Can not access image data")}else if(s){let p,d;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,d=r.resizedWidth):(p=e.height,d=e.width),r!==void 0&&(i=r),i.format="RGBA",i.height=p,i.width=d,r!==void 0){let u=l();u.width=d,u.height=p;let f=c(u);if(f!=null)f.putImageData(e,0,0),a=f.getImageData(0,0,d,p).data;else throw new Error("Can not access image data")}else a=e.data}else if(n){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");let p=l();p.width=e.width,p.height=e.height;let d=c(p);if(d!=null){let u=e.height,f=e.width;return d.drawImage(e,0,0,f,u),a=d.getImageData(0,0,f,u).data,i.height=u,i.width=f,Vi(a,i)}else throw new Error("Can not access image data")}else{if(o)return new Promise((p,d)=>{let u=l(),f=c(u);if(!e||!f)return d();let _=new Image;_.crossOrigin="Anonymous",_.src=e,_.onload=()=>{u.width=_.width,u.height=_.height,f.drawImage(_,0,0,u.width,u.height);let v=f.getImageData(0,0,u.width,u.height);i.height=u.height,i.width=u.width,p(Vi(v.data,i))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Vi(a,i);throw new Error("Input data provided is not supported - aborted tensor creation")},aM=(e,r)=>{let{width:t,height:s,download:n,dispose:o}=r,a=[1,s,t,4];return new Jr({location:"texture",type:"float32",texture:e,dims:a,download:n,dispose:o})},lM=(e,r)=>{let{dataType:t,dims:s,download:n,dispose:o}=r;return new Jr({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:n,dispose:o})},cM=(e,r)=>{let{dataType:t,dims:s,download:n,dispose:o}=r;return new Jr({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:n,dispose:o})},uM=(e,r,t)=>new Jr({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]})}),xn,Wo,Dl,dM,cx=Be(()=>{xn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Wo=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Dl=!1,dM=()=>{if(!Dl){Dl=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(xn.set("int64",BigInt64Array),Wo.set(BigInt64Array,"int64")),r&&(xn.set("uint64",BigUint64Array),Wo.set(BigUint64Array,"uint64")),s?(xn.set("float16",t),Wo.set(t,"float16")):xn.set("float16",Uint16Array)}}}),pM,mM,ux=Be(()=>{eu(),pM=e=>{let r=1;for(let t=0;t<e.length;t++){let s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},mM=(e,r)=>{switch(e.location){case"cpu":return new Jr(e.type,e.data,r);case"cpu-pinned":return new Jr({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new Jr({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new Jr({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new Jr({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),Jr,eu=Be(()=>{ax(),lx(),cx(),ux(),Jr=class{constructor(e,r,t){dM();let s,n;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,s=e.type,n=e.dims,e.location){case"cpu-pinned":{let a=xn.get(s);if(!a)throw new TypeError(`unsupported type "${s}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(s!=="float32")throw new TypeError(`unsupported type "${s}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint64"&&s!=="int8"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,i;if(typeof e=="string")if(s=e,i=t,e==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");a=r}else{let l=xn.get(e);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(r)){if(e==="float16"&&l===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${l.name} as data.`);e==="uint64"||e==="int64"?a=l.from(r,BigInt):a=l.from(r)}else if(r instanceof l)a=r;else if(r instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(r);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&r instanceof Uint16Array&&l!==Uint16Array)a=new globalThis.Float16Array(r.buffer,r.byteOffset,r.length);else throw new TypeError(`A ${s} tensor's data must be type of ${l}`)}else if(i=r,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof e[0];if(l==="string")s="string",a=e;else if(l==="boolean")s="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else if(e instanceof Uint8ClampedArray)s="uint8",a=Uint8Array.from(e);else{let l=Wo.get(e.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);s=l,a=e}if(i===void 0)i=[a.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");n=i,this.cpuData=a,this.dataLocation="cpu"}let o=pM(n);if(this.cpuData&&o!==this.cpuData.length&&!((s==="uint4"||s==="int4")&&Math.ceil(o/2)===this.cpuData.length))throw new Error(`Tensor's size(${o}) does not match data length(${this.cpuData.length}).`);this.type=s,this.dims=n,this.size=o}static async fromImage(e,r){return iM(e,r)}static fromTexture(e,r){return aM(e,r)}static fromGpuBuffer(e,r){return lM(e,r)}static fromMLTensor(e,r){return cM(e,r)}static fromPinnedBuffer(e,r,t){return uM(e,r,t)}toDataURL(e){return nM(this,e)}toImageData(e){return oM(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,e&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return mM(this,e)}}}),ys,hM=Be(()=>{eu(),ys=Jr}),Xo,Ll,xs,as,_M=Be(()=>{sM(),Xo=(e,r)=>{(typeof os.trace>"u"?!os.wasm.trace:!os.trace)||console.timeStamp(`${e}::ORT::${r}`)},Ll=(e,r)=>{let t=new Error().stack?.split(/\r\n|\r|\n/g)||[],s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(o+=`::${r}`),Xo("CPU",o);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},xs=e=>{(typeof os.trace>"u"?!os.wasm.trace:!os.trace)||Ll("BEGIN",e)},as=e=>{(typeof os.trace>"u"?!os.wasm.trace:!os.trace)||Ll("END",e)}}),fM,dx=Be(()=>{tM(),hM(),_M(),fM=class gM{constructor(r){this.handler=r}async run(r,t,s){xs();let n={},o={};if(typeof r!="object"||r===null||r instanceof ys||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof ys)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let c of t){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,p=Object.getOwnPropertyNames(t);for(let d of this.outputNames)if(p.indexOf(d)!==-1){let u=t[d];(u===null||u instanceof ys)&&(c=!0,a=!1,n[d]=u)}if(c){if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else o=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof r[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(a)for(let c of this.outputNames)n[c]=null;let i=await this.handler.run(r,n,o),l={};for(let c in i)if(Object.hasOwnProperty.call(i,c)){let p=i[c];p instanceof ys?l[c]=p:l[c]=new ys(p.type,p.data,p.dims)}return as(),l}async release(){return this.handler.dispose()}static async create(r,t,s,n){xs();let o,a={};if(typeof r=="string"){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){let p=r,d=0,u=r.byteLength;if(typeof t=="object"&&t!==null)a=t;else if(typeof t=="number"){if(d=t,!Number.isSafeInteger(d))throw new RangeError("'byteOffset' must be an integer.");if(d<0||d>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(u=r.byteLength-d,typeof s=="number"){if(u=s,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||d+u>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-d}].`);if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(p,d,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[i,l]=await eM(a),c=await i.createInferenceSessionHandler(o,l);return as(),new gM(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),tu,px=Be(()=>{dx(),tu=fM}),mx=Be(()=>{}),hx=Be(()=>{}),_x=Be(()=>{}),fx=Be(()=>{}),wM={};no(wM,{InferenceSession:()=>tu,TRACE:()=>Xo,TRACE_FUNC_BEGIN:()=>xs,TRACE_FUNC_END:()=>as,Tensor:()=>ys,env:()=>Yt,registerBackend:()=>En});var Ts=Be(()=>{nx(),ix(),px(),hM(),mx(),hx(),_M(),_x(),fx()}),ru=Be(()=>{}),MM={};no(MM,{default:()=>bM});var zl,Bl,bM,gx=Be(()=>{E0(),$n(),su(),zl="ort-wasm-proxy-worker",Bl=globalThis.self?.name===zl,Bl&&(self.onmessage=e=>{let{type:r,in:t}=e.data;try{switch(r){case"init-wasm":nu(t.wasm).then(()=>{vu(t).then(()=>{postMessage({type:r})},s=>{postMessage({type:r,err:s})})},s=>{postMessage({type:r,err:s})});break;case"init-ep":{let{epName:s,env:n}=t;xu(n,s).then(()=>{postMessage({type:r})},o=>{postMessage({type:r,err:o})});break}case"copy-from":{let{buffer:s}=t,n=pa(s);postMessage({type:r,out:n});break}case"create":{let{model:s,options:n}=t;Tu(s,n).then(o=>{postMessage({type:r,out:o})},o=>{postMessage({type:r,err:o})});break}case"release":Eu(t),postMessage({type:r});break;case"run":{let{sessionId:s,inputIndices:n,inputs:o,outputIndices:a,options:i}=t;Pu(s,n,o,a,new Array(a.length).fill(null),i).then(l=>{l.some(c=>c[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:l},Su([...o,...l]))},l=>{postMessage({type:r,err:l})});break}case"end-profiling":Cu(t),postMessage({type:r});break;default:}}catch(s){postMessage({type:r,err:s})}}),bM=Bl?null:e=>new Worker(e??Xr,{type:"module",name:zl})}),yM={};no(yM,{default:()=>vM});var Rl,jl,vM,w_,wx=Be(()=>{jl=(Rl=import.meta.url,async function(e={}){var r,t,s=e,n=new Promise((m,P)=>{r=m,t=P}),o=typeof window=="object",a=typeof WorkerGlobalScope<"u",i=a&&self.name?.startsWith("em-pthread");s.mountExternalData=(m,P)=>{m.startsWith("./")&&(m=m.substring(2)),(s.Eb||(s.Eb=new Map)).set(m,P)},s.unmountExternalData=()=>{delete s.Eb};var l=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let c=m=>async(...P)=>{try{if(s.Fb)throw Error("Session already started");let A=s.Fb={dc:P[0],errors:[]},L=await m(...P);if(s.Fb!==A)throw Error("Session mismatch");s.Jb?.flush();let V=A.errors;if(0<V.length){let ie=await Promise.all(V);if(ie=ie.filter(Te=>Te),0<ie.length)throw Error(ie.join(`
`))}return L}finally{s.Fb=null}};s.jsepInit=(m,P)=>{if(m==="webgpu"){[s.Jb,s.Ub,s.Yb,s.Kb,s.Xb,s.jb,s.Zb,s.ac,s.Vb,s.Wb,s.$b]=P;let A=s.Jb;s.jsepRegisterBuffer=(L,V,ie,Te)=>A.registerBuffer(L,V,ie,Te),s.jsepGetBuffer=L=>A.getBuffer(L),s.jsepCreateDownloader=(L,V,ie)=>A.createDownloader(L,V,ie),s.jsepOnCreateSession=L=>{A.onCreateSession(L)},s.jsepOnReleaseSession=L=>{A.onReleaseSession(L)},s.jsepOnRunStart=L=>A.onRunStart(L),s.bc=(L,V)=>{A.upload(L,V)}}else if(m==="webnn"){let A=P[0];[s.nc,s.Nb,s.webnnEnsureTensor,s.Ob,s.webnnDownloadTensor]=P.slice(1),s.webnnReleaseTensorId=s.Nb,s.webnnUploadTensor=s.Ob,s.webnnOnRunStart=L=>A.onRunStart(L),s.webnnOnRunEnd=A.onRunEnd.bind(A),s.webnnRegisterMLContext=(L,V)=>{A.registerMLContext(L,V)},s.webnnOnReleaseSession=L=>{A.onReleaseSession(L)},s.webnnCreateMLTensorDownloader=(L,V)=>A.createMLTensorDownloader(L,V),s.webnnRegisterMLTensor=(L,V,ie,Te)=>A.registerMLTensor(L,V,ie,Te),s.webnnCreateMLContext=L=>A.createMLContext(L),s.webnnRegisterMLConstant=(L,V,ie,Te,De,He)=>A.registerMLConstant(L,V,ie,Te,De,s.Eb,He),s.webnnRegisterGraphInput=A.registerGraphInput.bind(A),s.webnnIsGraphInput=A.isGraphInput.bind(A),s.webnnCreateTemporaryTensor=A.createTemporaryTensor.bind(A),s.webnnIsInt64Supported=A.isInt64Supported.bind(A)}};let p=()=>{let m=(P,A,L)=>(...V)=>{let ie=Wt,Te=A?.();V=P(...V);let De=A?.();return Te!==De&&(P=De,L(Te),A=L=null),Wt!=ie?new Promise((He,ot)=>{pr={resolve:He,reject:ot}}):V};(()=>{for(let P of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])s[P]=m(s[P],()=>s[P],A=>s[P]=A)})(),c!==void 0&&(s._OrtRun=c(s._OrtRun),s._OrtRunWithBinding=c(s._OrtRunWithBinding)),p=void 0};s.asyncInit=()=>{p?.()};var d,u,f=Object.assign({},s),_=(m,P)=>{throw P},v="";(o||a)&&(a?v=self.location.href:typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),Rl&&(v=Rl),v=v.startsWith("blob:")?"":v.slice(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1),a&&(u=m=>{var P=new XMLHttpRequest;return P.open("GET",m,!1),P.responseType="arraybuffer",P.send(null),new Uint8Array(P.response)}),d=async m=>{if(ce(m))return new Promise((A,L)=>{var V=new XMLHttpRequest;V.open("GET",m,!0),V.responseType="arraybuffer",V.onload=()=>{V.status==200||V.status==0&&V.response?A(V.response):L(V.status)},V.onerror=L,V.send(null)});var P=await fetch(m,{credentials:"same-origin"});if(P.ok)return P.arrayBuffer();throw Error(P.status+" : "+P.url)});var I=console.log.bind(console),b=console.error.bind(console),M=I,$=b;Object.assign(s,f),f=null;var y,T,E,x,S,z,O,K,H,D,Z,Q,Y,re=s.wasmBinary,te=!1,ce=m=>m.startsWith("file://");function ue(){return y.buffer!=x.buffer&&xe(),x}function B(){return y.buffer!=x.buffer&&xe(),S}function F(){return y.buffer!=x.buffer&&xe(),z}function G(){return y.buffer!=x.buffer&&xe(),O}function j(){return y.buffer!=x.buffer&&xe(),K}function ae(){return y.buffer!=x.buffer&&xe(),H}function Ae(){return y.buffer!=x.buffer&&xe(),D}function ve(){return y.buffer!=x.buffer&&xe(),Y}if(i){let m=function(P){try{var A=P.data,L=A.Bb;if(L==="load"){let V=[];self.onmessage=ie=>V.push(ie),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let ie of V)m(ie);self.onmessage=m};for(let ie of A.Rb)s[ie]&&!s[ie].proxy||(s[ie]=(...Te)=>{postMessage({Bb:"callHandler",Qb:ie,args:Te})},ie=="print"&&(M=s[ie]),ie=="printErr"&&($=s[ie]));y=A.kc,xe(),Fe(A.lc)}else if(L==="run"){Gt(A.Ab),dn(A.Ab,0,0,1,0,0),Wr(),ee(A.Ab),Qe||(ln(),Qe=!0);try{kr(A.fc,A.Hb)}catch(V){if(V!="unwind")throw V}}else A.target!=="setimmediate"&&(L==="checkMailbox"?Qe&&se():L&&($(`worker: received unknown command ${L}`),$(A)))}catch(V){throw vo(),V}};var Fe,Qe=!1;$=function(...P){P=P.join(" "),console.error(P)},self.alert=function(...P){postMessage({Bb:"alert",text:P.join(" "),ic:cn()})},self.onunhandledrejection=P=>{throw P.reason||P},self.onmessage=m}function xe(){var m=y.buffer;s.HEAP8=x=new Int8Array(m),s.HEAP16=z=new Int16Array(m),s.HEAPU8=S=new Uint8Array(m),s.HEAPU16=O=new Uint16Array(m),s.HEAP32=K=new Int32Array(m),s.HEAPU32=H=new Uint32Array(m),s.HEAPF32=D=new Float32Array(m),s.HEAPF64=Y=new Float64Array(m),s.HEAP64=Z=new BigInt64Array(m),s.HEAPU64=Q=new BigUint64Array(m)}function q(){i?startWorker(s):ut.Ca()}i||(y=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),xe());var de,W=0,fe=null;function ke(){if(--W==0&&fe){var m=fe;fe=null,m()}}function ye(m){throw $(m="Aborted("+m+")"),te=!0,m=new WebAssembly.RuntimeError(m+". Build with -sASSERTIONS for more info."),t(m),m}function ge(){return{a:{L:Ie,Aa:we,b:Us,$:Os,A:Tt,pa:Ps,X:N,Z:J,qa:ne,na:me,ga:Se,ma:tt,J:lt,Y:Ge,V:Ct,oa:$t,W:_r,va:Gr,E:cs,Q:Cs,O:Hr,D:Lr,u:Le,r:Re,P:rt,z:In,R:le,ja:k,T:he,aa:Ke,M:Xe,F:Je,ia:ee,sa:Ue,t:tr,Ba:vr,w:ps,o:ss,l:mr,c:Kr,n:Rr,j:Yo,v:Zo,p:ei,f:ti,s:ri,m:Gs,e:si,k:ni,i:oi,g:ii,d:ai,da:Ks,ea:li,fa:ci,ba:Fn,ca:lo,N:uo,xa:po,ua:mo,h:fo,C:go,G:On,ta:ui,x:di,ra:pi,U:mi,q:co,y:hi,K:_i,S:fi,za:gi,ya:Ln,ka:ks,la:wo,_:Ye,B:wi,I:Mo,ha:Mi,H:Rn,a:y,wa:et}}}var Ee={829644:(m,P,A,L,V)=>{if(s===void 0||!s.Eb)return 1;if((m=Ut(Number(m>>>0))).startsWith("./")&&(m=m.substring(2)),!(m=s.Eb.get(m)))return 2;if(P=Number(P>>>0),A=Number(A>>>0),L=Number(L>>>0),P+A>m.byteLength)return 3;try{let ie=m.subarray(P,P+A);switch(V){case 0:B().set(ie,L>>>0);break;case 1:s.mc?s.mc(L,ie):s.bc(L,ie);break;default:return 4}return 0}catch{return 4}},830468:(m,P,A)=>{s.Ob(m,B().subarray(P>>>0,P+A>>>0))},830532:()=>s.nc(),830574:m=>{s.Nb(m)},830611:()=>{s.Vb()},830642:()=>{s.Wb()},830671:()=>{s.$b()},830696:m=>s.Ub(m),830729:m=>s.Yb(m),830761:(m,P,A)=>{s.Kb(Number(m),Number(P),Number(A),!0)},830824:(m,P,A)=>{s.Kb(Number(m),Number(P),Number(A))},830881:()=>typeof wasmOffsetConverter<"u",830938:m=>{s.jb("Abs",m,void 0)},830989:m=>{s.jb("Neg",m,void 0)},831040:m=>{s.jb("Floor",m,void 0)},831093:m=>{s.jb("Ceil",m,void 0)},831145:m=>{s.jb("Reciprocal",m,void 0)},831203:m=>{s.jb("Sqrt",m,void 0)},831255:m=>{s.jb("Exp",m,void 0)},831306:m=>{s.jb("Erf",m,void 0)},831357:m=>{s.jb("Sigmoid",m,void 0)},831412:(m,P,A)=>{s.jb("HardSigmoid",m,{alpha:P,beta:A})},831491:m=>{s.jb("Log",m,void 0)},831542:m=>{s.jb("Sin",m,void 0)},831593:m=>{s.jb("Cos",m,void 0)},831644:m=>{s.jb("Tan",m,void 0)},831695:m=>{s.jb("Asin",m,void 0)},831747:m=>{s.jb("Acos",m,void 0)},831799:m=>{s.jb("Atan",m,void 0)},831851:m=>{s.jb("Sinh",m,void 0)},831903:m=>{s.jb("Cosh",m,void 0)},831955:m=>{s.jb("Asinh",m,void 0)},832008:m=>{s.jb("Acosh",m,void 0)},832061:m=>{s.jb("Atanh",m,void 0)},832114:m=>{s.jb("Tanh",m,void 0)},832166:m=>{s.jb("Not",m,void 0)},832217:(m,P,A)=>{s.jb("Clip",m,{min:P,max:A})},832286:m=>{s.jb("Clip",m,void 0)},832338:(m,P)=>{s.jb("Elu",m,{alpha:P})},832396:m=>{s.jb("Gelu",m,void 0)},832448:m=>{s.jb("Relu",m,void 0)},832500:(m,P)=>{s.jb("LeakyRelu",m,{alpha:P})},832564:(m,P)=>{s.jb("ThresholdedRelu",m,{alpha:P})},832634:(m,P)=>{s.jb("Cast",m,{to:P})},832692:m=>{s.jb("Add",m,void 0)},832743:m=>{s.jb("Sub",m,void 0)},832794:m=>{s.jb("Mul",m,void 0)},832845:m=>{s.jb("Div",m,void 0)},832896:m=>{s.jb("Pow",m,void 0)},832947:m=>{s.jb("Equal",m,void 0)},833e3:m=>{s.jb("Greater",m,void 0)},833055:m=>{s.jb("GreaterOrEqual",m,void 0)},833117:m=>{s.jb("Less",m,void 0)},833169:m=>{s.jb("LessOrEqual",m,void 0)},833228:(m,P,A,L,V)=>{s.jb("ReduceMean",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},833403:(m,P,A,L,V)=>{s.jb("ReduceMax",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},833577:(m,P,A,L,V)=>{s.jb("ReduceMin",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},833751:(m,P,A,L,V)=>{s.jb("ReduceProd",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},833926:(m,P,A,L,V)=>{s.jb("ReduceSum",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834100:(m,P,A,L,V)=>{s.jb("ReduceL1",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834273:(m,P,A,L,V)=>{s.jb("ReduceL2",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834446:(m,P,A,L,V)=>{s.jb("ReduceLogSum",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834623:(m,P,A,L,V)=>{s.jb("ReduceSumSquare",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834803:(m,P,A,L,V)=>{s.jb("ReduceLogSumExp",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},834983:m=>{s.jb("Where",m,void 0)},835036:(m,P,A)=>{s.jb("Transpose",m,{perm:P?Array.from(j().subarray(Number(P)>>>0,Number(A)>>>0)):[]})},835160:(m,P,A,L)=>{s.jb("DepthToSpace",m,{blocksize:P,mode:Ut(A),format:L?"NHWC":"NCHW"})},835293:(m,P,A,L)=>{s.jb("DepthToSpace",m,{blocksize:P,mode:Ut(A),format:L?"NHWC":"NCHW"})},835426:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr,Is)=>{s.jb("ConvTranspose",m,{format:He?"NHWC":"NCHW",autoPad:P,dilations:[A],group:L,kernelShape:[V],pads:[ie,Te],strides:[De],wIsConst:()=>!!ue()[ot>>>0],outputPadding:wt?Array.from(j().subarray(Number(wt)>>>0,Number(At)>>>0)):[],outputShape:Rt?Array.from(j().subarray(Number(Rt)>>>0,Number(Tr)>>>0)):[],activation:Ut(Is)})},835859:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("ConvTranspose",m,{format:De?"NHWC":"NCHW",autoPad:P,dilations:Array.from(j().subarray(Number(A)>>>0,2+(Number(A)>>>0)>>>0)),group:L,kernelShape:Array.from(j().subarray(Number(V)>>>0,2+(Number(V)>>>0)>>>0)),pads:Array.from(j().subarray(Number(ie)>>>0,4+(Number(ie)>>>0)>>>0)),strides:Array.from(j().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!ue()[He>>>0],outputPadding:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],outputShape:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[],activation:Ut(Tr)})},836520:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr,Is)=>{s.jb("ConvTranspose",m,{format:He?"NHWC":"NCHW",autoPad:P,dilations:[A],group:L,kernelShape:[V],pads:[ie,Te],strides:[De],wIsConst:()=>!!ue()[ot>>>0],outputPadding:wt?Array.from(j().subarray(Number(wt)>>>0,Number(At)>>>0)):[],outputShape:Rt?Array.from(j().subarray(Number(Rt)>>>0,Number(Tr)>>>0)):[],activation:Ut(Is)})},836953:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("ConvTranspose",m,{format:De?"NHWC":"NCHW",autoPad:P,dilations:Array.from(j().subarray(Number(A)>>>0,2+(Number(A)>>>0)>>>0)),group:L,kernelShape:Array.from(j().subarray(Number(V)>>>0,2+(Number(V)>>>0)>>>0)),pads:Array.from(j().subarray(Number(ie)>>>0,4+(Number(ie)>>>0)>>>0)),strides:Array.from(j().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!ue()[He>>>0],outputPadding:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],outputShape:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[],activation:Ut(Tr)})},837614:(m,P)=>{s.jb("GlobalAveragePool",m,{format:P?"NHWC":"NCHW"})},837705:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("AveragePool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:V,dilations:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(He)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[]})},838184:(m,P)=>{s.jb("GlobalAveragePool",m,{format:P?"NHWC":"NCHW"})},838275:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("AveragePool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:V,dilations:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(He)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[]})},838754:(m,P)=>{s.jb("GlobalMaxPool",m,{format:P?"NHWC":"NCHW"})},838841:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("MaxPool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:V,dilations:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(He)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[]})},839316:(m,P)=>{s.jb("GlobalMaxPool",m,{format:P?"NHWC":"NCHW"})},839403:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr)=>{s.jb("MaxPool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:V,dilations:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(He)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Rt)>>>0)):[]})},839878:(m,P,A,L,V)=>{s.jb("Gemm",m,{alpha:P,beta:A,transA:L,transB:V})},839982:m=>{s.jb("MatMul",m,void 0)},840036:(m,P,A,L)=>{s.jb("ArgMax",m,{keepDims:!!P,selectLastIndex:!!A,axis:L})},840144:(m,P,A,L)=>{s.jb("ArgMin",m,{keepDims:!!P,selectLastIndex:!!A,axis:L})},840252:(m,P)=>{s.jb("Softmax",m,{axis:P})},840315:(m,P)=>{s.jb("Concat",m,{axis:P})},840375:(m,P,A,L,V)=>{s.jb("Split",m,{axis:P,numOutputs:A,splitSizes:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},840531:m=>{s.jb("Expand",m,void 0)},840585:(m,P)=>{s.jb("Gather",m,{axis:Number(P)})},840656:(m,P)=>{s.jb("GatherElements",m,{axis:Number(P)})},840735:(m,P)=>{s.jb("GatherND",m,{batch_dims:Number(P)})},840814:(m,P,A,L,V,ie,Te,De,He,ot,wt)=>{s.jb("Resize",m,{antialias:P,axes:A?Array.from(j().subarray(Number(A)>>>0,Number(L)>>>0)):[],coordinateTransformMode:Ut(V),cubicCoeffA:ie,excludeOutside:Te,extrapolationValue:De,keepAspectRatioPolicy:Ut(He),mode:Ut(ot),nearestMode:Ut(wt)})},841176:(m,P,A,L,V,ie,Te)=>{s.jb("Slice",m,{starts:P?Array.from(j().subarray(Number(P)>>>0,Number(A)>>>0)):[],ends:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[],axes:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[]})},841440:m=>{s.jb("Tile",m,void 0)},841492:(m,P,A)=>{s.jb("InstanceNormalization",m,{epsilon:P,format:A?"NHWC":"NCHW"})},841606:(m,P,A)=>{s.jb("InstanceNormalization",m,{epsilon:P,format:A?"NHWC":"NCHW"})},841720:m=>{s.jb("Range",m,void 0)},841773:(m,P)=>{s.jb("Einsum",m,{equation:Ut(P)})},841854:(m,P,A,L,V)=>{s.jb("Pad",m,{mode:P,value:A,pads:L?Array.from(j().subarray(Number(L)>>>0,Number(V)>>>0)):[]})},841997:(m,P,A,L,V,ie)=>{s.jb("BatchNormalization",m,{epsilon:P,momentum:A,spatial:!!V,trainingMode:!!L,format:ie?"NHWC":"NCHW"})},842166:(m,P,A,L,V,ie)=>{s.jb("BatchNormalization",m,{epsilon:P,momentum:A,spatial:!!V,trainingMode:!!L,format:ie?"NHWC":"NCHW"})},842335:(m,P,A)=>{s.jb("CumSum",m,{exclusive:Number(P),reverse:Number(A)})},842432:(m,P,A)=>{s.jb("DequantizeLinear",m,{axis:P,blockSize:A})},842522:(m,P,A,L,V)=>{s.jb("GridSample",m,{align_corners:P,mode:Ut(A),padding_mode:Ut(L),format:V?"NHWC":"NCHW"})},842692:(m,P,A,L,V)=>{s.jb("GridSample",m,{align_corners:P,mode:Ut(A),padding_mode:Ut(L),format:V?"NHWC":"NCHW"})},842862:(m,P)=>{s.jb("ScatterND",m,{reduction:Ut(P)})},842947:(m,P,A,L,V,ie,Te,De,He)=>{s.jb("Attention",m,{numHeads:P,isUnidirectional:A,maskFilterValue:L,scale:V,doRotary:ie,qkvHiddenSizes:Te?Array.from(j().subarray(Number(De)>>>0,Number(De)+Te>>>0)):[],pastPresentShareBuffer:!!He})},843219:m=>{s.jb("BiasAdd",m,void 0)},843274:m=>{s.jb("BiasSplitGelu",m,void 0)},843335:m=>{s.jb("FastGelu",m,void 0)},843391:(m,P,A,L,V,ie,Te,De,He,ot,wt,At,Rt,Tr,Is,vi)=>{s.jb("Conv",m,{format:At?"NHWC":"NCHW",auto_pad:P,dilations:A?Array.from(j().subarray(Number(A)>>>0,Number(L)>>>0)):[],group:V,kernel_shape:ie?Array.from(j().subarray(Number(ie)>>>0,Number(Te)>>>0)):[],pads:De?Array.from(j().subarray(Number(De)>>>0,Number(He)>>>0)):[],strides:ot?Array.from(j().subarray(Number(ot)>>>0,Number(wt)>>>0)):[],w_is_const:()=>!!ue()[Number(Rt)>>>0],activation:Ut(Tr),activation_params:Is?Array.from(Ae().subarray(Number(Is)>>>0,Number(vi)>>>0)):[]})},843975:m=>{s.jb("Gelu",m,void 0)},844027:(m,P,A,L,V,ie,Te,De,He)=>{s.jb("GroupQueryAttention",m,{numHeads:P,kvNumHeads:A,scale:L,softcap:V,doRotary:ie,rotaryInterleaved:Te,smoothSoftmax:De,localWindowSize:He})},844244:(m,P,A,L)=>{s.jb("LayerNormalization",m,{axis:P,epsilon:A,simplified:!!L})},844355:(m,P,A,L)=>{s.jb("LayerNormalization",m,{axis:P,epsilon:A,simplified:!!L})},844466:(m,P,A,L,V,ie)=>{s.jb("MatMulNBits",m,{k:P,n:A,accuracyLevel:L,bits:V,blockSize:ie})},844593:(m,P,A,L,V,ie)=>{s.jb("MultiHeadAttention",m,{numHeads:P,isUnidirectional:A,maskFilterValue:L,scale:V,doRotary:ie})},844752:(m,P)=>{s.jb("QuickGelu",m,{alpha:P})},844816:(m,P,A,L,V)=>{s.jb("RotaryEmbedding",m,{interleaved:!!P,numHeads:A,rotaryEmbeddingDim:L,scale:V})},844955:(m,P,A)=>{s.jb("SkipLayerNormalization",m,{epsilon:P,simplified:!!A})},845057:(m,P,A)=>{s.jb("SkipLayerNormalization",m,{epsilon:P,simplified:!!A})},845159:(m,P,A,L)=>{s.jb("GatherBlockQuantized",m,{gatherAxis:P,quantizeAxis:A,blockSize:L})},845280:m=>{s.Zb(m)},845314:(m,P)=>s.ac(Number(m),Number(P),s.Fb.dc,s.Fb.errors)};function we(m,P,A){return Br(async()=>{await s.Xb(Number(m),Number(P),Number(A))})}function Ie(){return typeof wasmOffsetConverter<"u"}class Oe{name="ExitStatus";constructor(P){this.message=`Program terminated with exit(${P})`,this.status=P}}var We=m=>{m.terminate(),m.onmessage=()=>{}},be=[],st=m=>{Ze.length==0&&(Zr(),Or(Ze[0]));var P=Ze.pop();if(!P)return 6;Pt.push(P),ht[m.Ab]=P,P.Ab=m.Ab;var A={Bb:"run",fc:m.ec,Hb:m.Hb,Ab:m.Ab};return P.postMessage(A,m.Mb),0},Ne=0,je=(m,P,...A)=>{for(var L=2*A.length,V=Un(),ie=mn(8*L),Te=ie>>>3,De=0;De<A.length;De++){var He=A[De];typeof He=="bigint"?(Z[Te+2*De]=1n,Z[Te+2*De+1]=He):(Z[Te+2*De]=0n,ve()[Te+2*De+1>>>0]=He)}return m=xo(m,0,L,ie,P),pn(V),m};function et(m){if(i)return je(0,1,m);if(E=m,!(0<Ne)){for(var P of Pt)We(P);for(P of Ze)We(P);Ze=[],Pt=[],ht={},te=!0}_(0,new Oe(m))}function qe(m){if(i)return je(1,0,m);Ye(m)}var Ye=m=>{if(E=m,i)throw qe(m),"unwind";et(m)},Ze=[],Pt=[],It=[],ht={},br=m=>{var P=m.Ab;delete ht[P],Ze.push(m),Pt.splice(Pt.indexOf(m),1),m.Ab=0,jn(P)};function Wr(){It.forEach(m=>m())}var Or=m=>new Promise(P=>{m.onmessage=V=>{var ie=(V=V.data).Bb;if(V.Gb&&V.Gb!=cn()){var Te=ht[V.Gb];Te?Te.postMessage(V,V.Mb):$(`Internal error! Worker sent a message "${ie}" to target pthread ${V.Gb}, but that thread no longer exists!`)}else ie==="checkMailbox"?se():ie==="spawnThread"?st(V):ie==="cleanupThread"?br(ht[V.hc]):ie==="loaded"?(m.loaded=!0,P(m)):ie==="alert"?alert(`Thread ${V.ic}: ${V.text}`):V.target==="setimmediate"?m.postMessage(V):ie==="callHandler"?s[V.Qb](...V.args):ie&&$(`worker sent an unknown command ${ie}`)},m.onerror=V=>{throw $(`worker sent an error! ${V.filename}:${V.lineno}: ${V.message}`),V};var A,L=[];for(A of[])s.propertyIsEnumerable(A)&&L.push(A);m.postMessage({Bb:"load",Rb:L,kc:y,lc:T})});function Zr(){var m=new Worker((()=>{let P=URL;return import.meta.url>"file:"&&import.meta.url<"file;"?new P("ort.bundle.min.mjs",import.meta.url):new URL(import.meta.url)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});Ze.push(m)}var Gt=m=>{xe();var P=ae()[m+52>>>2>>>0];m=ae()[m+56>>>2>>>0],Eo(P,P-m),pn(P)},kr=(m,P)=>{Ne=0,m=Po(m,P),0<Ne?E=m:Nn(m)};class Vs{constructor(P){this.Ib=P-24}}function Us(m,P,A){var L=new Vs(m>>>=0);throw P>>>=0,A>>>=0,ae()[L.Ib+16>>>2>>>0]=0,ae()[L.Ib+4>>>2>>>0]=P,ae()[L.Ib+8>>>2>>>0]=A,m}function Fs(m,P,A,L){return i?je(2,1,m,P,A,L):Os(m,P,A,L)}function Os(m,P,A,L){if(m>>>=0,A>>>=0,L>>>=0,l===void 0)return 6;var V=[];return i&&V.length===0?Fs(m,P>>>=0,A,L):(m={ec:A,Ab:m,Hb:L,Mb:V},i?(m.Bb="spawnThread",postMessage(m,V),0):st(m))}var dt=typeof TextDecoder<"u"?new TextDecoder:void 0,Es=(m,P=0,A=NaN)=>{var L=(P>>>=0)+A;for(A=P;m[A]&&!(A>=L);)++A;if(16<A-P&&m.buffer&&dt)return dt.decode(m.buffer instanceof ArrayBuffer?m.subarray(P,A):m.slice(P,A));for(L="";P<A;){var V=m[P++];if(128&V){var ie=63&m[P++];if((224&V)==192)L+=String.fromCharCode((31&V)<<6|ie);else{var Te=63&m[P++];65536>(V=(240&V)==224?(15&V)<<12|ie<<6|Te:(7&V)<<18|ie<<12|Te<<6|63&m[P++])?L+=String.fromCharCode(V):(V-=65536,L+=String.fromCharCode(55296|V>>10,56320|1023&V))}}else L+=String.fromCharCode(V)}return L},Ut=(m,P)=>(m>>>=0)?Es(B(),m,P):"";function Tt(m,P,A){return i?je(3,1,m,P,A):0}function Ps(m,P){if(i)return je(4,1,m,P)}var C=m=>{for(var P=0,A=0;A<m.length;++A){var L=m.charCodeAt(A);127>=L?P++:2047>=L?P+=2:55296<=L&&57343>=L?(P+=4,++A):P+=3}return P},X=(m,P,A)=>{var L=B();if(P>>>=0,0<A){var V=P;A=P+A-1;for(var ie=0;ie<m.length;++ie){var Te=m.charCodeAt(ie);if(55296<=Te&&57343>=Te&&(Te=65536+((1023&Te)<<10)|1023&m.charCodeAt(++ie)),127>=Te){if(P>=A)break;L[P++>>>0]=Te}else{if(2047>=Te){if(P+1>=A)break;L[P++>>>0]=192|Te>>6}else{if(65535>=Te){if(P+2>=A)break;L[P++>>>0]=224|Te>>12}else{if(P+3>=A)break;L[P++>>>0]=240|Te>>18,L[P++>>>0]=128|Te>>12&63}L[P++>>>0]=128|Te>>6&63}L[P++>>>0]=128|63&Te}}L[P>>>0]=0,m=P-V}else m=0;return m};function N(m,P){if(i)return je(5,1,m,P)}function J(m,P,A){if(i)return je(6,1,m,P,A)}function ne(m,P,A){return i?je(7,1,m,P,A):0}function me(m,P){if(i)return je(8,1,m,P)}function Se(m,P,A){if(i)return je(9,1,m,P,A)}function tt(m,P,A,L){if(i)return je(10,1,m,P,A,L)}function lt(m,P,A,L){if(i)return je(11,1,m,P,A,L)}function Ge(m,P,A,L){if(i)return je(12,1,m,P,A,L)}function Ct(m){if(i)return je(13,1,m)}function $t(m,P){if(i)return je(14,1,m,P)}function _r(m,P,A){if(i)return je(15,1,m,P,A)}var Bt,cr,Gr=()=>ye(""),Qt=m=>{for(var P="";B()[m>>>0];)P+=Bt[B()[m++>>>0]];return P},fr={},es={};function ur(m,P,A={}){return function(L,V,ie={}){var Te=V.name;if(!L)throw new cr(`type "${Te}" must have a positive integer typeid pointer`);if(es.hasOwnProperty(L)){if(ie.Sb)return;throw new cr(`Cannot register type '${Te}' twice`)}es[L]=V,fr.hasOwnProperty(L)&&(V=fr[L],delete fr[L],V.forEach(De=>De()))}(m,P,A)}var ls=(m,P,A)=>{switch(P){case 1:return A?L=>ue()[L>>>0]:L=>B()[L>>>0];case 2:return A?L=>F()[L>>>1>>>0]:L=>G()[L>>>1>>>0];case 4:return A?L=>j()[L>>>2>>>0]:L=>ae()[L>>>2>>>0];case 8:return A?L=>Z[L>>>3]:L=>Q[L>>>3];default:throw new TypeError(`invalid integer width (${P}): ${m}`)}};function cs(m,P,A){A>>>=0,ur(m>>>=0,{name:P=Qt(P>>>0),fromWireType:L=>L,toWireType:function(L,V){if(typeof V!="bigint"&&typeof V!="number")throw V=V===null?"null":(L=typeof V)=="object"||L==="array"||L==="function"?V.toString():""+V,new TypeError(`Cannot convert "${V}" to ${this.name}`);return typeof V=="number"&&(V=BigInt(V)),V},Cb:Dr,readValueFromPointer:ls(P,A,P.indexOf("u")==-1),Db:null})}var Dr=8;function Cs(m,P,A,L){ur(m>>>=0,{name:P=Qt(P>>>0),fromWireType:function(V){return!!V},toWireType:function(V,ie){return ie?A:L},Cb:Dr,readValueFromPointer:function(V){return this.fromWireType(B()[V>>>0])},Db:null})}var us=[],sr=[];function Kr(m){9<(m>>>=0)&&--sr[m+1]==0&&(sr[m]=void 0,us.push(m))}var dr=m=>{if(!m)throw new cr("Cannot use deleted val. handle = "+m);return sr[m]},yr=m=>{switch(m){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let P=us.pop()||sr.length;return sr[P]=m,sr[P+1]=1,P}};function ts(m){return this.fromWireType(ae()[m>>>2>>>0])}var Ss={name:"emscripten::val",fromWireType:m=>{var P=dr(m);return Kr(m),P},toWireType:(m,P)=>yr(P),Cb:Dr,readValueFromPointer:ts,Db:null};function Hr(m){return ur(m>>>0,Ss)}var Ds=(m,P)=>{switch(P){case 4:return function(A){return this.fromWireType(Ae()[A>>>2>>>0])};case 8:return function(A){return this.fromWireType(ve()[A>>>3>>>0])};default:throw new TypeError(`invalid float width (${P}): ${m}`)}};function Lr(m,P,A){A>>>=0,ur(m>>>=0,{name:P=Qt(P>>>0),fromWireType:L=>L,toWireType:(L,V)=>V,Cb:Dr,readValueFromPointer:Ds(P,A),Db:null})}function Le(m,P,A,L,V){if(m>>>=0,A>>>=0,P=Qt(P>>>0),V===-1&&(V=4294967295),V=De=>De,L===0){var ie=32-8*A;V=De=>De<<ie>>>ie}var Te=P.includes("unsigned")?function(De,He){return He>>>0}:function(De,He){return He};ur(m,{name:P,fromWireType:V,toWireType:Te,Cb:Dr,readValueFromPointer:ls(P,A,L!==0),Db:null})}function Re(m,P,A){function L(ie){var Te=ae()[ie>>>2>>>0];return ie=ae()[ie+4>>>2>>>0],new V(ue().buffer,ie,Te)}var V=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][P];ur(m>>>=0,{name:A=Qt(A>>>0),fromWireType:L,Cb:Dr,readValueFromPointer:L},{Sb:!0})}function rt(m,P){ur(m>>>=0,{name:P=Qt(P>>>0),fromWireType:function(A){for(var L,V=ae()[A>>>2>>>0],ie=A+4,Te=ie,De=0;De<=V;++De){var He=ie+De;De!=V&&B()[He>>>0]!=0||(Te=Ut(Te,He-Te),L===void 0?L=Te:(L+="\0",L+=Te),Te=He+1)}return Qr(A),L},toWireType:function(A,L){L instanceof ArrayBuffer&&(L=new Uint8Array(L));var V=typeof L=="string";if(!(V||L instanceof Uint8Array||L instanceof Uint8ClampedArray||L instanceof Int8Array))throw new cr("Cannot pass non-string to std::string");var ie=V?C(L):L.length,Te=un(4+ie+1),De=Te+4;if(ae()[Te>>>2>>>0]=ie,V)X(L,De,ie+1);else if(V)for(V=0;V<ie;++V){var He=L.charCodeAt(V);if(255<He)throw Qr(Te),new cr("String has UTF-16 code units that do not fit in 8 bits");B()[De+V>>>0]=He}else for(V=0;V<ie;++V)B()[De+V>>>0]=L[V];return A!==null&&A.push(Qr,Te),Te},Cb:Dr,readValueFromPointer:ts,Db(A){Qr(A)}})}var Xt=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ls=(m,P)=>{for(var A=m>>1,L=A+P/2;!(A>=L)&&G()[A>>>0];)++A;if(32<(A<<=1)-m&&Xt)return Xt.decode(B().slice(m,A));for(A="",L=0;!(L>=P/2);++L){var V=F()[m+2*L>>>1>>>0];if(V==0)break;A+=String.fromCharCode(V)}return A},$s=(m,P,A)=>{if(A??=2147483647,2>A)return 0;var L=P;A=(A-=2)<2*m.length?A/2:m.length;for(var V=0;V<A;++V){var ie=m.charCodeAt(V);F()[P>>>1>>>0]=ie,P+=2}return F()[P>>>1>>>0]=0,P-L},zs=m=>2*m.length,ds=(m,P)=>{for(var A=0,L="";!(A>=P/4);){var V=j()[m+4*A>>>2>>>0];if(V==0)break;++A,65536<=V?(V-=65536,L+=String.fromCharCode(55296|V>>10,56320|1023&V)):L+=String.fromCharCode(V)}return L},rn=(m,P,A)=>{if(P>>>=0,A??=2147483647,4>A)return 0;var L=P;A=L+A-4;for(var V=0;V<m.length;++V){var ie=m.charCodeAt(V);if(55296<=ie&&57343>=ie&&(ie=65536+((1023&ie)<<10)|1023&m.charCodeAt(++V)),j()[P>>>2>>>0]=ie,(P+=4)+4>A)break}return j()[P>>>2>>>0]=0,P-L},sn=m=>{for(var P=0,A=0;A<m.length;++A){var L=m.charCodeAt(A);55296<=L&&57343>=L&&++A,P+=4}return P};function In(m,P,A){if(m>>>=0,P>>>=0,A=Qt(A>>>=0),P===2)var L=Ls,V=$s,ie=zs,Te=De=>G()[De>>>1>>>0];else P===4&&(L=ds,V=rn,ie=sn,Te=De=>ae()[De>>>2>>>0]);ur(m,{name:A,fromWireType:De=>{for(var He,ot=ae()[De>>>2>>>0],wt=De+4,At=0;At<=ot;++At){var Rt=De+4+At*P;At!=ot&&Te(Rt)!=0||(wt=L(wt,Rt-wt),He===void 0?He=wt:(He+="\0",He+=wt),wt=Rt+P)}return Qr(De),He},toWireType:(De,He)=>{if(typeof He!="string")throw new cr(`Cannot pass non-string to C++ string type ${A}`);var ot=ie(He),wt=un(4+ot+P);return ae()[wt>>>2>>>0]=ot/P,V(He,wt+4,ot+P),De!==null&&De.push(Qr,wt),wt},Cb:Dr,readValueFromPointer:ts,Db(De){Qr(De)}})}function le(m,P){ur(m>>>=0,{Tb:!0,name:P=Qt(P>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function k(m){dn(m>>>0,!a,1,!o,131072,!1),Wr()}var U=m=>{if(!te)try{if(m(),!(0<Ne))try{i?Nn(E):Ye(E)}catch(P){P instanceof Oe||P=="unwind"||_(0,P)}}catch(P){P instanceof Oe||P=="unwind"||_(0,P)}};function ee(m){m>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(j(),m>>>2,m).value.then(se),m+=128,Atomics.store(j(),m>>>2,1))}var se=()=>{var m=cn();m&&(ee(m),U(Vn))};function he(m,P){(m>>>=0)==P>>>0?setTimeout(se):i?postMessage({Gb:m,Bb:"checkMailbox"}):(m=ht[m])&&m.postMessage({Bb:"checkMailbox"})}var Ce=[];function Ke(m,P,A,L,V){for(P>>>=0,L/=2,Ce.length=L,A=V>>>0>>>3,V=0;V<L;V++)Ce[V]=Z[A+2*V]?Z[A+2*V+1]:ve()[A+2*V+1>>>0];return(P?Ee[P]:yi[m])(...Ce)}var Xe=()=>{Ne=0};function Je(m){m>>>=0,i?postMessage({Bb:"cleanupThread",hc:m}):br(ht[m])}function Ue(m){}var St=(m,P)=>{var A=es[m];if(A===void 0)throw m=yo(m),A=Qt(m),Qr(m),new cr(`${P} has unknown type ${A}`);return A},gt=(m,P,A)=>{var L=[];return m=m.toWireType(L,A),L.length&&(ae()[P>>>2>>>0]=yr(L)),m};function tr(m,P,A){return P>>>=0,A>>>=0,m=dr(m>>>0),P=St(P,"emval::as"),gt(P,A,m)}function vr(m,P){return P>>>=0,m=dr(m>>>0),(P=St(P,"emval::as")).toWireType(null,m)}var Kt=m=>{try{m()}catch(P){ye(P)}},rr=0,Wt=null,Nr=0,rs=[],Ir={},qr={},Zt=0,pr=null,zr=[];function Br(m){return function(P){if(!te){if(rr===0){var A=!1,L=!1;P((V=0)=>{if(!te&&(Nr=V,A=!0,L)){rr=2,Kt(()=>So(Wt)),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),V=!1;try{var ie=function(){var He=j()[Wt+8>>>2>>>0];return He=ut[qr[He]],--Ne,He()}()}catch(He){ie=He,V=!0}var Te=!1;if(!Wt){var De=pr;De&&(pr=null,(V?De.reject:De.resolve)(ie),Te=!0)}if(V&&!Te)throw ie}}),L=!0,A||(rr=1,Wt=function(){var V=un(65548),ie=V+12;ae()[V>>>2>>>0]=ie,ae()[V+4>>>2>>>0]=ie+65536,ie=rs[0];var Te=Ir[ie];return Te===void 0&&(Te=Zt++,Ir[ie]=Te,qr[Te]=ie),ie=Te,j()[V+8>>>2>>>0]=ie,V}(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),Kt(()=>Wn(Wt)))}else rr===2?(rr=0,Kt(Gn),Qr(Wt),Wt=null,zr.forEach(U)):ye(`invalid state: ${rr}`);return Nr}}(P=>{m().then(P)})}function ps(m){return m>>>=0,Br(async()=>{var P=await dr(m);return yr(P)})}var gr=[];function ss(m,P,A,L){return A>>>=0,L>>>=0,(m=gr[m>>>0])(null,P=dr(P>>>0),A,L)}var xr={},Jt=m=>{var P=xr[m];return P===void 0?Qt(m):P};function mr(m,P,A,L,V){return A>>>=0,L>>>=0,V>>>=0,(m=gr[m>>>0])(P=dr(P>>>0),P[A=Jt(A)],L,V)}var ar=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Rr(m){return(m>>>=0)==0?yr(ar()):(m=Jt(m),yr(ar()[m]))}var Ws=m=>{var P=gr.length;return gr.push(m),P},An=(m,P)=>{for(var A=Array(m),L=0;L<m;++L)A[L]=St(ae()[P+4*L>>>2>>>0],"parameter "+L);return A},Bs=(m,P)=>Object.defineProperty(P,"name",{value:m});function Yo(m,P,A){var L=(P=An(m,P>>>0)).shift();m--;var V=`return function (obj, func, destructorsRef, args) {
`,ie=0,Te=[];A===0&&Te.push("obj");for(var De=["retType"],He=[L],ot=0;ot<m;++ot)Te.push("arg"+ot),De.push("argType"+ot),He.push(P[ot]),V+=`  var arg${ot} = argType${ot}.readValueFromPointer(args${ie?"+"+ie:""});
`,ie+=P[ot].Cb;return V+=`  var rv = ${A===1?"new func":"func.call"}(${Te.join(", ")});
`,L.Tb||(De.push("emval_returnValue"),He.push(gt),V+=`  return emval_returnValue(retType, destructorsRef, rv);
`),De.push(V+`};
`),m=function(wt){var At=Function;if(!(At instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof At} which is not a function`);var Rt=Bs(At.name||"unknownFunctionName",function(){});return Rt.prototype=At.prototype,Rt=new Rt,(wt=At.apply(Rt,wt))instanceof Object?wt:Rt}(De)(...He),A=`methodCaller<(${P.map(wt=>wt.name).join(", ")}) => ${L.name}>`,Ws(Bs(A,m))}function Zo(m){return m=Jt(m>>>0),yr(s[m])}function ei(m,P){return P>>>=0,m=dr(m>>>0),P=dr(P),yr(m[P])}function ti(m){9<(m>>>=0)&&(sr[m+1]+=1)}function ri(){return yr([])}function Gs(m){m=dr(m>>>0);for(var P=Array(m.length),A=0;A<m.length;A++)P[A]=m[A];return yr(P)}function si(m){return yr(Jt(m>>>0))}function ni(){return yr({})}function oi(m){for(var P=dr(m>>>=0);P.length;){var A=P.pop();P.pop()(A)}Kr(m)}function ii(m,P,A){P>>>=0,A>>>=0,m=dr(m>>>0),P=dr(P),A=dr(A),m[P]=A}function ai(m,P){return P>>>=0,m=(m=St(m>>>0,"_emval_take_value")).readValueFromPointer(P),yr(m)}function Ks(m,P){m=-9007199254740992>m||9007199254740992<m?NaN:Number(m),P>>>=0,m=new Date(1e3*m),j()[P>>>2>>>0]=m.getUTCSeconds(),j()[P+4>>>2>>>0]=m.getUTCMinutes(),j()[P+8>>>2>>>0]=m.getUTCHours(),j()[P+12>>>2>>>0]=m.getUTCDate(),j()[P+16>>>2>>>0]=m.getUTCMonth(),j()[P+20>>>2>>>0]=m.getUTCFullYear()-1900,j()[P+24>>>2>>>0]=m.getUTCDay(),m=(m.getTime()-Date.UTC(m.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,j()[P+28>>>2>>>0]=m}var oo=m=>m%4==0&&(m%100!=0||m%400==0),io=[0,31,60,91,121,152,182,213,244,274,305,335],ao=[0,31,59,90,120,151,181,212,243,273,304,334];function li(m,P){m=-9007199254740992>m||9007199254740992<m?NaN:Number(m),P>>>=0,m=new Date(1e3*m),j()[P>>>2>>>0]=m.getSeconds(),j()[P+4>>>2>>>0]=m.getMinutes(),j()[P+8>>>2>>>0]=m.getHours(),j()[P+12>>>2>>>0]=m.getDate(),j()[P+16>>>2>>>0]=m.getMonth(),j()[P+20>>>2>>>0]=m.getFullYear()-1900,j()[P+24>>>2>>>0]=m.getDay();var A=(oo(m.getFullYear())?io:ao)[m.getMonth()]+m.getDate()-1|0;j()[P+28>>>2>>>0]=A,j()[P+36>>>2>>>0]=-60*m.getTimezoneOffset(),A=new Date(m.getFullYear(),6,1).getTimezoneOffset();var L=new Date(m.getFullYear(),0,1).getTimezoneOffset();m=0|(A!=L&&m.getTimezoneOffset()==Math.min(L,A)),j()[P+32>>>2>>>0]=m}function ci(m){m>>>=0;var P=new Date(j()[m+20>>>2>>>0]+1900,j()[m+16>>>2>>>0],j()[m+12>>>2>>>0],j()[m+8>>>2>>>0],j()[m+4>>>2>>>0],j()[m>>>2>>>0],0),A=j()[m+32>>>2>>>0],L=P.getTimezoneOffset(),V=new Date(P.getFullYear(),6,1).getTimezoneOffset(),ie=new Date(P.getFullYear(),0,1).getTimezoneOffset(),Te=Math.min(ie,V);return 0>A?j()[m+32>>>2>>>0]=+(V!=ie&&Te==L):0<A!=(Te==L)&&(V=Math.max(ie,V),P.setTime(P.getTime()+6e4*((0<A?Te:V)-L))),j()[m+24>>>2>>>0]=P.getDay(),A=(oo(P.getFullYear())?io:ao)[P.getMonth()]+P.getDate()-1|0,j()[m+28>>>2>>>0]=A,j()[m>>>2>>>0]=P.getSeconds(),j()[m+4>>>2>>>0]=P.getMinutes(),j()[m+8>>>2>>>0]=P.getHours(),j()[m+12>>>2>>>0]=P.getDate(),j()[m+16>>>2>>>0]=P.getMonth(),j()[m+20>>>2>>>0]=P.getYear(),m=P.getTime(),BigInt(isNaN(m)?-1:m/1e3)}function Fn(m,P,A,L,V,ie,Te){return i?je(16,1,m,P,A,L,V,ie,Te):-52}function lo(m,P,A,L,V,ie){if(i)return je(17,1,m,P,A,L,V,ie)}var Hs={},co=()=>performance.timeOrigin+performance.now();function uo(m,P){if(i)return je(18,1,m,P);if(Hs[m]&&(clearTimeout(Hs[m].id),delete Hs[m]),!P)return 0;var A=setTimeout(()=>{delete Hs[m],U(()=>To(m,performance.timeOrigin+performance.now()))},P);return Hs[m]={id:A,qc:P},0}function po(m,P,A,L){m>>>=0,P>>>=0,A>>>=0,L>>>=0;var V=new Date().getFullYear(),ie=new Date(V,0,1).getTimezoneOffset();V=new Date(V,6,1).getTimezoneOffset();var Te=Math.max(ie,V);ae()[m>>>2>>>0]=60*Te,j()[P>>>2>>>0]=+(ie!=V),m=(P=De=>{var He=Math.abs(De);return`UTC${0<=De?"-":"+"}${String(Math.floor(He/60)).padStart(2,"0")}${String(He%60).padStart(2,"0")}`})(ie),P=P(V),V<ie?(X(m,A,17),X(P,L,17)):(X(m,L,17),X(P,A,17))}var ui=()=>Date.now();function mo(m,P,A){return 0<=m&&3>=m?(m===0?m=Date.now():m=performance.timeOrigin+performance.now(),Z[A>>>0>>>3]=BigInt(Math.round(1e6*m)),0):28}var ho=[],_o=(m,P)=>{ho.length=0;for(var A;A=B()[m++>>>0];){var L=A!=105;P+=(L&=A!=112)&&P%8?4:0,ho.push(A==112?ae()[P>>>2>>>0]:A==106?Z[P>>>3]:A==105?j()[P>>>2>>>0]:ve()[P>>>3>>>0]),P+=L?8:4}return ho};function fo(m,P,A){return m>>>=0,P=_o(P>>>0,A>>>0),Ee[m](...P)}function go(m,P,A){return m>>>=0,P=_o(P>>>0,A>>>0),Ee[m](...P)}var On=()=>{};function di(m,P){return $(Ut(m>>>0,P>>>0))}var pi=()=>{throw Ne+=1,"unwind"};function mi(){return 4294901760}var hi=()=>navigator.hardwareConcurrency;function _i(){return ye("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function fi(m){m>>>=0;var P=B().length;if(m<=P||4294901760<m)return!1;for(var A=1;4>=A;A*=2){var L=P*(1+.2/A);L=Math.min(L,m+100663296);e:{L=(Math.min(4294901760,65536*Math.ceil(Math.max(m,L)/65536))-y.buffer.byteLength+65535)/65536|0;try{y.grow(L),xe();var V=1;break e}catch{}V=void 0}if(V)return!0}return!1}var nn=()=>(ye("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),qs={},Dn=m=>{m.forEach(P=>{nn()})};function gi(){var m=Error().stack.toString().split(`
`);return m[0]=="Error"&&m.shift(),Dn(m),qs.Lb=nn(),qs.cc=m,qs.Lb}function Ln(m,P,A){if(m>>>=0,P>>>=0,qs.Lb==m)var L=qs.cc;else(L=Error().stack.toString().split(`
`))[0]=="Error"&&L.shift(),Dn(L);for(var V=3;L[V]&&nn()!=m;)++V;for(m=0;m<A&&L[m+V];++m)j()[P+4*m>>>2>>>0]=nn();return m}var on,zn={},Bn=()=>{if(!on){var m,P={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(m in zn)zn[m]===void 0?delete P[m]:P[m]=zn[m];var A=[];for(m in P)A.push(`${m}=${P[m]}`);on=A}return on};function ks(m,P){if(i)return je(19,1,m,P);m>>>=0,P>>>=0;var A=0;return Bn().forEach((L,V)=>{var ie=P+A;for(V=ae()[m+4*V>>>2>>>0]=ie,ie=0;ie<L.length;++ie)ue()[V++>>>0]=L.charCodeAt(ie);ue()[V>>>0]=0,A+=L.length+1}),0}function wo(m,P){if(i)return je(20,1,m,P);m>>>=0,P>>>=0;var A=Bn();ae()[m>>>2>>>0]=A.length;var L=0;return A.forEach(V=>L+=V.length+1),ae()[P>>>2>>>0]=L,0}function wi(m){return i?je(21,1,m):52}function Mo(m,P,A,L){return i?je(22,1,m,P,A,L):52}function Mi(m,P,A,L){return i?je(23,1,m,P,A,L):70}var bi=[null,[],[]];function Rn(m,P,A,L){if(i)return je(24,1,m,P,A,L);P>>>=0,A>>>=0,L>>>=0;for(var V=0,ie=0;ie<A;ie++){var Te=ae()[P>>>2>>>0],De=ae()[P+4>>>2>>>0];P+=8;for(var He=0;He<De;He++){var ot=B()[Te+He>>>0],wt=bi[m];ot===0||ot===10?((m===1?M:$)(Es(wt)),wt.length=0):wt.push(ot)}V+=De}return ae()[L>>>2>>>0]=V,0}i||function(){for(var m=s.numThreads-1;m--;)Zr();be.unshift(()=>{W++,function(P){i?P():Promise.all(Ze.map(Or)).then(P)}(()=>ke())})}();for(var bo=Array(256),an=0;256>an;++an)bo[an]=String.fromCharCode(an);Bt=bo,cr=s.BindingError=class extends Error{constructor(m){super(m),this.name="BindingError"}},s.InternalError=class extends Error{constructor(m){super(m),this.name="InternalError"}},sr.push(0,1,void 0,1,null,1,!0,1,!1,1),s.count_emval_handles=()=>sr.length/2-5-us.length;var ut,yi=[et,qe,Fs,Tt,Ps,N,J,ne,me,Se,tt,lt,Ge,Ct,$t,_r,Fn,lo,uo,ks,wo,wi,Mo,Mi,Rn];(async function(){function m(L,V){return ut=L.exports,ut=function(){var ie=ut,Te={};for(let[De,He]of Object.entries(ie))Te[De]=typeof He=="function"?(...ot)=>{rs.push(De);try{return He(...ot)}finally{te||(rs.pop(),Wt&&rr===1&&rs.length===0&&(rr=0,Ne+=1,Kt(Co),typeof Fibers<"u"&&Fibers.rc()))}}:He;return Te}(),ut=function(){var ie=ut,Te=He=>ot=>He(ot)>>>0,De=He=>()=>He()>>>0;return(ie=Object.assign({},ie)).Da=Te(ie.Da),ie.fb=De(ie.fb),ie.hb=Te(ie.hb),ie.tb=Te(ie.tb),ie.ub=De(ie.ub),ie.__cxa_get_exception_ptr=Te(ie.__cxa_get_exception_ptr),ie}(),It.push(ut.ib),T=V,ke(),ut}W++;var P=ge();if(s.instantiateWasm)return new Promise(L=>{s.instantiateWasm(P,(V,ie)=>{m(V,ie),L(V.exports)})});if(i)return new Promise(L=>{Fe=V=>{var ie=new WebAssembly.Instance(V,ge());L(m(ie,V))}});de??=s.locateFile?s.locateFile?s.locateFile("ort-wasm-simd-threaded.jsep.wasm",v):v+"ort-wasm-simd-threaded.jsep.wasm":new URL("/web-ai/transformerjs-demos/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href;try{var A=await async function(L){var V=de;if(!re&&typeof WebAssembly.instantiateStreaming=="function"&&!ce(V))try{var ie=fetch(V,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(ie,L)}catch(Te){$(`wasm streaming compile failed: ${Te}`),$("falling back to ArrayBuffer instantiation")}return async function(Te,De){try{var He=await async function(ot){if(!re)try{var wt=await d(ot);return new Uint8Array(wt)}catch{}if(ot==de&&re)ot=new Uint8Array(re);else{if(!u)throw"both async and sync fetching of the wasm failed";ot=u(ot)}return ot}(Te);return await WebAssembly.instantiate(He,De)}catch(ot){$(`failed to asynchronously prepare wasm: ${ot}`),ye(ot)}}(V,L)}(P);return m(A.instance,A.module)}catch(L){return t(L),Promise.reject(L)}})();var yo=m=>(yo=ut.Da)(m),ln=()=>(ln=ut.Ea)();s._OrtInit=(m,P)=>(s._OrtInit=ut.Fa)(m,P),s._OrtGetLastError=(m,P)=>(s._OrtGetLastError=ut.Ga)(m,P),s._OrtCreateSessionOptions=(m,P,A,L,V,ie,Te,De,He,ot)=>(s._OrtCreateSessionOptions=ut.Ha)(m,P,A,L,V,ie,Te,De,He,ot),s._OrtAppendExecutionProvider=(m,P,A,L,V)=>(s._OrtAppendExecutionProvider=ut.Ia)(m,P,A,L,V),s._OrtAddFreeDimensionOverride=(m,P,A)=>(s._OrtAddFreeDimensionOverride=ut.Ja)(m,P,A),s._OrtAddSessionConfigEntry=(m,P,A)=>(s._OrtAddSessionConfigEntry=ut.Ka)(m,P,A),s._OrtReleaseSessionOptions=m=>(s._OrtReleaseSessionOptions=ut.La)(m),s._OrtCreateSession=(m,P,A)=>(s._OrtCreateSession=ut.Ma)(m,P,A),s._OrtReleaseSession=m=>(s._OrtReleaseSession=ut.Na)(m),s._OrtGetInputOutputCount=(m,P,A)=>(s._OrtGetInputOutputCount=ut.Oa)(m,P,A),s._OrtGetInputOutputMetadata=(m,P,A,L)=>(s._OrtGetInputOutputMetadata=ut.Pa)(m,P,A,L),s._OrtFree=m=>(s._OrtFree=ut.Qa)(m),s._OrtCreateTensor=(m,P,A,L,V,ie)=>(s._OrtCreateTensor=ut.Ra)(m,P,A,L,V,ie),s._OrtGetTensorData=(m,P,A,L,V)=>(s._OrtGetTensorData=ut.Sa)(m,P,A,L,V),s._OrtReleaseTensor=m=>(s._OrtReleaseTensor=ut.Ta)(m),s._OrtCreateRunOptions=(m,P,A,L)=>(s._OrtCreateRunOptions=ut.Ua)(m,P,A,L),s._OrtAddRunConfigEntry=(m,P,A)=>(s._OrtAddRunConfigEntry=ut.Va)(m,P,A),s._OrtReleaseRunOptions=m=>(s._OrtReleaseRunOptions=ut.Wa)(m),s._OrtCreateBinding=m=>(s._OrtCreateBinding=ut.Xa)(m),s._OrtBindInput=(m,P,A)=>(s._OrtBindInput=ut.Ya)(m,P,A),s._OrtBindOutput=(m,P,A,L)=>(s._OrtBindOutput=ut.Za)(m,P,A,L),s._OrtClearBoundOutputs=m=>(s._OrtClearBoundOutputs=ut._a)(m),s._OrtReleaseBinding=m=>(s._OrtReleaseBinding=ut.$a)(m),s._OrtRunWithBinding=(m,P,A,L,V)=>(s._OrtRunWithBinding=ut.ab)(m,P,A,L,V),s._OrtRun=(m,P,A,L,V,ie,Te,De)=>(s._OrtRun=ut.bb)(m,P,A,L,V,ie,Te,De),s._OrtEndProfiling=m=>(s._OrtEndProfiling=ut.cb)(m),s._JsepOutput=(m,P,A)=>(s._JsepOutput=ut.db)(m,P,A),s._JsepGetNodeName=m=>(s._JsepGetNodeName=ut.eb)(m);var cn=()=>(cn=ut.fb)(),Qr=s._free=m=>(Qr=s._free=ut.gb)(m),un=s._malloc=m=>(un=s._malloc=ut.hb)(m),dn=(m,P,A,L,V,ie)=>(dn=ut.kb)(m,P,A,L,V,ie),vo=()=>(vo=ut.lb)(),xo=(m,P,A,L,V)=>(xo=ut.mb)(m,P,A,L,V),jn=m=>(jn=ut.nb)(m),Nn=m=>(Nn=ut.ob)(m),To=(m,P)=>(To=ut.pb)(m,P),Vn=()=>(Vn=ut.qb)(),Eo=(m,P)=>(Eo=ut.rb)(m,P),pn=m=>(pn=ut.sb)(m),mn=m=>(mn=ut.tb)(m),Un=()=>(Un=ut.ub)(),Po=s.dynCall_ii=(m,P)=>(Po=s.dynCall_ii=ut.vb)(m,P),Wn=m=>(Wn=ut.wb)(m),Co=()=>(Co=ut.xb)(),So=m=>(So=ut.yb)(m),Gn=()=>(Gn=ut.zb)();return s.stackSave=()=>Un(),s.stackRestore=m=>pn(m),s.stackAlloc=m=>mn(m),s.setValue=function(m,P,A="i8"){switch(A.endsWith("*")&&(A="*"),A){case"i1":case"i8":ue()[m>>>0]=P;break;case"i16":F()[m>>>1>>>0]=P;break;case"i32":j()[m>>>2>>>0]=P;break;case"i64":Z[m>>>3]=BigInt(P);break;case"float":Ae()[m>>>2>>>0]=P;break;case"double":ve()[m>>>3>>>0]=P;break;case"*":ae()[m>>>2>>>0]=P;break;default:ye(`invalid type for setValue: ${A}`)}},s.getValue=function(m,P="i8"){switch(P.endsWith("*")&&(P="*"),P){case"i1":case"i8":return ue()[m>>>0];case"i16":return F()[m>>>1>>>0];case"i32":return j()[m>>>2>>>0];case"i64":return Z[m>>>3];case"float":return Ae()[m>>>2>>>0];case"double":return ve()[m>>>3>>>0];case"*":return ae()[m>>>2>>>0];default:ye(`invalid type for getValue: ${P}`)}},s.UTF8ToString=Ut,s.stringToUTF8=X,s.lengthBytesUTF8=C,function m(){if(0<W)fe=m;else if(i)r(s),q();else{for(;0<be.length;)be.shift()(s);0<W?fe=m:(s.calledRun=!0,te||(q(),r(s)))}}(),s.PTR_SIZE=4,n}),vM=jl,w_=globalThis.self?.name?.startsWith("em-pthread"),w_&&jl()}),Nl,Lc,M_,Xr,xM,Ui,b_,y_,Vl,v_,Ul,TM,Wl,EM,su=Be(()=>{ru(),Nl=typeof location>"u"?void 0:location.origin,Lc=import.meta.url>"file:"&&import.meta.url<"file;",M_=()=>{{if(Lc){let e=URL;return new URL(new e("ort.bundle.min.mjs",import.meta.url).href,Nl).href}return import.meta.url}},Xr=M_(),xM=()=>{if(Xr&&!Xr.startsWith("blob:"))return Xr.substring(0,Xr.lastIndexOf("/")+1)},Ui=(e,r)=>{try{let t=r??Xr;return(t?new URL(e,t):new URL(e)).origin===Nl}catch{return!1}},b_=(e,r)=>{let t=r??Xr;try{return(t?new URL(e,t):new URL(e)).href}catch{return}},y_=(e,r)=>`${r??"./"}${e}`,Vl=async e=>{let r=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(r)},v_=async e=>(await import(e)).default,Ul=(gx(),Qo(MM)).default,TM=async()=>{if(!Xr)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Ui(Xr))return[void 0,Ul()];let e=await Vl(Xr);return[e,Ul(e)]},Wl=(wx(),Qo(yM)).default,EM=async(e,r,t)=>{if(!e&&!r&&Wl&&Xr&&Ui(Xr))return[void 0,Wl];{let s="ort-wasm-simd-threaded.jsep.mjs",n=e??b_(s,r),o=t&&n&&!Ui(n,r),a=o?await Vl(n):n??y_(s,r);return[o?a:void 0,await v_(a)]}}}),Gl,Wi,Fo,Kl,x_,T_,E_,nu,qt,$n=Be(()=>{su(),Wi=!1,Fo=!1,Kl=!1,x_=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},T_=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},E_=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},nu=async e=>{if(Wi)return Promise.resolve();if(Fo)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Kl)throw new Error("previous call to 'initializeWebAssembly()' failed.");Fo=!0;let r=e.initTimeout,t=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!E_())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!T_())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let s=x_();t>1&&!s&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=t=1);let n=e.wasmPaths,o=typeof n=="string"?n:void 0,a=n?.mjs,i=a?.href??a,l=n?.wasm,c=l?.href??l,p=e.wasmBinary,[d,u]=await EM(i,o,t>1),f=!1,_=[];if(r>0&&_.push(new Promise(v=>{setTimeout(()=>{f=!0,v()},r)})),_.push(new Promise((v,I)=>{let b={numThreads:t};if(p)b.wasmBinary=p;else if(c||o)b.locateFile=M=>c??o+M;else if(i&&i.indexOf("blob:")!==0)b.locateFile=M=>new URL(M,i).href;else if(d){let M=xM();M&&(b.locateFile=$=>M+$)}u(b).then(M=>{Fo=!1,Wi=!0,Gl=M,v(),d&&URL.revokeObjectURL(d)},M=>{Fo=!1,Kl=!0,I(M)})})),await Promise.race(_),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${r}ms`)},qt=()=>{if(Wi&&Gl)return Gl;throw new Error("WebAssembly is not initialized yet.")}}),bs,ia,Vt,ou=Be(()=>{$n(),bs=(e,r)=>{let t=qt(),s=t.lengthBytesUTF8(e)+1,n=t._malloc(s);return t.stringToUTF8(e,n,s),r.push(n),n},ia=(e,r,t,s)=>{if(typeof e=="object"&&e!==null){if(t.has(e))throw new Error("Circular reference in options");t.add(e)}Object.entries(e).forEach(([n,o])=>{let a=r?r+n:n;if(typeof o=="object")ia(o,a+".",t,s);else if(typeof o=="string"||typeof o=="number")s(a,o.toString());else if(typeof o=="boolean")s(a,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},Vt=e=>{let r=qt(),t=r.stackSave();try{let s=r.PTR_SIZE,n=r.stackAlloc(2*s);r._OrtGetLastError(n,n+s);let o=Number(r.getValue(n,s===4?"i32":"i64")),a=r.getValue(n+s,"*"),i=a?r.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${o}, ERROR_MESSAGE: ${i}`)}finally{r.stackRestore(t)}}}),PM,Mx=Be(()=>{$n(),ou(),PM=e=>{let r=qt(),t=0,s=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=bs(e.tag,s)),t=r._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),t===0&&Vt("Can't create run options."),e?.extra!==void 0&&ia(e.extra,"",new WeakSet,(a,i)=>{let l=bs(a,s),c=bs(i,s);r._OrtAddRunConfigEntry(t,l,c)!==0&&Vt(`Can't set a run config entry: ${a} - ${i}.`)}),[t,s]}catch(o){throw t!==0&&r._OrtReleaseRunOptions(t),s.forEach(a=>r._free(a)),o}}}),P_,C_,S_,Oo,$_,CM,bx=Be(()=>{$n(),ou(),P_=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},C_=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},S_=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let r=e.extra.session;r.use_ort_model_bytes_directly||(r.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(t=>(typeof t=="string"?t:t.name)==="webgpu")&&(e.enableMemPattern=!1)},Oo=(e,r,t,s)=>{let n=bs(r,s),o=bs(t,s);qt()._OrtAddSessionConfigEntry(e,n,o)!==0&&Vt(`Can't set a session config entry: ${r} - ${t}.`)},$_=async(e,r,t)=>{for(let s of r){let n=typeof s=="string"?s:s.name,o=[];switch(n){case"webnn":if(n="WEBNN",typeof s!="string"){let p=s?.deviceType;p&&Oo(e,"deviceType",p,t)}break;case"webgpu":if(n="JS",typeof s!="string"){let p=s;if(p?.preferredLayout){if(p.preferredLayout!=="NCHW"&&p.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${p.preferredLayout}`);Oo(e,"preferredLayout",p.preferredLayout,t)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let a=bs(n,t),i=o.length,l=0,c=0;if(i>0){l=qt()._malloc(i*qt().PTR_SIZE),t.push(l),c=qt()._malloc(i*qt().PTR_SIZE),t.push(c);for(let p=0;p<i;p++)qt().setValue(l+p*qt().PTR_SIZE,o[p][0],"*"),qt().setValue(c+p*qt().PTR_SIZE,o[p][1],"*")}await qt()._OrtAppendExecutionProvider(e,a,l,c,i)!==0&&Vt(`Can't append execution provider: ${n}.`)}},CM=async e=>{let r=qt(),t=0,s=[],n=e||{};S_(n);try{let o=P_(n.graphOptimizationLevel??"all"),a=C_(n.executionMode??"sequential"),i=typeof n.logId=="string"?bs(n.logId,s):0,l=n.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let p=typeof n.optimizedModelFilePath=="string"?bs(n.optimizedModelFilePath,s):0;if(t=r._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,a,!!n.enableProfiling,0,i,l,c,p),t===0&&Vt("Can't create session options."),n.executionProviders&&await $_(t,n.executionProviders,s),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);Oo(t,"enableGraphCapture",n.enableGraphCapture.toString(),s)}if(n.freeDimensionOverrides)for(let[d,u]of Object.entries(n.freeDimensionOverrides)){if(typeof d!="string")throw new Error(`free dimension override name must be a string: ${d}`);if(typeof u!="number"||!Number.isInteger(u)||u<0)throw new Error(`free dimension override value must be a non-negative integer: ${u}`);let f=bs(d,s);r._OrtAddFreeDimensionOverride(t,f,u)!==0&&Vt(`Can't set a free dimension override: ${d} - ${u}.`)}return n.extra!==void 0&&ia(n.extra,"",new WeakSet,(d,u)=>{Oo(t,d,u,s)}),[t,s]}catch(o){throw t!==0&&r._OrtReleaseSessionOptions(t)!==0&&Vt("Can't release session options."),s.forEach(a=>r._free(a)),o}}}),Zn,js,Tn,iu,aa,au,lu,zc,ft=Be(()=>{Zn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},js=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Tn=(e,r)=>{let t=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],s=typeof r=="number"?r:r.reduce((n,o)=>n*o,1);return t>0?Math.ceil(s*t):void 0},iu=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},aa=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},au=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",lu=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",zc=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),cu,SM=Be(()=>{ru(),cu=async e=>{if(typeof e=="string"){let r=await fetch(e);if(!r.ok)throw new Error(`failed to load external data file: ${e}`);let t=r.headers.get("Content-Length"),s=t?parseInt(t,10):0;if(s<1073741824)return new Uint8Array(await r.arrayBuffer());{if(!r.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=r.body.getReader(),o;try{o=new ArrayBuffer(s)}catch(i){if(i instanceof RangeError){let l=Math.ceil(s/65536);o=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw i}let a=0;for(;;){let{done:i,value:l}=await n.read();if(i)break;let c=l.byteLength;new Uint8Array(o,a,c).set(l),a+=c}return new Uint8Array(o,0,s)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),k_,I_,A_,F_,uu,O_,Ft,Ns=Be(()=>{ft(),k_=["V","I","W","E","F"],I_=(e,r)=>{console.log(`[${k_[e]},${new Date().toISOString()}]${r}`)},uu=(e,r)=>{A_=e,F_=r},O_=(e,r)=>{let t=aa(e),s=aa(A_);t>=s&&I_(t,typeof r=="function"?r():r)},Ft=(...e)=>{F_&&O_(...e)}}),D_,ro,Me,la,$M,kM,IM,yt=Be(()=>{D_=class{static calcMatMulShape(e,r){return e[1]!==r[0]?void 0:[e[0],r[1]]}},ro=class{static calcShape(e,r,t=!1){let s=e.length,n=r.length;if(s===0)return r;if(n===0)return e;let o=Math.max(e.length,r.length),a=new Array(o);if(t){if(s<2||n<2)return;let i=D_.calcMatMulShape([e[s-2],e[s-1]],[r[n-2],r[n-1]]);if(i===void 0)return;[a[o-2],a[o-1]]=i}for(let i=t?3:1;i<=o;i++){let l=s-i<0?1:e[s-i],c=n-i<0?1:r[n-i];if(l!==c&&l>1&&c>1)return;let p=Math.max(l,c);if(l&&c)a[o-i]=Math.max(l,c);else{if(p>1)return;a[o-i]=0}}return a}static isValidBroadcast(e,r){let t=e.length,s=r.length;if(t>s)return!1;for(let n=1;n<=t;n++)if(e[t-n]!==1&&e[t-n]!==r[s-n])return!1;return!0}},Me=class na{static size(r){return na.getSizeFromDimensionRange(r,0,r.length)}static convertShape(r,t=4){let s=r.length;if(s===0)return[];let n=new Array(s),o=s-1;for(;o>=0;){if(r[o]%t===0){n[o]=r[o]/t;break}if(t%r[o]!==0)throw new Error("cannot convert shape");n[o]=1,t/=r[o],o--}for(o--;o>=0;o--)n[o]=r[o];return n}static sizeFromDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${r.length} dimensions.`);return na.getSizeFromDimensionRange(r,t,r.length)}static sizeToDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${r.length} dimensions.`);return na.getSizeFromDimensionRange(r,0,t)}static getSizeFromDimensionRange(r,t,s){let n=1;for(let o=t;o<s;o++){if(r[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=Number(r[o])}return n}static computeStrides(r){let t=r.length;if(t===0)return[];if(t===1)return[1];let s=new Array(t);s[t-1]=1,s[t-2]=r[t-1];for(let n=t-3;n>=0;--n)s[n]=s[n+1]*r[n+1];return s}static normalizeAxis(r,t){if(r<-t&&r>=t)throw new Error("unsupported axis for this operation.");return r<0?r+t:r}static normalizeAxes(r,t){return r.map(s=>this.normalizeAxis(s,t??r.length))}static sortBasedOnPerm(r,t){return t?t.map(s=>r[s]):r.slice().reverse()}static padShape(r,t){let s=r.length;return r.map((n,o)=>n+t[o]+t[o+s])}static areEqual(r,t){return r.length!==t.length?!1:r.every((s,n)=>s===t[n])}},la=class Go{static adjustPoolAttributes(r,t,s,n,o,a){if(!r&&s.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(r)for(let i=0;i<t.length-2;i++)i>=s.length?s.push(t[i+2]):s[i]=t[i+2];for(let i=0;i<s.length;i++)if(i<n.length){if(n[i]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let i=0;i<s.length;i++)if(i<o.length){if(o[i]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let i=0;i<s.length*2;i++)if(i<a.length){if(a[i]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let i=0;i<s.length;i++){if(s[i]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[i]>=s[i]||a[i+s.length]>=s[i])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(r,t,s,n,o,a,i){if(i){if(o.length!==2*(r.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==r.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==r.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<r.length-2;l++)Go.adjustPadAndReturnShape(r[l+(a?1:2)],t[l],s[l],n[l],o,l,l+r.length-2,i)}}static computePoolOutputShape(r,t,s,n,o,a,i){if(t.length<=0)throw new Error("input shape must be of size greater than 0");let l=[t[0],t[1]];return Go.computeShapeHelper(r,t,l,s,n,o,a,i),l}static computeConvOutputShape(r,t,s,n,o,a,i){if(r.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[r[0],t[0]];return Go.computeShapeHelper(!1,r,l,s,n,o,a,i),l}static computeShapeHelper(r,t,s,n,o,a,i,l){if(r)for(let c=0;c<t.length-2;c++)s.push(1);else for(let c=0;c<t.length-2;c++)s.push(Go.adjustPadAndReturnShape(t[c+2],n[c],o[c],a[c],i,c,c+t.length-2,l))}static adjustPadAndReturnShape(r,t,s,n,o,a,i,l){let c=s*(n-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return o[a]=0,o[i]=0,Math.floor((r-c)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(s!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let p=((r+t-1)/t-1)*t+n-r;return o[a]=Math.floor(l==="SAME_LOWER"?(p+1)/2:p/2),o[i]=p-o[a],Math.floor((r+p-n)/t+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((r+o[a]+o[i]-c)/t+1)}},$M=class{static getShapeOfGemmResult(e,r,t,s,n){if(e.length!==2||t.length!==2)throw new Error("shape need to be of size 2");let o,a,i;r?(o=e[1],a=e[0]):(o=e[0],a=e[1]);let l=-1;if(s?(i=t[0],l=1):(i=t[1],l=0),t[l]!==a)throw new Error("dimension mismatch");if(o<=0||i<=0||a<=0)throw new Error("invalid shape specified");if(n&&!ro.isValidBroadcast(n,[o,i]))throw new Error("gemm: invalid bias shape for broadcast");return[o,i,a]}},kM=-34028234663852886e22,IM=34028234663852886e22}),du,AM=Be(()=>{ft(),du=(e,r)=>new(iu(r))(e)}),Bc,Hl,L_,ql,z_,Ql,Xl,Jl,B_,FM,yx=Be(()=>{Ns(),Bc=(e,r=!0)=>{if(e.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let t=e.byteLength/8,s=new BigInt64Array(e.buffer,e.byteOffset,t),n=new Int32Array(t);for(let o=0;o<t;o++){let a=s[o];if(a>2147483647n||a<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${o}: ${a}`);n[o]=Number(a)}return r?new Uint8Array(n.buffer):n},Hl=(e,r=!0)=>{if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let t=e.byteLength/4,s=new Int32Array(e.buffer,e.byteOffset,t),n=BigInt64Array.from(s,BigInt);return r?new Uint8Array(n.buffer):n},L_=1,ql=()=>L_++,z_=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Ql=(e,r)=>{let t=z_.get(e);if(!t)throw new Error("Unsupported data type.");return r.length>0?Math.ceil(r.reduce((s,n)=>s*n)*t/8):0},Xl=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:r,context:t,tensor:s,dataType:n,shape:o,shouldConvertInt64toInt32:a=!1}=e;this.sessionId=r,this.mlContext=t,this.mlTensor=s,this.dataType=n,this.tensorShape=o,this.shouldConvertInt64toInt32=a}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Ql(this.dataType,this.tensorShape)}destroy(){Ft("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,r){if(e){let t=await this.mlContext.readTensor(this.mlTensor),s=Hl(new Uint8Array(t));if(r){(r instanceof ArrayBuffer?new Uint8Array(r):new Uint8Array(r.buffer,r.byteOffset,r.byteLength)).set(s);return}else return s.buffer}else return r?this.mlContext.readTensor(this.mlTensor,r):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,r,t){return this.mlContext===e&&this.dataType===r&&this.tensorShape.length===t.length&&this.tensorShape.every((s,n)=>s===t[n])}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},Jl=class{constructor(e,r){this.tensorManager=e,this.wrapper=r}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,r,t,s){let n=r,o=this.tensorManager.getMLContext(e),a=n==="int64"&&!o.opSupportLimits().input.dataTypes.includes("int64");if(a&&(n="int32",Ft("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(o,n,t))return this.wrapper.tensor;if(s){if(this.wrapper.byteLength!==Ql(n,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let i=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,n,t,i,!0,!0,a),s&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let r=e;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(r=Bc(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),r.byteLength===this.wrapper.byteLength){this.wrapper.write(r);return}else Ft("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(r):this.activeUpload=new Uint8Array(r)}async download(e){if(this.activeUpload){let r=this.wrapper?.isInt64ToInt32Converted?Hl(this.activeUpload):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(r):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(r);return}else return r.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32,e):this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32)}},B_=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let r=this.backend.getMLContext(e);if(!r)throw new Error("MLContext not found for session.");return r}reserveTensorId(){let e=ql();return this.tensorTrackersById.set(e,new Jl(this)),e}releaseTensorId(e){let r=this.tensorTrackersById.get(e);r&&(this.tensorTrackersById.delete(e),r.tensorWrapper&&this.releaseTensor(r.tensorWrapper))}async ensureTensor(e,r,t,s,n){Ft("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${r}, dataType: ${t}, shape: ${s}, copyOld: ${n}}`);let o=this.tensorTrackersById.get(r);if(!o)throw new Error("Tensor not found.");return o.ensureTensor(e,t,s,n)}upload(e,r){let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");t.upload(r)}async download(e,r){Ft("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${r?.byteLength}}`);let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");return t.download(r)}releaseTensorsForSession(e){for(let r of this.freeTensors)r.sessionId===e&&r.destroy();this.freeTensors=this.freeTensors.filter(r=>r.sessionId!==e)}registerTensor(e,r,t,s){let n=this.getMLContext(e),o=ql(),a=new Xl({sessionId:e,context:n,tensor:r,dataType:t,shape:s});return this.tensorTrackersById.set(o,new Jl(this,a)),this.externalTensors.add(a),o}async getCachedTensor(e,r,t,s,n,o,a=!1){let i=this.getMLContext(e);for(let[c,p]of this.freeTensors.entries())if(p.canReuseTensor(i,r,t)){Ft("verbose",()=>`[WebNN] Reusing tensor {dataType: ${r}, shape: ${t}}`);let d=this.freeTensors.splice(c,1)[0];return d.sessionId=e,d}Ft("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${r}, shape: ${t}}`);let l=await i.createTensor({dataType:r,shape:t,dimensions:t,usage:s,writable:n,readable:o});return new Xl({sessionId:e,context:i,tensor:l,dataType:r,shape:t,shouldConvertInt64toInt32:a})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},FM=(...e)=>new B_(...e)}),Gi,R_,OM,vx=Be(()=>{ft(),$n(),AM(),yx(),Ns(),Gi=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),R_=(e,r)=>{if(e===r)return!0;if(e===void 0||r===void 0)return!1;let t=Object.keys(e).sort(),s=Object.keys(r).sort();return t.length===s.length&&t.every((n,o)=>n===s[o]&&e[n]===r[n])},OM=class{constructor(e){this.tensorManager=FM(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,uu(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){Ft("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){Ft("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let r=this.temporarySessionTensorIds.get(e);if(r){for(let t of r)Ft("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${t}}`),this.tensorManager.releaseTensorId(t);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let t=this.mlContextCache.findIndex(s=>s.gpuDevice===e);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:s}),s}}else if(e===void 0){let t=this.mlContextCache.findIndex(s=>s.options===void 0&&s.gpuDevice===void 0);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:s}),s}}let r=this.mlContextCache.findIndex(t=>R_(t.options,e));if(r!==-1)return this.mlContextCache[r].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:t}),t}}registerMLContext(e,r){this.mlContextBySessionId.set(e,r);let t=this.sessionIdsByMLContext.get(r);t||(t=new Set,this.sessionIdsByMLContext.set(r,t)),t.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let r=this.mlContextBySessionId.get(e);if(!r)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let t=this.sessionIdsByMLContext.get(r);if(t.delete(e),t.size===0){this.sessionIdsByMLContext.delete(r);let s=this.mlContextCache.findIndex(n=>n.mlContext===r);s!==-1&&this.mlContextCache.splice(s,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){Ft("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,r,t,s,n){let o=Gi.get(t);if(!o)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,r,o,s,n)}async createTemporaryTensor(e,r,t){Ft("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${r}, shape: ${t}}`);let s=Gi.get(r);if(!s)throw new Error(`Unsupported ONNX data type: ${r}`);let n=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,n,s,t,!1);let o=this.temporarySessionTensorIds.get(e);return o?o.push(n):this.temporarySessionTensorIds.set(e,[n]),n}uploadTensor(e,r){if(!qt().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Ft("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${r.byteLength}}`),this.tensorManager.upload(e,r)}async downloadTensor(e,r){return this.tensorManager.download(e,r)}createMLTensorDownloader(e,r){return async()=>{let t=await this.tensorManager.download(e);return du(t,r)}}registerMLTensor(e,r,t,s){let n=Gi.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let o=this.tensorManager.registerTensor(e,r,n,s);return Ft("verbose",()=>`[WebNN] registerMLTensor {tensor: ${r}, dataType: ${n}, dimensions: ${s}} -> {tensorId: ${o}}`),o}registerMLConstant(e,r,t,s,n,o,a=!1){if(!o)throw new Error("External mounted files are not available.");let i=e;e.startsWith("./")&&(i=e.substring(2));let l=o.get(i);if(!l)throw new Error(`File with name ${i} not found in preloaded files.`);if(r+t>l.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let c=l.slice(r,r+t).buffer,p;switch(n.dataType){case"float32":p=new Float32Array(c);break;case"float16":p=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(c):new Uint16Array(c);break;case"int32":p=new Int32Array(c);break;case"uint32":p=new Uint32Array(c);break;case"int64":a?(p=Bc(new Uint8Array(c),!1),n.dataType="int32"):p=new BigInt64Array(c);break;case"uint64":p=new BigUint64Array(c);break;case"int8":p=new Int8Array(c);break;case"int4":case"uint4":case"uint8":p=new Uint8Array(c);break;default:throw new Error(`Unsupported data type: ${n.dataType} in creating WebNN Constant from external data.`)}return Ft("verbose",()=>`[WebNN] registerMLConstant {dataType: ${n.dataType}, shape: ${n.shape}}} ${a?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),s.constant(n,p)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,r){let t=this.sessionGraphInputs.get(e);return t?t.includes(r):!1}isInt64Supported(e){return!!this.mlContextBySessionId.get(e)?.opSupportLimits().input.dataTypes.includes("int64")}flush(){}}}),pu=Be(()=>{}),Yl,Ki,Hi,j_,N_,Zl,Rc,V_,DM,xx=Be(()=>{Ns(),pu(),Yl=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Ki=[],Hi=e=>Math.ceil(Number(e)/16)*16,j_=e=>{for(let r=0;r<Ki.length;r++){let t=Ki[r];if(e<=t)return t}return Math.ceil(e/16)*16},N_=1,Zl=()=>N_++,Rc=async(e,r,t,s)=>{let n=Hi(t),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(r,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let i=o.getMappedRange();if(s){let l=s();return l.set(new Uint8Array(i,0,t)),l}else return new Uint8Array(i.slice(0,t))}finally{o.destroy()}},V_=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[r]of Yl)Ki.push(r),this.freeBuffers.set(r,[]),this.freeUniformBuffers.set(r,[]);this.sessionCount=0}upload(e,r){let t=r.buffer,s=r.byteOffset,n=r.byteLength,o=Hi(n),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==n)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${n}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=i.getMappedRange();new Uint8Array(l).set(new Uint8Array(t,s,n)),i.unmap();let c=this.backend.device.createCommandEncoder();c.copyBufferToBuffer(i,0,a.gpuData.buffer,0,o),this.backend.device.queue.submit([c.finish()]),i.destroy(),Ft("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,r){let t=this.storageCache.get(e);if(!t)throw new Error("source gpu data for memcpy does not exist");let s=this.storageCache.get(r);if(!s)throw new Error("destination gpu data for memcpy does not exist");if(t.originalSize!==s.originalSize)throw new Error("inconsistent source and destination gpu data size");let n=Hi(t.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(t.gpuData.buffer,0,s.gpuData.buffer,0,n)}registerExternalBuffer(e,r,t){let s;if(t){if(s=t[0],e===t[1])return Ft("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, buffer is the same, skip.`),s;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else s=Zl();return this.storageCache.set(s,{gpuData:{id:s,type:0,buffer:e},originalSize:r}),Ft("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, registered.`),s}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),Ft("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let t=j_(e),s,n=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,o=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(n||o){let i=(n?this.freeBuffers:this.freeUniformBuffers).get(t);i?i.length>0?s=i.pop():s=this.backend.device.createBuffer({size:t,usage:r}):s=this.backend.device.createBuffer({size:t,usage:r})}else s=this.backend.device.createBuffer({size:t,usage:r});let a={id:Zl(),type:0,buffer:s};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),Ft("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){return this.storageCache.get(e)?.gpuData}release(e){let r=typeof e=="bigint"?Number(e):e,t=this.storageCache.get(r);if(!t){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Ft("verbose",()=>`[WebGPU] GpuDataManager.release(id=${r}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(r),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,r){let t=this.storageCache.get(Number(e));if(!t)throw new Error("data does not exist");await Rc(this.backend,t.gpuData.buffer,t.originalSize,r)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let r=Yl.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let t=this.freeBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let t=this.freeUniformBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let r of this.buffersPending)e.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let r=this.capturedPendingBuffers.get(e);r&&(r.forEach(t=>{t.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(Ft("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map)}},DM=(...e)=>new V_(...e)}),U_,zt,lr=Be(()=>{U_=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},zt=e=>new U_(e)}),so,qi,$r,jr,ct,ir,jc,to,en,at,Do,Pe,it,LM,mu,W_,zM,xt=Be(()=>{ft(),yt(),so=64,qi=(e,r)=>{if(r===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return r>1?`vec${r}<f16>`:"f16";case 1:return r>1?`vec${r}<f32>`:"f32";case 6:return r>1?`vec${r}<i32>`:"i32";case 12:return r>1?`vec${r}<u32>`:"u32";case 7:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(r!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},$r=(e,r=1)=>{let t=qi(e,r);return typeof t=="string"?t:t[0]},jr=(e,r=1)=>{let t=qi(e,r);return typeof t=="string"?t:t[1]},ct=(...e)=>{let r=[];return e.forEach(t=>{t.length!==0&&r.push({type:12,data:t},{type:12,data:Me.computeStrides(t)})}),r},ir=e=>e%4===0?4:e%2===0?2:1,jc=(e="f32",r,t="0")=>!r||r===1?`${e}(${t})`:`vec${r}<${e}>(${t})`,to=(e,r,t)=>e==="f32"?t:r===1?`f32(${t})`:`vec${r}<f32>(${t})`,en=(e,r)=>r===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:r===2?`(${e}.x + ${e}.y)`:r===3?`(${e}.x + ${e}.y + ${e}.z)`:e,at=(e,r,t,s)=>e.startsWith("uniforms.")&&t>4?typeof r=="string"?s==="f16"?`${e}[(${r}) / 8][(${r}) % 8 / 4][(${r}) % 8 % 4]`:`${e}[(${r}) / 4][(${r}) % 4]`:s==="f16"?`${e}[${Math.floor(r/8)}][${Math.floor(r%8/4)}][${r%8%4}]`:`${e}[${Math.floor(r/4)}][${r%4}]`:t>1?`${e}[${r}]`:e,Do=(e,r,t,s,n)=>{let o=typeof t=="number",a=o?t:t.length,i=[...new Array(a).keys()],l=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,c=qi(r,n),p=typeof c=="string"?c:c[1],d=typeof c=="string"?c:c[0],u={indices:l,value:p,storage:d,tensor:r},f=B=>typeof B=="string"?B:`${B}u`,_={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},v=o?"uniforms.":"",I=`${v}${e}_shape`,b=`${v}${e}_strides`,M="";for(let B=0;B<a-1;B++)M+=`
    let dim${B} = current / ${at(b,B,a)};
    let rest${B} = current % ${at(b,B,a)};
    indices[${B}] = dim${B};
    current = rest${B};
    `;M+=`indices[${a-1}] = current;`;let $=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${u.indices} {
    var indices: ${u.indices};
    var current = offset;
    ${M}
    return indices;
  }`,y=B=>(_.offsetToIndices=!0,a<2?B:`o2i_${e}(${B})`),T=[];if(a>=2)for(let B=a-1;B>=0;B--)T.push(`${at(b,B,a)} * (indices[${B}])`);let E=a<2?"":`
  fn i2o_${e}(indices: ${u.indices}) -> u32 {
    return ${T.join("+")};
  }`,x=B=>(_.indicesToOffset=!0,a<2?B:`i2o_${e}(${B})`),S=(...B)=>a===0?"0u":`${u.indices}(${B.map(f).join(",")})`,z=(B,F)=>a<2?`${B}`:`${at(B,F,a)}`,O=(B,F,G)=>a<2?`${B}=${G};`:`${at(B,F,a)}=${G};`,K={},H=(B,F)=>{_.broadcastedIndicesToOffset=!0;let G=`${F.name}broadcastedIndicesTo${e}Offset`;if(G in K)return`${G}(${B})`;let j=[];for(let ae=a-1;ae>=0;ae--){let Ae=F.indicesGet("outputIndices",ae+F.rank-a);j.push(`${z(b,ae)} * (${Ae} % ${z(I,ae)})`)}return K[G]=`fn ${G}(outputIndices: ${F.type.indices}) -> u32 {
             return ${j.length>0?j.join("+"):"0u"};
           }`,`${G}(${B})`},D=(B,F)=>(()=>{if(u.storage===u.value)return`${e}[${B}]=${F};`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`${e}[${B}]=vec2<u32>(u32(${F}), select(0u, 0xFFFFFFFFu, ${F} < 0));`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`${e}[${B}]=vec2<u32>(u32(${F}), 0u);`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`${e}[${B}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${F}));`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Z=B=>(()=>{if(u.storage===u.value)return`${e}[${B}]`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`i32(${e}[${B}].x)`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`u32(${e}[${B}].x)`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${B}] & 0xFFu), bool(${e}[${B}] & 0xFF00u), bool(${e}[${B}] & 0xFF0000u), bool(${e}[${B}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Q=a<2?"":`
  fn get_${e}ByIndices(indices: ${u.indices}) -> ${p} {
    return ${Z(`i2o_${e}(indices)`)};
  }`,Y=a<2?"":(()=>{let B=i.map(G=>`d${G}: u32`).join(", "),F=i.map(G=>`d${G}`).join(", ");return`
  fn get_${e}(${B}) -> ${p} {
    return get_${e}ByIndices(${S(F)});
  }`})(),re=(...B)=>{if(B.length!==a)throw new Error(`indices length must be ${a}`);let F=B.map(f).join(",");return a===0?Z("0u"):a===1?Z(F[0]):(_.get=!0,_.getByIndices=!0,_.indicesToOffset=!0,`get_${e}(${F})`)},te=B=>a<2?Z(B):(_.getByIndices=!0,_.indicesToOffset=!0,`get_${e}ByIndices(${B})`),ce=a<2?"":`
  fn set_${e}ByIndices(indices: ${u.indices}, value: ${p}) {
    ${D(`i2o_${e}(indices)`,"value")}
  }`,ue=a<2?"":(()=>{let B=i.map(G=>`d${G}: u32`).join(", "),F=i.map(G=>`d${G}`).join(", ");return`
  fn set_${e}(${B}, value: ${p}) {
    set_${e}ByIndices(${S(F)}, value);
  }`})();return{impl:()=>{let B=[],F=!1;return _.offsetToIndices&&(B.push($),F=!0),_.indicesToOffset&&(B.push(E),F=!0),_.broadcastedIndicesToOffset&&(Object.values(K).forEach(G=>B.push(G)),F=!0),_.set&&(B.push(ue),F=!0),_.setByIndices&&(B.push(ce),F=!0),_.get&&(B.push(Y),F=!0),_.getByIndices&&(B.push(Q),F=!0),!o&&F&&B.unshift(`const ${I} = ${u.indices}(${t.join(",")});`,`const ${b} = ${u.indices}(${Me.computeStrides(t).join(",")});`),B.join(`
`)},type:u,offsetToIndices:y,indicesToOffset:x,broadcastedIndicesToOffset:H,indices:S,indicesGet:z,indicesSet:O,set:(...B)=>{if(B.length!==a+1)throw new Error(`indices length must be ${a}`);let F=B[a];if(typeof F!="string")throw new Error("value must be string");let G=B.slice(0,a).map(f).join(",");return a===0?D("0u",F):a===1?D(G[0],F):(_.set=!0,_.setByIndices=!0,_.indicesToOffset=!0,`set_${e}(${G}, ${F})`)},setByOffset:D,setByIndices:(B,F)=>a<2?D(B,F):(_.setByIndices=!0,_.indicesToOffset=!0,`set_${e}ByIndices(${B}, ${F});`),get:re,getByOffset:Z,getByIndices:te,usage:s,name:e,strides:b,shape:I,rank:a}},Pe=(e,r,t,s=1)=>Do(e,r,t,"input",s),it=(e,r,t,s=1)=>Do(e,r,t,"output",s),LM=(e,r,t)=>Do(e,r,t,"atomicOutput",1),mu=(e,r,t,s=1)=>Do(e,r,t,"internal",s),W_=class{constructor(e,r){this.normalizedDispatchGroup=e,this.limits=r,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=so){let r=typeof e=="number"?e:e[0],t=typeof e=="number"?1:e[1],s=typeof e=="number"?1:e[2];if(r>this.limits.maxComputeWorkgroupSizeX||t>this.limits.maxComputeWorkgroupSizeY||s>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*t*s>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let n=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,o=n?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=n?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${r*t*s}u + local_idx;`;return`@compute @workgroup_size(${r}, ${t}, ${s})
  fn main(${o}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,r){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let t=e.usage==="input"?"read":"read_write",s=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${r}) var<storage, ${t}> ${e.name}: array<${s}>;`}declareVariables(...e){return e.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(e,r,t=1){return this.uniforms.push({name:e,type:r,length:t}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:r,type:t,length:s}of this.uniforms)if(s&&s>4)t==="f16"?e.push(`@align(16) ${r}:array<mat2x4<${t}>, ${Math.ceil(s/8)}>`):e.push(`${r}:array<vec4<${t}>, ${Math.ceil(s/4)}>`);else{let n=s==null||s===1?t:`vec${s}<${t}>`;e.push(`${r}:${n}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[e(r.type),r.length??1])}},zM=(e,r)=>new W_(e,r)}),G_,ec,K_,H_,q_,Q_,Yr,BM,RM,tn=Be(()=>{ft(),yt(),lr(),xt(),G_=(e,r)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(r.length!==0&&r.length!==e[0].dims.length)throw new Error(`perm size ${r.length} does not match input rank ${e[0].dims.length}`)},ec=(e,r)=>r.length!==0?r:[...new Array(e).keys()].reverse(),K_=(e,r)=>Me.sortBasedOnPerm(e,ec(e.length,r)),H_=(e,r,t,s)=>{let n=`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`;for(let o=0;o<r;++o)n+=`a[${e[o]}]=i[${o}];`;return n+="return a;}"},q_=(e,r)=>{let t=[],s=[];for(let n=0;n<e.length;++n)e[n]!==1&&t.push(e[n]),e[r[n]]!==1&&s.push(r[n]);return{newShape:t,newPerm:s}},Q_=(e,r)=>{let t=0;for(let s=0;s<e.length;++s)if(r[e[s]]!==1){if(e[s]<t)return!1;t=e[s]}return!0},Yr=(e,r)=>{let t=e.dataType,s=e.dims.length,n=ec(s,r),o=K_(e.dims,n),a=e.dims,i=o,l=s<2||Q_(n,e.dims),c;if(l)return c=_=>{let v=Pe("input",t,a,4),I=it("output",t,i,4);return`
  ${_.registerUniform("output_size","u32").declareVariables(v,I)}
  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let _=Me.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(_/64/4)},programUniforms:[{type:12,data:Math.ceil(_/4)}]}},getShaderSource:c};let{newShape:p,newPerm:d}=q_(e.dims,n),u=Me.areEqual(d,[2,3,1]),f=Me.areEqual(d,[3,1,2]);if(p.length===2||u||f){a=u?[p[0],p[1]*p[2]]:f?[p[0]*p[1],p[2]]:p,i=[a[1],a[0]];let _=16;return c=v=>{let I=Pe("a",t,a.length),b=it("output",t,i.length);return`
  ${v.registerUniform("output_size","u32").declareVariables(I,b)}
  var<workgroup> tile : array<array<${b.type.value}, ${_+1}>, ${_}>;
  ${v.mainStart([_,_,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${_} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${_}u + local_id.x;
    let input_row = workgroup_id_x * ${_}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${I.getByIndices(`${I.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${_}u + local_id.x;
    let output_row = workgroup_id_y * ${_}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${b.setByIndices(`${b.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let v=Me.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(i[1]/_),y:Math.ceil(i[0]/_)},programUniforms:[{type:12,data:v},...ct(a,i)]}},getShaderSource:c}}return c=_=>{let v=Pe("a",t,a.length),I=it("output",t,i.length);return`
  ${_.registerUniform("output_size","u32").declareVariables(v,I)}

  ${H_(n,s,v,I)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${I.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${I.setByOffset("global_idx",v.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>{let _=Me.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:[{type:12,data:_},...ct(a,i)]}},getShaderSource:c}},BM=(e,r)=>{G_(e.inputs,r.perm),e.compute(Yr(e.inputs[0],r.perm))},RM=e=>zt({perm:e.perm})}),X_,J_,Y_,Z_,ef,tf,rf,sf,nf,of,_s,jM,NM,VM,UM,WM,GM,KM,HM,qM,QM,Tx=Be(()=>{ft(),yt(),xt(),hu(),tn(),X_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},J_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Y_={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Z_={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},ef=(e,r)=>{let t=[];for(let s=r-e;s<r;++s)t.push(s);return t},tf=(e,r)=>{let t=[],s=e.length;for(let o=0;o<s;o++)r.indexOf(o)===-1&&t.push(e[o]);let n=r.map(o=>e[o]);return[t,n]},rf=(e,r)=>{let t=e.length+r.length,s=[],n=0;for(let o=0;o<t;o++)r.indexOf(o)===-1?s.push(e[n++]):s.push(1);return s},sf=(e,r)=>{for(let t=0;t<e.length;++t)if(e[e.length-t-1]!==r-1-t)return!1;return!0},nf=(e,r)=>{let t=[];if(!sf(e,r)){for(let s=0;s<r;++s)e.indexOf(s)===-1&&t.push(s);e.forEach(s=>t.push(s))}return t},of=(e,r,t,s,n,o,a)=>{let i=t[0].dims,l=Me.size(o),c=Me.size(a),p=Pe("_A",t[0].dataType,i),d=it("output",n,o),u=64;l===1&&(u=256);let f=`
          var<workgroup> aBestValues : array<f32, ${u}>;
       `,_=v=>`
        ${v.registerUniform("reduceSize","u32").declareVariables(p,d)}
        ${f}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${v.mainStart(u)}

          let outputIndex = global_idx / ${u};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${Y_[s]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${u}) {
           let candidate = f32(${p.getByOffset("offset + k")});
           bestValue = ${X_[s]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${u}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${J_[s]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${d.setByOffset("outputIndex",`${s==="mean"?`${d.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${d.type.storage}(${Z_[s]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${r};${u}`,inputDependencies:["type"]},getShaderSource:_,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:l},programUniforms:[{type:12,data:c}]})}},_s=(e,r,t,s)=>{let n=e.inputs.length===1?t:Nc(e.inputs,t),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((f,_)=>_));let a=Me.normalizeAxes(o,e.inputs[0].dims.length),i=a,l=e.inputs[0],c=nf(i,e.inputs[0].dims.length);c.length>0&&(l=e.compute(Yr(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],i=ef(i.length,l.dims.length));let[p,d]=tf(l.dims,i),u=p;n.keepDims&&(u=rf(p,a)),e.compute(of(r,n.cacheKey,[l],s,e.inputs[0].dataType,u,d),{inputs:[l]})},jM=(e,r)=>{_s(e,"ReduceMeanShared",r,"mean")},NM=(e,r)=>{_s(e,"ReduceL1Shared",r,"l1")},VM=(e,r)=>{_s(e,"ReduceL2Shared",r,"l2")},UM=(e,r)=>{_s(e,"ReduceLogSumExpShared",r,"logSumExp")},WM=(e,r)=>{_s(e,"ReduceMaxShared",r,"max")},GM=(e,r)=>{_s(e,"ReduceMinShared",r,"min")},KM=(e,r)=>{_s(e,"ReduceProdShared",r,"prod")},HM=(e,r)=>{_s(e,"ReduceSumShared",r,"sum")},qM=(e,r)=>{_s(e,"ReduceSumSquareShared",r,"sumSquare")},QM=(e,r)=>{_s(e,"ReduceLogSumShared",r,"logSum")}}),fs,af,ca,Nc,gs,lf,cf,uf,df,pf,mf,hf,_f,ff,gf,ws,XM,JM,YM,ZM,eb,tb,rb,sb,nb,ob,hu=Be(()=>{ft(),yt(),lr(),xt(),Tx(),fs=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},af=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],ca=(e,r,t,s,n,o,a=!1,i=!1)=>{let l=[],c=t[0].dims,p=c.length,d=Me.normalizeAxes(n,p),u=!i&&d.length===0;c.forEach((v,I)=>{u||d.indexOf(I)>=0?a&&l.push(1):l.push(v)});let f=l.length,_=Me.size(l);return{name:e,shaderCache:r,getShaderSource:v=>{let I=[],b=Pe("_A",t[0].dataType,p),M=it("output",o,f),$=s(b,M,d),y=$[2];for(let T=0,E=0;T<p;T++)u||d.indexOf(T)>=0?(a&&E++,y=`for(var j${T}: u32 = 0; j${T} < ${c[T]}; j${T}++) {
                  ${$[2].includes("last_index")?`let last_index = j${T};`:""}
                  ${b.indicesSet("input_indices",T,`j${T}`)}
                  ${y}
                }`):(I.push(`${b.indicesSet("input_indices",T,M.indicesGet("output_indices",E))};`),E++);return`

        ${v.registerUniform("output_size","u32").declareVariables(b,M)}

        ${v.mainStart()}
          ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${b.type.indices};
          let output_indices = ${M.offsetToIndices("global_idx")};

          ${I.join(`
`)}
          ${$[0]}       // init ops for reduce max/min
          ${$[1]}
          ${y}
          ${$[3]}
          ${$.length===4?M.setByOffset("global_idx","value"):$.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:o}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:[{type:12,data:_},...ct(c,l)]})}},Nc=(e,r)=>{let t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(s=>t.push(Number(s))),zt({axes:t,keepDims:r.keepDims,noopWithEmptyAxes:r.noopWithEmptyAxes})},gs=(e,r,t,s)=>{let n=e.inputs,o=n.length===1?t:Nc(n,t);e.compute(ca(r,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?af:s,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},lf=(e,r)=>{fs(e.inputs),gs(e,"ReduceLogSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,"value = log(value);"])},cf=(e,r)=>{fs(e.inputs),gs(e,"ReduceL1",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += abs(${t.getByIndices("input_indices")});`,""])},uf=(e,r)=>{fs(e.inputs),gs(e,"ReduceL2",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},df=(e,r)=>{fs(e.inputs),gs(e,"ReduceLogSumExp",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += exp(${t.getByIndices("input_indices")});`,"value = log(value);"])},pf=(e,r)=>{fs(e.inputs),gs(e,"ReduceMax",r,(t,s,n)=>{let o=[];for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&o.push(t.indicesSet("input_indices",a,0));return[`${o.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = max(value, ${t.getByIndices("input_indices")});`,""]})},mf=(e,r)=>{fs(e.inputs),gs(e,"ReduceMean",r,(t,s,n)=>{let o=1;for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&(o*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${s.type.value}(sum / ${o});`]})},hf=(e,r)=>{fs(e.inputs),gs(e,"ReduceMin",r,(t,s,n)=>{let o=[];for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&o.push(`input_indices[${a}] = 0;`);return[`${o.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = min(value, ${t.getByIndices("input_indices")});`,""]})},_f=(e,r)=>{fs(e.inputs),gs(e,"ReduceProd",r,(t,s)=>[`var value = ${s.type.storage}(1);`,"",`value *= ${t.getByIndices("input_indices")};`,""])},ff=(e,r)=>{fs(e.inputs),gs(e,"ReduceSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,""])},gf=(e,r)=>{fs(e.inputs),gs(e,"ReduceSumSquare",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += t * t;`,""])},ws=(e,r,t)=>{if(r.length===0)return t;let s=1,n=1;for(let o=0;o<r.length;o++)r.indexOf(o)===-1?s*=e[o]:n*=e[o];return n<32&&s>1024},XM=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?mf(e,r):jM(e,r)},JM=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?cf(e,r):NM(e,r)},YM=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?uf(e,r):VM(e,r)},ZM=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?df(e,r):UM(e,r)},eb=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?pf(e,r):WM(e,r)},tb=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?hf(e,r):GM(e,r)},rb=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?_f(e,r):KM(e,r)},sb=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?ff(e,r):HM(e,r)},nb=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?gf(e,r):qM(e,r)},ob=(e,r)=>{ws(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?lf(e,r):QM(e,r)}}),tc,ib,ab,Vc,Ex=Be(()=>{ft(),lr(),hu(),tc=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},ib=(e,r)=>{tc(e.inputs);let t=(s,n,o)=>{let a=[];for(let i=0;i<s.rank;i++)(o.indexOf(i)>=0||o.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?"<=":"<"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(ca("ArgMin",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},ab=(e,r)=>{tc(e.inputs);let t=(s,n,o)=>{let a=[];for(let i=0;i<s.rank;i++)(o.indexOf(i)>=0||o.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?">=":">"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(ca("argMax",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},Vc=e=>zt(e)}),wf,Qi,Mf,bf,yf,Jo,vf,lb,_u=Be(()=>{ft(),yt(),pu(),xt(),wf=(e,r)=>{let t=e[0],s=e[1],n=e[2],o=e[3],a=e[4],i=e[5];if(a&&i)throw new Error("Attention cannot have both past and attention_bias");if(t.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=t.dims[0],c=t.dims[1],p=t.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(s.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(s.dims[0]!==p)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==s.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let d=n.dims[0]/3,u=d,f=u;if(r.qkvHiddenSizes.length>0){if(r.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let $ of r.qkvHiddenSizes)if($%r.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");d=r.qkvHiddenSizes[0],u=r.qkvHiddenSizes[1],f=r.qkvHiddenSizes[2]}let _=c;if(d!==u)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==d+u+f)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let v=0;if(a){if(u!==f)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==r.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==u/r.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');r.pastPresentShareBuffer||(v=a.dims[3])}let I=_+v,b=-1,M=0;if(o)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(i){if(i.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(i.dims[0]!==l||i.dims[1]!==r.numHeads||i.dims[2]!==c||i.dims[3]!==I)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:l,sequenceLength:c,pastSequenceLength:v,kvSequenceLength:_,totalSequenceLength:I,maxSequenceLength:b,inputHiddenSize:p,hiddenSize:d,vHiddenSize:f,headSize:Math.floor(d/r.numHeads),vHeadSize:Math.floor(f/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:M,scale:r.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Qi=(e,r,t)=>r&&e?`
      let total_sequence_length_input = u32(${r.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${t?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Mf=(e,r,t,s,n,o,a,i)=>{let l=ir(a?1:o),c=64,p=o/l;p<c&&(c=32);let d=Math.ceil(o/l/c),u=[{type:12,data:r},{type:12,data:t},{type:12,data:s},{type:12,data:n},{type:12,data:p},{type:12,data:d}],f=$r(e.dataType,l),_=jr(1,l),v=["type"];a&&v.push("type"),i&&v.push("type");let I=b=>{let M=it("x",e.dataType,e.dims,l),$=[M],y=a?Pe("seq_lens",a.dataType,a.dims):void 0;y&&$.push(y);let T=i?Pe("total_sequence_length_input",i.dataType,i.dims):void 0;T&&$.push(T);let E=jr(e.dataType),x=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${c}>;
  var<workgroup> thread_sum: array<f32, ${c}>;
  ${b.registerUniforms(x).declareVariables(...$)}
  ${b.mainStart([c,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Qi(y,T,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${c}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${_}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${_}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(l){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${c}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${_}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${_}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(l){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${c}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${M.type.value}(${E}(1.0) / ${E}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${_}(x[offset + i]);
        x[offset + i] = ${M.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${M.type.value}(${E}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${c};${f};${l}`,inputDependencies:v},getShaderSource:I,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:n,z:r*t},programUniforms:u})}},bf=(e,r,t,s,n,o,a,i,l)=>{let c=a+o.kvSequenceLength,p=[o.batchSize,o.numHeads,o.sequenceLength,c],d=e>1&&s,u=o.kvNumHeads?o.kvNumHeads:o.numHeads,f=d?[o.batchSize,u,c,o.headSize]:void 0,_=o.nReps?o.nReps:1,v=o.scale===0?1/Math.sqrt(o.headSize):o.scale,I=ir(o.headSize),b=o.headSize/I,M=12,$={x:Math.ceil(c/M),y:Math.ceil(o.sequenceLength/M),z:o.batchSize*o.numHeads},y=[{type:12,data:o.sequenceLength},{type:12,data:b},{type:12,data:c},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:1,data:v},{type:12,data:a},{type:12,data:o.kvSequenceLength},{type:12,data:_}],T=d&&s&&Me.size(s.dims)>0,E=["type","type"];T&&E.push("type"),n&&E.push("type"),i&&E.push("type"),l&&E.push("type");let x=[{dims:p,dataType:r.dataType,gpuDataType:0}];d&&x.push({dims:f,dataType:r.dataType,gpuDataType:0});let S=z=>{let O=Pe("q",r.dataType,r.dims,I),K=Pe("key",t.dataType,t.dims,I),H=[O,K];if(T){let ce=Pe("past_key",s.dataType,s.dims,I);H.push(ce)}n&&H.push(Pe("attention_bias",n.dataType,n.dims));let D=i?Pe("seq_lens",i.dataType,i.dims):void 0;D&&H.push(D);let Z=l?Pe("total_sequence_length_input",l.dataType,l.dims):void 0;Z&&H.push(Z);let Q=it("output",r.dataType,p),Y=[Q];d&&Y.push(it("present_key",r.dataType,f,I));let re=jr(1,I),te=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${M}u;

  var<workgroup> tileQ: array<${O.type.storage}, ${M*M}>;
  var<workgroup> tileK: array<${O.type.storage}, ${M*M}>;
  ${z.registerUniforms(te).declareVariables(...H,...Y)}
  ${z.mainStart([M,M,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${_===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${_===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Qi(D,Z,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${T&&d?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${d?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${re}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${T&&d?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${d?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${re}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(I){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${I}`)}})()};
        output[outputIdx] = ${Q.type.value} (sum * uniforms.alpha) + ${n?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${I};${n!==void 0};${s!==void 0};${e}`,inputDependencies:E},getRunData:()=>({outputs:x,dispatchGroup:$,programUniforms:y}),getShaderSource:S}},yf=(e,r,t,s,n,o,a=void 0,i=void 0)=>{let l=o+n.kvSequenceLength,c=n.nReps?n.nReps:1,p=n.vHiddenSize*c,d=e>1&&s,u=n.kvNumHeads?n.kvNumHeads:n.numHeads,f=d?[n.batchSize,u,l,n.headSize]:void 0,_=[n.batchSize,n.sequenceLength,p],v=12,I={x:Math.ceil(n.vHeadSize/v),y:Math.ceil(n.sequenceLength/v),z:n.batchSize*n.numHeads},b=[{type:12,data:n.sequenceLength},{type:12,data:l},{type:12,data:n.vHeadSize},{type:12,data:n.numHeads},{type:12,data:n.headSize},{type:12,data:p},{type:12,data:o},{type:12,data:n.kvSequenceLength},{type:12,data:c}],M=d&&s&&Me.size(s.dims)>0,$=["type","type"];M&&$.push("type"),a&&$.push("type"),i&&$.push("type");let y=[{dims:_,dataType:r.dataType,gpuDataType:0}];d&&y.push({dims:f,dataType:r.dataType,gpuDataType:0});let T=E=>{let x=Pe("probs",r.dataType,r.dims),S=Pe("v",t.dataType,t.dims),z=[x,S];M&&z.push(Pe("past_value",s.dataType,s.dims));let O=a?Pe("seq_lens",a.dataType,a.dims):void 0;a&&z.push(O);let K=i?Pe("total_sequence_length_input",i.dataType,i.dims):void 0;i&&z.push(K);let H=[it("output",r.dataType,_)];d&&H.push(it("present_value",r.dataType,f));let D=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${v}u;
  var<workgroup> tileQ: array<${x.type.value}, ${v*v}>;
  var<workgroup> tileV: array<${x.type.value}, ${v*v}>;
  ${E.registerUniforms(D).declareVariables(...z,...H)}
  ${E.mainStart([v,v,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${c===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${c===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Qi(O,K,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${M&&d?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${d?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${x.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${M&&d?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${d?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${s!==void 0};${e}`,inputDependencies:$},getRunData:()=>({outputs:y,dispatchGroup:I,programUniforms:b}),getShaderSource:T}},Jo=(e,r,t,s,n,o,a,i,l,c,p=void 0,d=void 0)=>{let u=Math.min(e.outputCount,1+(a?1:0)+(i?1:0)),f=u>1?c.pastSequenceLength:0,_=f+c.kvSequenceLength,v=l&&Me.size(l.dims)>0?l:void 0,I=[r,t];u>1&&a&&Me.size(a.dims)>0&&I.push(a),v&&I.push(v),p&&I.push(p),d&&I.push(d);let b=e.compute(bf(u,r,t,a,v,c,f,p,d),{inputs:I,outputs:u>1?[-1,1]:[-1]})[0];e.compute(Mf(b,c.batchSize,c.numHeads,f,c.sequenceLength,_,p,d),{inputs:p&&d?[b,p,d]:[b],outputs:[]});let M=[b,s];u>1&&i&&Me.size(i.dims)>0&&M.push(i),p&&M.push(p),d&&M.push(d),e.compute(yf(u,b,s,i,c,f,p,d),{inputs:M,outputs:u>1?[0,2]:[0]})},vf=(e,r)=>{let t=[r.batchSize,r.numHeads,r.sequenceLength,r.headSize],s=r.sequenceLength,n=r.inputHiddenSize,o=r.headSize,a=12,i={x:Math.ceil(r.headSize/a),y:Math.ceil(r.sequenceLength/a),z:r.batchSize*r.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],c=[{type:12,data:s},{type:12,data:n},{type:12,data:o},{type:12,data:r.numHeads},{type:12,data:r.headSize},{type:12,data:r.hiddenSize},{type:12,data:r.hiddenSize+r.hiddenSize+r.vHiddenSize}],p=d=>{let u=it("output_q",l[0].dataType,t),f=it("output_k",l[0].dataType,t),_=it("output_v",l[0].dataType,t),v=Pe("input",l[0].dataType,l[0].dims),I=Pe("weight",l[1].dataType,l[1].dims),b=Pe("bias",l[2].dataType,l[2].dims),M=v.type.storage,$=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${M}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${M}, ${a*a}>;
  var<workgroup> tileWeightK: array<${M}, ${a*a}>;
  var<workgroup> tileWeightV: array<${M}, ${a*a}>;
  ${d.registerUniforms($).declareVariables(v,I,b,u,f,_)}
  ${d.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${M}(0);
    var valueK = ${M}(0);
    var valueV = ${M}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:i,programUniforms:c}),getShaderSource:p},{inputs:l,outputs:[-1,-1,-1]})},lb=(e,r)=>{let t=wf(e.inputs,r),[s,n,o]=vf(e,t);return Jo(e,s,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],t)}}),xf,Tf,Ef,cb,Px=Be(()=>{Ts(),ft(),yt(),lr(),xt(),xf=(e,r)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let t=(s,n,o)=>{let a=n.length;if(a!==s.length)throw new Error(`${o}: num dimensions != ${a}`);n.forEach((i,l)=>{if(i!==s[l])throw new Error(`${o}: dim[${l}] do not match`)})};if(e[0].dims.length>1){let s=r.format==="NHWC"?r.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,r.spatial?2:void 0);t(e[1].dims,s,"Invalid input scale"),t(e[2].dims,s,"Invalid input B"),t(e[3].dims,s,"Invalid input mean"),t(e[4].dims,s,"Invalid input var")}else t(e[1].dims,[1],"Invalid input scale"),t(e[2].dims,[1],"Invalid input B"),t(e[3].dims,[1],"Invalid input mean"),t(e[4].dims,[1],"Invalid input var")},Tf=(e,r)=>{let{epsilon:t,spatial:s,format:n}=r,o=e[0].dims,a=s?ir(o[o.length-1]):1,i=n==="NHWC"&&o.length>1?a:1,l=Me.size(o)/a,c=s,p=c?o.length:o,d=Pe("x",e[0].dataType,e[0].dims,a),u=Pe("scale",e[1].dataType,e[1].dims,i),f=Pe("bias",e[2].dataType,e[2].dims,i),_=Pe("inputMean",e[3].dataType,e[3].dims,i),v=Pe("inputVar",e[4].dataType,e[4].dims,i),I=it("y",e[0].dataType,p,a),b=()=>{let $="";if(s)$=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${a}`:"outputIndices[1]"};`;else if(n==="NCHW")$=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{$=`var cIndices = ${u.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let y=1;y<u.rank;y++)$+=`cIndices[${y}] = outputIndices[${y}];`;$+=`let cOffset = ${u.indicesToOffset("cIndices")};`}return $},M=$=>`
  const epsilon = ${t};
  ${$.registerUniform("outputSize","u32").declareVariables(d,u,f,_,v,I)}
  ${$.mainStart()}
  ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${a}`)};
    ${b()}
    let scale = ${u.getByOffset("cOffset")};
    let bias = ${f.getByOffset("cOffset")};
    let inputMean = ${_.getByOffset("cOffset")};
    let inputVar = ${v.getByOffset("cOffset")};
    let x = ${d.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${r.epsilon}_${r.format}_${s}_${a}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:M,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c?[{type:12,data:l},...ct(o)]:[{type:12,data:l}]})}},Ef=e=>zt(e),cb=(e,r)=>{let{inputs:t,outputCount:s}=e,n=Ef({...r,outputCount:s});if(Yt.webgpu.validateInputContent&&xf(t,n),r.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Tf(t,n))}}),Pf,Cf,ub,Cx=Be(()=>{yt(),xt(),Pf=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Cf=e=>{let r=e[0].dims,t=e[0].dims[2],s=Me.size(r)/4,n=e[0].dataType,o=Pe("input",n,r,4),a=Pe("bias",n,[t],4),i=Pe("residual",n,r,4),l=it("output",n,r,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:c=>`
  const channels = ${t}u / 4;
  ${c.declareVariables(o,a,i,l)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let value = ${o.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${i.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},ub=e=>{Pf(e.inputs),e.compute(Cf(e.inputs))}}),Sf,Dt,db,pb,mb,hb,_b,fb,gb,wb,Mb,$f,bb,yb,vb,xb,Ko,Tb,oa,Eb,Pb,Cb,Sb,$b,kb,Ib,Ab,Fb,Ob,Db,Lb,zb,Bb,Rb,jb,rc,Nb,Uc,Wc,Vb,Ub,Wb,kf,If,Gb,fu=Be(()=>{ft(),yt(),lr(),xt(),Sf=(e,r,t,s,n,o,a)=>{let i=Math.ceil(r/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let c=Pe("inputData",t,[i],4),p=it("outputData",s,[i],4),d=[{name:"vec_size",type:"u32"}];return a&&d.push(...a),`
      ${e.registerUniforms(d).declareVariables(c,p)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${c.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",l)}
  }`},Dt=(e,r,t,s,n,o=e.dataType,a,i)=>{let l=[{type:12,data:Math.ceil(Me.size(e.dims)/4)}];return a&&l.push(...a),{name:r,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:c=>Sf(c,Me.size(e.dims),e.dataType,o,t,s,i),getRunData:c=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(Me.size(c[0].dims)/64/4)},programUniforms:l})}},db=e=>{e.compute(Dt(e.inputs[0],"Abs","abs"))},pb=e=>{e.compute(Dt(e.inputs[0],"Acos","acos"))},mb=e=>{e.compute(Dt(e.inputs[0],"Acosh","acosh"))},hb=e=>{e.compute(Dt(e.inputs[0],"Asin","asin"))},_b=e=>{e.compute(Dt(e.inputs[0],"Asinh","asinh"))},fb=e=>{e.compute(Dt(e.inputs[0],"Atan","atan"))},gb=e=>{e.compute(Dt(e.inputs[0],"Atanh","atanh"))},wb=e=>zt(e),Mb=(e,r)=>{let t;switch(r.to){case 10:t="vec4<f16>";break;case 1:t="vec4<f32>";break;case 12:t="vec4<u32>";break;case 6:t="vec4<i32>";break;case 9:t="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${r.to}`)}e.compute(Dt(e.inputs[0],"Cast",t,void 0,r.cacheKey,r.to))},$f=e=>{let r,t,s=e.length>=2&&e[1].data!==0,n=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:r=s?e[1].getFloat32Array()[0]:-34028234663852886e22,t=n?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:r=s?e[1].getUint16Array()[0]:64511,t=n?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return zt({min:r,max:t})},bb=(e,r)=>{let t=r||$f(e.inputs),s=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Clip",n=>`clamp(${n}, vec4<${s}>(uniforms.min), vec4<${s}>(uniforms.max))`,void 0,t.cacheKey,void 0,[{type:e.inputs[0].dataType,data:t.min},{type:e.inputs[0].dataType,data:t.max}],[{name:"min",type:s},{name:"max",type:s}]),{inputs:[0]})},yb=e=>{e.compute(Dt(e.inputs[0],"Ceil","ceil"))},vb=e=>{e.compute(Dt(e.inputs[0],"Cos","cos"))},xb=e=>{e.compute(Dt(e.inputs[0],"Cosh","cosh"))},Ko=e=>zt(e),Tb=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Elu",s=>`elu_vf32(${s})`,`
  const elu_alpha_ = ${t}(${r.alpha});

  fn elu_f32(a: ${t}) -> ${t} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${t}>) -> vec4<${t}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,r.cacheKey))},oa=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Eb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Erf",t=>`erf_vf32(${t})`,oa(r)))},Pb=e=>{e.compute(Dt(e.inputs[0],"Exp","exp"))},Cb=e=>{e.compute(Dt(e.inputs[0],"Floor","floor"))},Sb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Gelu",t=>`0.5 * ${t} * (1.0 + erf_vf32(${t} * 0.7071067811865475))`,oa(r)))},$b=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"LeakyRelu",s=>`select(leaky_relu_alpha_ * ${s}, ${s}, ${s} >= vec4<${t}>(0.0))`,`const leaky_relu_alpha_ = ${t}(${r.alpha});`,r.cacheKey))},kb=e=>{e.compute(Dt(e.inputs[0],"Not",r=>`!${r}`))},Ib=e=>{e.compute(Dt(e.inputs[0],"Neg",r=>`-${r}`))},Ab=e=>{e.compute(Dt(e.inputs[0],"Reciprocal",r=>`1.0/${r}`))},Fb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Relu",t=>`select(vec4<${r}>(0.0), ${t}, ${t} > vec4<${r}>(0.0))`))},Ob=e=>{e.compute(Dt(e.inputs[0],"Sigmoid",r=>`(1.0 / (1.0 + exp(-${r})))`))},Db=e=>zt(e),Lb=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"HardSigmoid",s=>`max(vec4<${t}>(0.0), min(vec4<${t}>(1.0), ${r.alpha} * ${s} + vec4<${t}>(${r.beta})))`,void 0,r.cacheKey))},zb=e=>{e.compute(Dt(e.inputs[0],"Sin","sin"))},Bb=e=>{e.compute(Dt(e.inputs[0],"Sinh","sinh"))},Rb=e=>{e.compute(Dt(e.inputs[0],"Sqrt","sqrt"))},jb=e=>{e.compute(Dt(e.inputs[0],"Tan","tan"))},rc=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Nb=e=>{e.compute(Dt(e.inputs[0],"Tanh",rc))},Uc=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${rc("v")};
}
`,Wc=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Vb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"FastGelu",Wc,Uc(r),void 0,e.inputs[0].dataType))},Ub=(e,r)=>{let t=jr(e.inputs[0].dataType);return e.compute(Dt(e.inputs[0],"ThresholdedRelu",s=>`select(vec4<${t}>(0.0), ${s}, ${s} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${t}>(${r.alpha});`,r.cacheKey)),0},Wb=e=>{e.compute(Dt(e.inputs[0],"Log","log"))},kf=(e,r)=>`
const alpha = vec4<${e}>(${r});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,If=e=>`quick_gelu_impl(${e})`,Gb=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"QuickGelu",If,kf(t,r.alpha),r.cacheKey,e.inputs[0].dataType))}}),Af,Ff,Kb,Sx=Be(()=>{yt(),xt(),fu(),Af=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ff=e=>{let r=e[0].dims.slice();r[2]=r[2]/2;let t=Pe("input",e[0].dataType,e[0].dims,4),s=Pe("bias",e[0].dataType,[e[0].dims[2]],4),n=it("output",e[0].dataType,r,4),o=Me.size(r)/4,a=$r(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(t,s,n)}

  ${oa(a)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Kb=e=>{Af(e.inputs),e.compute(Ff(e.inputs))}}),Of,Df,Ms,Hb,qb,Qb,Xb,Jb,Yb,Zb,ey,ty,ry,$x=Be(()=>{ft(),yt(),xt(),Of=(e,r,t,s,n,o,a,i,l,c,p,d)=>{let u,f;typeof i=="string"?u=f=(M,$)=>`${i}((${M}),(${$}))`:typeof i=="function"?u=f=i:(u=i.scalar,f=i.vector);let _=it("outputData",p,s.length,4),v=Pe("aData",l,r.length,4),I=Pe("bData",c,t.length,4),b;if(n)if(o){let M=Me.size(r)===1,$=Me.size(t)===1,y=r.length>0&&r[r.length-1]%4===0,T=t.length>0&&t[t.length-1]%4===0;M||$?b=_.setByOffset("global_idx",f(M?`${v.type.value}(${v.getByOffset("0")}.x)`:v.getByOffset("global_idx"),$?`${I.type.value}(${I.getByOffset("0")}.x)`:I.getByOffset("global_idx"))):b=`
            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};
            let offsetA = ${v.broadcastedIndicesToOffset("outputIndices",_)};
            let offsetB = ${I.broadcastedIndicesToOffset("outputIndices",_)};
            ${_.setByOffset("global_idx",f(a||y?v.getByOffset("offsetA / 4u"):`${v.type.value}(${v.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||T?I.getByOffset("offsetB / 4u"):`${I.type.value}(${I.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else b=_.setByOffset("global_idx",f(v.getByOffset("global_idx"),I.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let M=($,y,T="")=>{let E=`aData[indexA${y}][componentA${y}]`,x=`bData[indexB${y}][componentB${y}]`;return`
            let outputIndices${y} = ${_.offsetToIndices(`global_idx * 4u + ${y}u`)};
            let offsetA${y} = ${v.broadcastedIndicesToOffset(`outputIndices${y}`,_)};
            let offsetB${y} = ${I.broadcastedIndicesToOffset(`outputIndices${y}`,_)};
            let indexA${y} = offsetA${y} / 4u;
            let indexB${y} = offsetB${y} / 4u;
            let componentA${y} = offsetA${y} % 4u;
            let componentB${y} = offsetB${y} % 4u;
            ${$}[${y}] = ${T}(${u(E,x)});
          `};p===9?b=`
            var data = vec4<u32>(0);
            ${M("data",0,"u32")}
            ${M("data",1,"u32")}
            ${M("data",2,"u32")}
            ${M("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:b=`
            ${M("outputData[global_idx]",0)}
            ${M("outputData[global_idx]",1)}
            ${M("outputData[global_idx]",2)}
            ${M("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(v,I,_)}

        ${d??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${b}
      }`},Df=(e,r,t,s,n,o,a=t.dataType)=>{let i=t.dims.map(v=>Number(v)??1),l=s.dims.map(v=>Number(v)??1),c=!Me.areEqual(i,l),p=i,d=Me.size(i),u=!1,f=!1,_=[c];if(c){let v=ro.calcShape(i,l,!1);if(!v)throw new Error("Can't perform binary op on the given tensors");p=v.slice(),d=Me.size(p);let I=Me.size(i)===1,b=Me.size(l)===1,M=i.length>0&&i[i.length-1]%4===0,$=l.length>0&&l[l.length-1]%4===0;_.push(I),_.push(b),_.push(M),_.push($);let y=1;for(let T=1;T<p.length;T++){let E=i[i.length-T],x=l[l.length-T];if(E===x)y*=E;else break}y%4===0?(f=!0,u=!0):(I||b||M||$)&&(u=!0)}else u=!0;return _.push(u),{name:e,shaderCache:{hint:r+_.map(v=>v.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:v=>Of(v,i,l,p,u,c,f,n,t.dataType,s.dataType,a,o),getRunData:()=>({outputs:[{dims:p,dataType:a}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:Math.ceil(Me.size(p)/4)},...ct(i,l,p)]})}},Ms=(e,r,t,s,n,o)=>{e.compute(Df(r,n??"",e.inputs[0],e.inputs[1],t,s,o))},Hb=e=>{Ms(e,"Add",(r,t)=>`${r}+${t}`)},qb=e=>{Ms(e,"Div",(r,t)=>`${r}/${t}`)},Qb=e=>{Ms(e,"Equal",{scalar:(r,t)=>`u32(${r}==${t})`,vector:(r,t)=>`vec4<u32>(${r}==${t})`},void 0,void 0,9)},Xb=e=>{Ms(e,"Mul",(r,t)=>`${r}*${t}`)},Jb=e=>{let r=Pe("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Ms(e,"Pow",{scalar:(t,s)=>`pow_custom(${t},${s})`,vector:(t,s)=>`pow_vector_custom(${t},${s})`},`
    fn pow_custom(a : ${r}, b : ${r}) -> ${r} {
      if (b == ${r}(0.0)) {
        return ${r}(1.0);
      } else if (a < ${r}(0.0) && f32(b) != floor(f32(b))) {
        return ${r}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${r}(1.0), round(f32(abs(b) % ${r}(2.0))) != 1.0) * ${r}(${r==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${r}>, b : vec4<${r}>) -> vec4<${r}> {
      // TODO: implement vectorized pow
      return vec4<${r}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Yb=e=>{Ms(e,"Sub",(r,t)=>`${r}-${t}`)},Zb=e=>{Ms(e,"Greater",{scalar:(r,t)=>`u32(${r}>${t})`,vector:(r,t)=>`vec4<u32>(${r}>${t})`},void 0,void 0,9)},ey=e=>{Ms(e,"Less",{scalar:(r,t)=>`u32(${r}<${t})`,vector:(r,t)=>`vec4<u32>(${r}<${t})`},void 0,void 0,9)},ty=e=>{Ms(e,"GreaterOrEqual",{scalar:(r,t)=>`u32(${r}>=${t})`,vector:(r,t)=>`vec4<u32>(${r}>=${t})`},void 0,void 0,9)},ry=e=>{Ms(e,"LessOrEqual",{scalar:(r,t)=>`u32(${r}<=${t})`,vector:(r,t)=>`vec4<u32>(${r}<=${t})`},void 0,void 0,9)}}),Lf,zf,Bf,Rf,sy,ny,kx=Be(()=>{ft(),yt(),lr(),xt(),Lf=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");let t=0,s=e[t],n=s.dataType,o=s.dims.length;e.forEach((a,i)=>{if(i!==t){if(a.dataType!==n)throw new Error("input tensors should be one type");if(a.dims.length!==o)throw new Error("input tensors should have the same shape");a.dims.forEach((l,c)=>{if(c!==r&&l!==s.dims[c])throw new Error("non concat dimensions must match")})}})},zf=(e,r)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${r});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Bf=(e,r)=>{let t=e.length,s=[];for(let n=0;n<t;++n){let o=r.setByOffset("global_idx",e[n].getByIndices("indices"));t===1?s.push(o):n===0?s.push(`if (inputIndex == ${n}u) { ${o} }`):n===t-1?s.push(`else { ${o} }`):s.push(`else if (inputIndex == ${n}) { ${o} }`)}return s.join(`
`)},Rf=(e,r,t,s)=>{let n=Me.size(t),o=new Array(e.length),a=new Array(e.length),i=0,l=[],c=[],p=[{type:12,data:n}];for(let v=0;v<e.length;++v)i+=e[v].dims[r],o[v]=i,c.push(e[v].dims.length),a[v]=Pe(`input${v}`,s,c[v]),l.push("rank"),p.push({type:12,data:o[v]});for(let v=0;v<e.length;++v)p.push(...ct(e[v].dims));p.push(...ct(t));let d=it("output",s,t.length),u=d.indicesGet("indices",r),f=Array.from(Array(o.length).keys()).map(v=>`uniforms.sizeInConcatAxis${v}`).join(","),_=v=>`

  ${(()=>{v.registerUniform("outputSize","u32");for(let I=0;I<e.length;I++)v.registerUniform(`sizeInConcatAxis${I}`,"u32");return v.declareVariables(...a,d)})()}

  ${zf(o.length,f)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${d.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${u});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${o.length}u>(${f});
      ${u} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Bf(a,d)}
  }`;return{name:"Concat",shaderCache:{hint:`${r}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:t,dataType:s}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:p}),getShaderSource:_}},sy=(e,r)=>{let t=e.inputs,s=t[0].dims,n=Me.normalizeAxis(r.axis,s.length);Lf(t,n);let o=s.slice();o[n]=t.reduce((i,l)=>i+(l.dims.length>n?l.dims[n]:0),0);let a=t.filter(i=>Me.size(i.dims)>0);e.compute(Rf(a,n,o,t[0].dataType),{inputs:a})},ny=e=>zt({axis:e.axis})}),Pn,Cn,Sn,gu,kn=Be(()=>{ft(),yt(),Pn=(e,r,t="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${r}(0.0));`;case"Sigmoid":return`value = (${r}(1.0) / (${r}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${r}(${t}(uniforms.clip_min)), ${r}(${t}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${r}(0.0), min(${r}(1.0), ${t}(uniforms.alpha) * value + ${t}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${t}(uniforms.alpha) * value, value, value >= ${r}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Cn=(e,r)=>{e.activation==="Clip"?r.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?r.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&r.push({type:1,data:e.alpha})},Sn=(e,r)=>{e.activation==="Clip"?r.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?r.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&r.push({name:"alpha",type:"f32"})},gu=e=>{let r=e?.activation||"";if(r==="HardSigmoid"){let[t,s]=e?.activation_params||[.2,.5];return{activation:r,alpha:t,beta:s}}else if(r==="Clip"){let[t,s]=e?.activation_params||[kM,IM];return{activation:r,clipMax:s,clipMin:t}}else if(r==="LeakyRelu"){let[t]=e?.activation_params||[.01];return{activation:r,alpha:t}}return{activation:r}}}),Ar,oy,wu=Be(()=>{Ar=(e,r)=>{switch(e){case 1:return r;case 2:return`vec2<${r}>`;case 3:return`vec3<${r}>`;case 4:return`vec4<${r}>`;default:throw new Error(`${e}-component is not supported.`)}},oy=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),iy,Ix=Be(()=>{iy=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),qo,Mu,bu=Be(()=>{ft(),yt(),xt(),kn(),qo=(e,r,t,s,n)=>{let o=s-t;return`
      ${Array.from({length:t}).map((a,i)=>`
      if (${at(r.shape,i,r.rank)} != 1) {
        ${r.indicesSet(e,i,at(n,i+o,s))}
      } else {
        ${r.indicesSet(e,i,0)}
      }`).join("")}
`},Mu=(e,r,t,s,n=!1,o)=>{let a=e[0].dims,i=e[1].dims,l=a[a.length-2],c=i[i.length-1],p=a[a.length-1],d=ir(c),u=ir(p),f=ir(l),_=Me.size(t)/d/f,v=e.length>2,I=s?s.slice(0,-2):t.slice(0,-2),b=[Me.size(I),l,c],M=[{type:12,data:_},{type:12,data:l},{type:12,data:c},{type:12,data:p}];Cn(r,M),M.push(...ct(I,a,i)),v&&M.push(...ct(e[2].dims)),M.push(...ct(b));let $=y=>{let T=mu("batch_dims",e[0].dataType,I.length),E=Pe("a",e[0].dataType,a.length,u),x=Pe("b",e[1].dataType,i.length,d),S=it("output",e[0].dataType,b.length,d),z=$r(S.type.tensor),O=Pn(r,S.type.value,z),K=[E,x],H="";if(v){let Q=n?d:1;K.push(Pe("bias",e[2].dataType,e[2].dims.length,Q)),H=`${n?`value += bias[col / ${Q}];`:`value += ${S.type.value}(bias[row + i]);`}`}let D=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Sn(r,D);let Z=()=>{let Q=`var a_data: ${E.type.value};`;for(let Y=0;Y<u;Y++)Q+=`
              let b_data${Y} = b[(b_offset + (k + ${Y}) * uniforms.N + col) / ${d}];`;for(let Y=0;Y<f;Y++){Q+=`a_data = a[(a_offset + (row + ${Y}) * uniforms.K + k) / ${u}];`;for(let re=0;re<u;re++)Q+=`
            values[${Y}] = fma(${x.type.value}(a_data${u===1?"":`[${re}]`}), b_data${re}, values[${Y}]);
`}return Q};return`
  ${y.registerUniforms(D).registerInternalVariables(T).declareVariables(...K,S)}
  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${d})) * ${d};
    var index1 = global_idx / (uniforms.N / ${d});
    let stride1 = uniforms.M / ${f};
    let row = (index1 % stride1) * ${f};
    let batch = index1 / stride1;

    ${t.length===2?"":`let batch_indices = ${T.offsetToIndices("batch")};`}

    var a_indices: ${E.type.indices};
    ${qo("a_indices",E,E.rank-2,T.rank,"batch_indices")}
    ${E.indicesSet("a_indices",E.rank-2,0)}
    ${E.indicesSet("a_indices",E.rank-1,0)}
    let a_offset = ${E.indicesToOffset("a_indices")};

    var b_indices: ${x.type.indices};
    ${qo("b_indices",x,x.rank-2,T.rank,"batch_indices")}
    ${x.indicesSet("b_indices",x.rank-2,0)}
    ${x.indicesSet("b_indices",x.rank-1,0)}
    let b_offset = ${x.indicesToOffset("b_indices")};
    var values: array<${S.type.value}, ${f}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${u}) {
      ${Z()}
    }
    for (var i = 0u; i < ${f}u; i++) {
      var value = values[i];
      ${H}
      ${O}
      let cur_indices = ${S.type.indices}(batch, row + i, col);
      let offset = ${S.indicesToOffset("cur_indices")};
      ${S.setByOffset(`offset / ${d}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${r.activation};${d};${u};${f};${n}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:o?o(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:M}),getShaderSource:$}}}),jf,Nf,Gc,sc,Vf,Kc,Uf,ua,yu=Be(()=>{ft(),yt(),xt(),kn(),bu(),wu(),jf=(e,r)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${r?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${r?", batchIndices":""});
        `,Nf=(e,r)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${r===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Gc=(e,r,t="f32",s,n=!1,o=32,a=!1,i=32)=>{let l=r[1]*e[1],c=r[0]*e[0],p=n?l:o,d=n?o:l,u=p/r[0],f=o/r[1];if(!((n&&u===4&&e[1]===4||!n&&(u===3||u===4))&&p%r[0]===0&&o%r[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${u} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${u} must be 3 or 4.
  tileAWidth ${p} must be divisible by workgroupSize[0]${r[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${r[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${u}<${t}>, ${p/u}>, ${d}>;
var<workgroup> mm_Bsub: array<array<vec4<${t}>, ${c/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${u};
const tileInner = ${o};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let num_tiles = ${a?`${Math.ceil(i/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

  var acc: array<vec4<${t}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${f};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${jf(n,s)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${s?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${u===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Nf(n,u)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},sc=(e,r)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${r?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${r?", batchIndices":""});
            `,Vf=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Kc=(e,r,t="f32",s,n=!1,o=32,a=!1,i=32,l=!1)=>{let c=e[1]*r[1],p=e[0]*r[0],d=n?c:o,u=n?o:c;if(!(u%r[1]===0&&d%r[0]===0&&o%r[1]===0))throw new Error(`tileAHight ${u} must be divisible by workgroupSize[1]${r[1]}, tileAWidth ${d} must be divisible by workgroupSize[0]${r[0]}, tileInner ${o} must be divisible by workgroupSize[1]${r[1]}`);let f=u/r[1],_=d/r[0],v=o/r[1],I=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${p};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${r[1]}) {
        for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${r[0]}) {
          ${sc(n,s)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${r[1]}) {
            for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${r[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${s?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${t}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${r[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${r[1]}];`:`mm_Asub[localRow + innerRow * ${r[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${r[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${r[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${f};
let tileColA = i32(localId.x) * ${_};
let tileRowB = i32(localId.y) * ${v};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${_}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${sc(n,s)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${s?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${t}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Vf(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${t}, ${d}>, ${u}>;
  var<workgroup> mm_Bsub : array<array<${t}, ${p}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(i/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

    var acc : array<array<${t}, colPerThread>, rowPerThread>;
    ${I}
  }
`},Uf=(e,r,t,s,n=!1)=>{let[o,a,i,l]=s,c=$r(s[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${o.type.indices}) -> ${Ar(e,c)} {
      var value = ${Ar(e,c)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${qo("aIndices",a,a.rank-2,o.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${o.type.indices}) -> ${Ar(e,c)} {
      var value = ${Ar(e,c)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${i.type.indices};
        ${qo("bIndices",i,i.rank-2,o.rank,"batchIndices")}
        ${i.indicesSet("bIndices",i.rank-2,"u32(row)")}
        ${i.indicesSet("bIndices",i.rank-1,"u32(colIn)")}
        value = ${i.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ar(e,c)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${r?`value = value + ${n?"bias[colIn]":`${Ar(e,c)}(bias[row])`};`:""}
        ${t}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},ua=(e,r,t,s,n=!1,o)=>{let a=e[0].dims,i=e[1].dims,l=a.slice(0,-2),c=i.slice(0,-2),p=s?s.slice(0,-2):t.slice(0,-2),d=Me.size(p),u=a[a.length-2],f=a[a.length-1],_=i[i.length-1],v=f%4===0&&_%4===0,I=u<=8?[4,1,1]:[4,4,1],b=[8,8,1],M=[Math.ceil(_/b[0]/I[0]),Math.ceil(u/b[1]/I[1]),Math.ceil(d/b[2]/I[2])],$=v?4:1,y=[...l,u,f/$],T=y.length,E=[...c,f,_/$],x=E.length,S=[d,u,_/$],z=[{type:6,data:u},{type:6,data:_},{type:6,data:f}];Cn(r,z),z.push(...ct(p,y,E));let O=["rank","rank"],K=e.length>2;K&&(z.push(...ct(e[2].dims)),O.push("rank")),z.push(...ct(S));let H=D=>{let Z=p.length,Q=mu("batchDims",e[0].dataType,Z,1),Y=$r(e[0].dataType),re=Pe("a",e[0].dataType,T,$),te=Pe("b",e[1].dataType,x,$),ce=it("result",e[0].dataType,S.length,$),ue=[re,te];if(K){let ae=n?$:1;ue.push(Pe("bias",e[2].dataType,e[2].dims.length,ae))}let B=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Sn(r,B);let F=$r(ce.type.tensor),G=Pn(r,ce.type.value,F),j=Uf($,K,G,[Q,re,te,ce],n);return`
  ${D.registerUniforms(B).registerInternalVariables(Q).declareVariables(...ue,ce)}
  ${j}
  ${v?Gc(I,b,Y,Q):Kc(I,b,Y,Q)}
                   `};return{name:"MatMul",shaderCache:{hint:`${I};${r.activation};${v};${n}`,inputDependencies:O},getRunData:()=>({outputs:[{dims:o?o(t):t,dataType:e[0].dataType}],dispatchGroup:{x:M[0],y:M[1],z:M[2]},programUniforms:z}),getShaderSource:H}}}),Wf,ay,Ax=Be(()=>{ft(),Ns(),xt(),kn(),wu(),Ix(),yu(),Wf=(e,r,t,s,n=!1,o,a=4,i=4,l=4,c="f32")=>{let p=z=>{switch(z){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${z} is not supported.`)}},d=z=>{switch(z){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${z} is not supported.`)}},u=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,f=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,_=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",b=e?"col":"row",M=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${b} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${b} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${b} % inChannels;
    var resData = ${Ar(a,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${_} && xCol >= 0 && xCol < ${v}) {
      ${u}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${p(a)}
    }
    return resData;`,$=e?r&&s?`
    let col = colIn * ${a};
    ${M}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${M}
    }
    return ${Ar(a,c)}(0.0);`:s&&t?`
    let col = colIn * ${a};
    ${M}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${M}
    }
    return ${Ar(a,c)}(0.0);`,y=e?s&&t?d(i):`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${d(i)}
    }
    return ${Ar(i,c)}(0.0);`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${d(i)}
    }
    return ${Ar(i,c)}(0.0);`,T=Ar(l,c),E=Ar(e?a:i,c),x=Ar(e?i:a,c),S=Pn(o,T,c);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${E} {
      ${e?$:y}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${x} {
      ${e?y:$}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${T}) {
      let col = colIn * ${l};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${f}
      ${oy(n)}
      ${S}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},ay=(e,r,t,s,n,o,a,i,l)=>{let c=r.format==="NHWC",p=c?e[0].dims[3]:e[0].dims[1],d=t[0],u=c?t[2]:t[3],f=c?t[1]:t[2],_=c?t[3]:t[1],v=c&&(p%4===0||p%3===0)&&_%4===0,I=c?_:u*f,b=c?u*f:_,M=[8,8,1],$=s<=8?[4,1,1]:[4,4,1],y=[Math.ceil(I/M[0]/$[0]),Math.ceil(b/M[1]/$[1]),Math.ceil(d/M[2]/$[2])];Ft("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${y}`);let T=v?c&&p%4!==0?3:4:1,E=M[1]*$[1],x=M[0]*$[0],S=Math.max(M[0]*T,M[1]),z=s%E===0,O=n%x===0,K=o%S===0,H=v?[T,4,4]:[1,1,1],D=[{type:6,data:s},{type:6,data:n},{type:6,data:o},{type:6,data:[r.pads[0],r.pads[1]]},{type:6,data:r.strides},{type:6,data:r.dilations}];Cn(r,D),D.push(...ct(e[0].dims,e[1].dims));let Z=["rank","rank"];a&&(D.push(...ct(e[2].dims)),Z.push("rank")),D.push(...ct(t));let Q=Y=>{let re=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Sn(r,re);let te=v?4:1,ce=$r(e[0].dataType),ue=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${ce}>`:ce}) {
        result[flatIndex] = ${v?`vec4<${ce}>`:ce}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${ce}>`:ce}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`,B=Pe("x",e[0].dataType,e[0].dims.length,T===3?1:T),F=Pe("w",e[1].dataType,e[1].dims.length,te),G=[B,F],j=it("result",e[0].dataType,t.length,te);if(a){let ae=Pe("bias",e[2].dataType,e[2].dims.length,te);G.push(ae),ue+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${ce}>`:ce} {
          return bias[coords.${c?"w":"y"}${v?"/ 4":""}];
        }`}return`
        ${iy("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Y.registerUniforms(re).declareVariables(...G,j)}
        ${ue}
        ${Wf(c,z,O,K,a,r,H[0],H[1],H[2],ce)}
        ${v?Gc($,M,ce,void 0,!c,S):Kc($,M,ce,void 0,!c,S,!1,void 0,i)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${r.cacheKey};${T};${v};${z};${O};${K};${E};${x};${S}`,inputDependencies:Z},getRunData:()=>({outputs:[{dims:l?l(t):t,dataType:e[0].dataType}],dispatchGroup:{x:y[0],y:y[1],z:y[2]},programUniforms:D}),getShaderSource:Q}}}),Gf,nc,Lo,Kf,oc,Hf,ly,cy,Fx=Be(()=>{ft(),Ns(),yt(),xt(),kn(),wu(),Gf=e=>{let r=1;for(let t=0;t<e.length;t++)r*=e[t];return r},nc=e=>typeof e=="number"?[e,e,e]:e,Lo=(e,r)=>r<=1?e:e+(e-1)*(r-1),Kf=(e,r,t,s=1)=>{let n=Lo(r,s);return Math.floor((e[0]*(t-1)-t+n)/2)},oc=(e,r,t,s,n)=>{n==null&&(n=Kf(e,r[0],s[0]));let o=[0,0,0,t];for(let a=0;a<3;a++)e[a]+2*n>=r[a]&&(o[a]=Math.trunc((e[a]-r[a]+2*n)/s[a]+1));return o},Hf=(e,r,t,s,n,o,a,i,l,c)=>{let p,d,u,f;if(e==="VALID"&&(e=0),typeof e=="number"){p={top:e,bottom:e,left:e,right:e,front:e,back:e};let _=oc([r,t,s,1],[i,l,c],1,[n,o,a],e);d=_[0],u=_[1],f=_[2]}else if(Array.isArray(e)){if(!e.every((v,I,b)=>v===b[0]))throw Error(`Unsupported padding parameter: ${e}`);p={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let _=oc([r,t,s,1],[i,l,c],1,[n,o,a],e[0]);d=_[0],u=_[1],f=_[2]}else if(e==="SAME_UPPER"){d=Math.ceil(r/n),u=Math.ceil(t/o),f=Math.ceil(s/a);let _=(d-1)*n+i-r,v=(u-1)*o+l-t,I=(f-1)*a+c-s,b=Math.floor(_/2),M=_-b,$=Math.floor(v/2),y=v-$,T=Math.floor(I/2),E=I-T;p={top:$,bottom:y,left:T,right:E,front:b,back:M}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:d,outHeight:u,outWidth:f}},ly=(e,r,t,s,n,o=!1,a="channelsLast")=>{let i,l,c,p,d;if(a==="channelsLast")[i,l,c,p,d]=e;else if(a==="channelsFirst")[i,d,l,c,p]=e;else throw new Error(`Unknown dataFormat ${a}`);let[u,,f,_,v]=r,[I,b,M]=nc(t),[$,y,T]=nc(s),E=Lo(f,$),x=Lo(_,y),S=Lo(v,T),{padInfo:z,outDepth:O,outHeight:K,outWidth:H}=Hf(n,l,c,p,I,b,M,E,x,S),D=o?u*d:u,Z=[0,0,0,0,0];return a==="channelsFirst"?Z=[i,D,O,K,H]:a==="channelsLast"&&(Z=[i,O,K,H,D]),{batchSize:i,dataFormat:a,inDepth:l,inHeight:c,inWidth:p,inChannels:d,outDepth:O,outHeight:K,outWidth:H,outChannels:D,padInfo:z,strideDepth:I,strideHeight:b,strideWidth:M,filterDepth:f,filterHeight:_,filterWidth:v,effectiveFilterDepth:E,effectiveFilterHeight:x,effectiveFilterWidth:S,dilationDepth:$,dilationHeight:y,dilationWidth:T,inShape:e,outShape:Z,filterShape:r}},cy=(e,r,t,s,n,o)=>{let a=o==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let i=[64,1,1],l={x:t.map((I,b)=>b)},c=[Math.ceil(Gf(l.x.map(I=>t[I]))/i[0]),1,1];Ft("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${c}`);let p=1,d=Me.size(t),u=[{type:12,data:d},{type:12,data:s},{type:12,data:n},{type:12,data:r.strides},{type:12,data:r.dilations}];Cn(r,u),u.push(...ct(e[0].dims,e[1].dims));let f=["rank","rank"],_=e.length===3;_&&(u.push(...ct(e[2].dims)),f.push("rank")),u.push(...ct(t));let v=I=>{let b=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:s.length},{name:"pads",type:"u32",length:n.length},{name:"strides",type:"u32",length:r.strides.length},{name:"dilations",type:"u32",length:r.dilations.length}];Sn(r,b);let M=1,$=$r(e[0].dataType),y=Pe("x",e[0].dataType,e[0].dims.length,p),T=Pe("W",e[1].dataType,e[1].dims.length,M),E=[y,T],x=it("result",e[0].dataType,t.length,M),S="";if(_){let K=Pe("bias",e[2].dataType,e[2].dims.length,M);E.push(K),S+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${$} {
          return bias[${a?at("coords",4,5):at("coords",1,5)}];
        }`}let z=Ar(p,$),O=Pn(r,z,$);return`
            ${S}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${y.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${T.getByIndices("aIndices")};
            }
          ${I.registerUniforms(b).declareVariables(...E,x)}
          ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${x.offsetToIndices("global_idx")};
              let batch = ${at("coords",0,y.rank)};
              let d2 = ${a?at("coords",y.rank-1,y.rank):at("coords",1,y.rank)};
              let xFRCCorner = vec3<u32>(${a?at("coords",1,y.rank):at("coords",2,y.rank)},
              ${a?at("coords",2,y.rank):at("coords",3,y.rank)},
              ${a?at("coords",3,y.rank):at("coords",4,y.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?at("uniforms.x_shape",1,y.rank):at("uniforms.x_shape",2,y.rank)};
              let xShapeZ = ${a?at("uniforms.x_shape",2,y.rank):at("uniforms.x_shape",3,y.rank)};
              let xShapeW = ${a?at("uniforms.x_shape",3,y.rank):at("uniforms.x_shape",4,y.rank)};
              let xShapeU = ${a?at("uniforms.x_shape",4,y.rank):at("uniforms.x_shape",1,y.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${_?"value = value + getBiasByOutputCoords(coords)":""};
              ${O}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${r.cacheKey};${a};${p};${_}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:c[0],y:c[1],z:c[2]},programUniforms:u}),getShaderSource:v}}}),uy,dy,Ox=Be(()=>{ft(),yt(),xt(),kn(),uy=(e,r,t,s)=>{let n=e.length>2,o=n?"value += b[output_channel];":"",a=e[0].dims,i=e[1].dims,l=r.format==="NHWC",c=l?t[3]:t[1],p=c/r.group,d=l&&p>=4?ir(c):1,u=Me.size(t)/d,f=[{type:12,data:u},{type:12,data:r.dilations},{type:12,data:[r.strides[0],r.strides[1]]},{type:12,data:[r.pads[0],r.pads[1]]},{type:12,data:p}];Cn(r,f),f.push(...ct(a,[i[0],i[1],i[2],i[3]/d]));let _=n?["rank","rank","rank"]:["rank","rank"];f.push(...ct([t[0],t[1],t[2],t[3]/d]));let v=I=>{let b=it("output",e[0].dataType,t.length,d),M=$r(b.type.tensor),$=Pn(r,b.type.value,M),y=Pe("x",e[0].dataType,a.length),T=Pe("w",e[1].dataType,i.length,d),E=[y,T];n&&E.push(Pe("b",e[2].dataType,e[2].dims,d));let x=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:r.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Sn(r,x);let S=l?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${y.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${T.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${y.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${T.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${I.registerUniforms(x).declareVariables(...E,b)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${b.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${d} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${l?2:1}];

    var value: ${b.type.value} = ${b.type.value}(0);
    ${S}
    ${o}
    ${$}
    ${b.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${r.cacheKey}_${d}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f}),getShaderSource:v}},dy=(e,r,t,s)=>{let n=e.length>2,o=ir(t[3]),a=ir(t[2]),i=Me.size(t)/o/a,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/o],c=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/o],p=[t[0],t[1],t[2],t[3]/o],d=[{type:12,data:i},{type:6,data:[r.strides[0],r.strides[1]]},{type:6,data:[r.pads[0],r.pads[1]]}];Cn(r,d),d.push(...ct(l,c,p));let u=(a-1)*r.strides[1]+c[1],f=_=>{let v=it("output",e[0].dataType,p.length,o),I=$r(v.type.tensor),b=Pn(r,v.type.value,I),M=Pe("x",e[0].dataType,l.length,o),$=Pe("w",e[1].dataType,c.length,o),y=[M,$];n&&y.push(Pe("b",e[2].dataType,e[2].dims,o));let T=n?"value += b[output_channel];":"",E=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Sn(r,E),`
  ${_.registerUniforms(E).declareVariables(...y,v)}
  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${M.type.value}, ${u}>;
    var values: array<${v.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${u}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${M.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${M.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {
          let w_val = ${$.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${T}
      ${b}
      ${v.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${r.cacheKey};${o};${a};${u};${c[0]};${c[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d}),getShaderSource:f}}}),qf,Xi,Qf,Ji,Hc,ic,Xf,Jf,qc,Dx=Be(()=>{yt(),Ax(),Fx(),yu(),Ox(),kn(),bu(),tn(),qf=(e,r,t,s,n,o)=>{let a=e[0],i=e.slice(o?1:2,o?3:4),l=i.length,c=r[0],p=r.slice(2).map((u,f)=>u+(u-1)*(t[f]-1)),d=i.map((u,f)=>u+s[f]+s[f+l]).map((u,f)=>Math.floor((u-p[f]+n[f])/n[f]));return d.splice(0,0,a),d.splice(o?3:1,0,c),d},Xi=[2,3,1,0],Qf=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[1]*r.group;if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(r.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(r.strides.length!==n)throw new Error(`strides should be ${n}D`);if(r.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ji=(e,r)=>{let t=e.kernelShape.slice();t.length<r[1].dims.length-2&&t.push(...Array(r[1].dims.length-2-t.length).fill(0));for(let o=2;o<r[1].dims.length;++o)t[o-2]===0&&(t[o-2]=r[1].dims[o]);let s=e.pads.slice();la.adjustPadsBasedOnAutoPad(r[0].dims,e.strides,e.dilations,t,s,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:t,pads:s}),n},Hc=e=>{let r=gu(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,a=e.kernel_shape,i=e.pads,l=e.strides,c=e.w_is_const();return{autoPad:s,format:t,dilations:n,group:o,kernelShape:a,pads:i,strides:l,wIsConst:c,...r,cacheKey:`${e.format};${r.activation};`}},ic=(e,r,t,s)=>{let n=t.format==="NHWC",o=qf(r[0].dims,r[1].dims,t.dilations,t.pads,t.strides,n);if(t.group!==1){let E=[r[0]];if(n){let x=e.kernelCustomData.wT??e.compute(Yr(r[1],Xi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x),E.push(x)}else E.push(r[1]);r.length===3&&E.push(r[2]),!e.adapterInfo.isArchitecture("ampere")&&n&&r[1].dims[0]===t.group&&r[1].dims[1]===1&&t.dilations[0]===1&&t.dilations[1]===1?e.compute(dy(E,t,o,s),{inputs:E}):e.compute(uy(E,t,o,s),{inputs:E});return}let a=r.length===3,i=r[0].dims[n?1:2],l=r[0].dims[n?2:3],c=r[0].dims[n?3:1],p=r[1].dims[2],d=r[1].dims[3],u=o[n?1:2],f=o[n?2:3],_=o[n?3:1],v=n&&p===i&&d===l&&t.pads[0]===0&&t.pads[1]===0;if(v||p===1&&d===1&&t.dilations[0]===1&&t.dilations[1]===1&&t.strides[0]===1&&t.strides[1]===1&&t.pads[0]===0&&t.pads[1]===0){let E=o[0],x,S,z,O=[];if(n){let D=e.kernelCustomData.wT??e.compute(Yr(r[1],Xi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];if(t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=D),v){let Z=i*l*c;x=r[0].reshape([1,E,Z]),S=D.reshape([1,Z,_]),z=[1,E,_]}else x=r[0].reshape([E,i*l,c]),S=D.reshape([1,c,_]),z=[E,u*f,_];O.push(x),O.push(S)}else x=r[0].reshape([E,c,i*l]),S=r[1].reshape([1,_,c]),z=[E,_,u*f],O.push(S),O.push(x);a&&O.push(r[2]);let K=z[2],H=O[0].dims[O[0].dims.length-1];K<8&&H<8?e.compute(Mu(O,t,o,z,n,s),{inputs:O}):e.compute(ua(O,t,o,z,n,s),{inputs:O});return}let I=!0,b=e.kernelCustomData.wT??e.compute(Yr(r[1],Xi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=b);let M=[r[0],b];a&&M.push(r[2]);let $=n?u*f:_,y=n?_:u*f,T=p*d*c;e.compute(ay(M,t,o,$,y,T,a,I,s),{inputs:M})},Xf=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let n=[0,r.pads[0],0,r.pads[1]],o=[1].concat(r.strides),a=[1].concat(r.dilations),i=[1].concat(r.kernelShape),l=Ji({...r,pads:n,strides:o,dilations:a,kernelShape:i},s);ic(e,s,l,c=>t?[c[0],c[2],c[3]]:[c[0],c[1],c[3]])},Jf=(e,r,t)=>{let s=t.format==="NHWC"?"channelsLast":"channelsFirst",n=Ji(t,r),o=t.autoPad==="NOTSET"?t.pads:t.autoPad,a=ly(r[0].dims,r[1].dims,t.strides,t.dilations,o,!1,s);e.compute(cy(r,n,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],s))},qc=(e,r)=>{if(Qf(e.inputs,r),e.inputs[0].dims.length===3)Xf(e,r);else if(e.inputs[0].dims.length===5)Jf(e,e.inputs,r);else{let t=Ji(r,e.inputs);ic(e,e.inputs,t)}}}),py,Lx=Be(()=>{ft(),Ns(),yt(),xt(),py=(e,r,t)=>{let s=e.length>2,n=r.outputShape,o=r.format==="NHWC",a=r.group,i=e[1].dims,l=i[2]/a,c=i[3],p=o?ir(l):1,d=o&&c===1&&l>=4,u=d?Math.floor(l/4)*4:Math.floor(l/p)*p,f=l-u,_=o?ir(c):1,v=o?c===1?p:_:1,I=Me.size(n)/_,b=[Math.ceil(I/64),1,1];Ft("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${b}`);let M=["rank","rank"],$=[r.strides[0],r.strides[1]],y=[r.kernelShape[o?1:2],r.kernelShape[o?2:3]],T=[r.dilations[0],r.dilations[1]],E=[y[0]+(r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)),y[1]+(r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1))],x=[E[0]-1-Math.floor((r.pads[0]+r.pads[2])/2),E[1]-1-Math.floor((r.pads[1]+r.pads[3])/2)],S=[{type:12,data:I},{type:12,data:$},{type:12,data:y},{type:12,data:T},{type:12,data:E},{type:6,data:x},{type:12,data:u},{type:12,data:l},{type:12,data:c},...ct(e[0].dims,e[1].dims)];s&&(S.push(...ct(e[2].dims)),M.push("rank")),S.push(...ct(n));let z=O=>{let K=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:$.length},{name:"filter_dims",type:"u32",length:y.length},{name:"dilations",type:"u32",length:y.length},{name:"effective_filter_dims",type:"u32",length:E.length},{name:"pads",type:"i32",length:x.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],H=$r(e[0].dataType),D=o?1:2,Z=o?2:3,Q=o?3:1,Y=Pe("W",e[1].dataType,e[1].dims.length,v),re=Pe("Dy",e[0].dataType,e[0].dims.length,p),te=[re,Y];s&&te.push(Pe("bias",e[2].dataType,[n[Q]].length,_));let ce=it("result",e[0].dataType,n.length,_),ue=()=>{let G="";if(d)p===4?G+=`
        let xValue = ${re.getByOffset("x_offset")};
        let wValue = ${Y.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:p===2?G+=`
          dotProd = dotProd + dot(vec4<${H}>(${re.getByOffset("x_offset")}, ${re.getByOffset("x_offset + 1u")}), vec4<${H}>(${Y.getByOffset("w_offset")}, ${Y.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:p===1&&(G+=`
          dotProd = dotProd + dot(vec4<${H}>(${re.getByOffset("x_offset")}, ${re.getByOffset("x_offset + 1u")}, ${re.getByOffset("x_offset + 2u")}, ${re.getByOffset("x_offset + 3u")}), vec4<${H}>(${Y.getByOffset("w_offset")}, ${Y.getByOffset("w_offset + 1u")}, ${Y.getByOffset("w_offset + 2u")}, ${Y.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(G+=`
                  let xValue = ${o?re.getByOffset(`${re.indicesToOffset(`${re.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p}`):re.get("batch","inputChannel","idyR","idyC")};
        `,p===1)G+=`
          let w_offset = ${Y.indicesToOffset(`${Y.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${Y.getByOffset(`w_offset / ${v}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let j=0;j<p;j++)G+=`
            let wValue${j} = ${Y.getByOffset(`${Y.indicesToOffset(`${Y.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${j}, wOutChannel)`)} / ${v}`)};
            dotProd = dotProd + xValue[${j}] * wValue${j};`;return G},B=()=>{if(f===0)return"";if(!d)throw new Error(`packInputAs4 ${d} is not true.`);let G="";if(p===1){G+="dotProd = dotProd";for(let j=0;j<f;j++)G+=`
            + ${re.getByOffset(`x_offset + ${j}`)} * ${Y.getByOffset(`w_offset + ${j}`)}`;G+=";"}else if(p===2){if(f!==2)throw new Error(`Invalid inputChannelsRemainder ${f}.`);G+=`
          let xValue = ${re.getByOffset("x_offset")};
          let wValue = ${Y.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return G},F=`
            let outputIndices = ${ce.offsetToIndices(`global_idx * ${_}`)};
            let batch = ${ce.indicesGet("outputIndices",0)};
            let d1 = ${ce.indicesGet("outputIndices",Q)};
            let r = ${ce.indicesGet("outputIndices",D)};
            let c = ${ce.indicesGet("outputIndices",Z)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${ce.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${H}(dyRCorner) + ${H}(wR)) / ${H}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${H}(uniforms.Dy_shape[${D}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${H}(dyCCorner) + ${H}(wC)) / ${H}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${H}(uniforms.Dy_shape[${Z}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${d?`
                var x_offset = ${re.indicesToOffset(`${re.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p};
                var w_offset = ${Y.indicesToOffset(`${Y.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${v};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${d?4:p}) {
                  ${ue()}
                  inputChannel = inputChannel + ${d?4:p};
                }
                ${B()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${s?` + bias[d1 / ${_}]`:""};
            ${ce.setByOffset("global_idx","value")};
          `;return`
    ${O.registerUniforms(K).declareVariables(...te,ce)}
      ${O.mainStart()}
      ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${F}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${r.cacheKey};${p}${v}${_}${d}${f}`,inputDependencies:M},getRunData:()=>({dispatchGroup:{x:b[0],y:b[1],z:b[2]},outputs:[{dims:t?t(n):n,dataType:e[0].dataType}],programUniforms:S}),getShaderSource:z}}}),Yf,Zf,eg,ac,my,tg,lc,rg,hy,zx=Be(()=>{Lx(),kn(),tn(),Yf=(e,r,t,s,n,o)=>(e-1)*r+t+(s-1)*n+1-o,Zf=(e,r,t,s,n)=>{let o=Math.floor(e/2);r==="SAME_UPPER"?(t[s]=o,t[n]=e-o):r==="SAME_LOWER"&&(t[s]=e-o,t[n]=o)},eg=(e,r,t,s,n,o,a,i,l,c)=>{let p=e.length-2,d=c.length===0;l.length<p&&l.push(...Array(p-l.length).fill(0));let u=e[0],f=r[i?3:1]*n;for(let _=0,v=e.length-p-(i?1:0);_<p;++_,++v){let I=e[v],b=d?I*a[_]:c[_],M=Yf(I,a[_],o[_],r[v],t[_],b);Zf(M,s,o,_,_+p),d&&c.push(a[_]*(I-1)+l[_]+(r[v]-1)*t[_]+1-o[_]-o[_+p])}c.splice(0,0,u),c.splice(i?3:1,0,f)},ac=(e,r)=>{let t=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((d,u)=>d*u,1)===0){t.length=0;for(let d=2;d<r[1].dims.length;++d)t.push(r[1].dims[d])}let s=e.format==="NHWC";t.splice(0,0,r[1].dims[0]),t.splice(s?3:1,0,r[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),a=e.outputPadding.slice(),i=r[0].dims,l=e.dilations.slice();if(l.reduce((d,u)=>d+u,0)===0){let d=r[0].dims.length-2;l=new Array(d).fill(1)}let c=e.strides.slice();if(c.reduce((d,u)=>d+u,0)===0){let d=r[0].dims.length-2;c=new Array(d).fill(1)}eg(i,t,l,e.autoPad,e.group,n,c,s,a,o);let p=Object.assign({},e);return Object.assign(p,{kernelShape:t,pads:n,outputPadding:a,outputShape:o,dilations:l,strides:c}),p},my=e=>{let r=gu(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,a=e.kernelShape,i=e.pads,l=e.strides,c=e.wIsConst(),p=e.outputPadding,d=e.outputShape;return{autoPad:s,format:t,dilations:n,group:o,kernelShape:a,outputPadding:p,outputShape:d,pads:i,strides:l,wIsConst:c,...r,cacheKey:`${e.format};${r.activation};`}},tg=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[0];if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*r.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(r.dilations.reduce((a,i)=>a+i,0)>0&&r.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(r.strides.reduce((a,i)=>a+i,0)>0&&r.strides.length!==o)throw new Error(`strides should be ${o}D`);if(r.pads.reduce((a,i)=>a+i,0)>0&&r.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(r.outputPadding.length!==o&&r.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(r.kernelShape.reduce((a,i)=>a+i,0)>0&&r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(r.outputShape.length!==0&&r.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},lc=(e,r,t,s)=>{let n=e.kernelCustomData.wT??e.compute(Yr(r[1],[2,3,0,1]),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=n);let o=[r[0],n];r.length===3&&o.push(r[2]),e.compute(py(o,t,s),{inputs:o})},rg=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let n=r.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=r.dilations;(o.length===0||o[0]===0)&&(o=[1]);let a=r.strides;(a.length===0||a[0]===0)&&(a=[1]);let i=r.pads;i.length===0&&(i=[0,0]),i=[0,i[0],0,i[1]],a=[1].concat(a),o=[1].concat(o),n=[1].concat(n);let l=r.outputPadding;l=[0].concat(l);let c=ac({...r,pads:i,strides:a,dilations:o,kernelShape:n,outputPadding:l},s);lc(e,s,c,p=>t?[p[0],p[2],p[3]]:[p[0],p[1],p[3]])},hy=(e,r)=>{if(tg(e.inputs,r),e.inputs[0].dims.length===3)rg(e,r);else{let t=ac(r,e.inputs);lc(e,e.inputs,t)}}}),sg,_y,fy,Bx=Be(()=>{ft(),yt(),lr(),xt(),sg=(e,r,t,s)=>{let n=Me.size(r),o=r.length,a=Pe("input",e,o),i=it("output",e,o),l=t.dataType===6?t.getInt32Array()[0]:Number(t.getBigInt64Array()[0]),c=Me.normalizeAxis(l,o),p=d=>{let u=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,f=at("uniforms.input_shape","uniforms.axis",o),_=s.reverse?u+(s.exclusive?" + 1":""):"0",v=s.reverse?f:u+(s.exclusive?"":" + 1");return`
                ${d.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,i)}
                ${d.mainStart()}
                  ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${i.offsetToIndices("global_idx")};
                  var sum = ${i.type.value}(0);
                  let first : i32 = ${_};
                  let last : i32 = ${v};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${i.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:s.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:12,data:c},...ct(r,r)]}),getShaderSource:p}},_y=(e,r)=>{let t=e.inputs[0].dims,s=e.inputs[0].dataType,n=e.inputs[1];e.compute(sg(s,t,n,r),{inputs:[0]})},fy=e=>{let r=e.exclusive===1,t=e.reverse===1;return zt({exclusive:r,reverse:t})}}),ng,og,ig,gy,wy,Rx=Be(()=>{ft(),yt(),lr(),xt(),ng=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},og=(e,r,t,s)=>{let n=[];n.push(`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`);for(let o=0;o<r;++o)n.push(t.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},ig=(e,r)=>{let t,s,n,o,a,i,l=r.format==="NHWC",c=r.blocksize,p=r.mode==="DCR";l?([t,s,n,o]=e.dims,a=p?[t,s,n,c,c,o/c**2]:[t,s,n,o/c**2,c,c],i=p?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([t,s,n,o]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=p?[t,c,c,o/c**2,s,n]:[t,o/c**2,c,c,s,n],i=p?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let d=e.reshape(a),u=d.dims.length,f=e.dataType,_=Pe("a",f,u),v=it("output",f,u),I=b=>`
  ${b.registerUniform("output_size","u32").declareVariables(_,v)}

  ${og(i,u,_,v)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${v.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${v.setByOffset("global_idx",_.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${r.blocksize};${r.mode}`,inputDependencies:["rank"]},getRunData:b=>{let M=l?[t,s*c,n*c,o/c**2]:[t,o/c**2,s*c,n*c],$=Me.size(M),y=d.dims,T=Me.sortBasedOnPerm(y,i);return{outputs:[{dims:M,dataType:b[0].dataType}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:[{type:12,data:$},...ct(y,T)]}},getShaderSource:I}},gy=(e,r)=>{ng(e.inputs),e.compute(ig(e.inputs[0],r))},wy=e=>zt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),Yi,zo,cc,ag,lg,cg,ug,uc,dg,My,by,jx=Be(()=>{ft(),yt(),lr(),xt(),Yi="[a-zA-Z]|\\.\\.\\.",zo="("+Yi+")+",cc="^"+zo+"$",ag="("+zo+",)*"+zo,lg="^"+ag+"$",cg=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,r){let t=this.symbolToIndices.get(e);t===void 0?t=[r]:t.push(r),this.symbolToIndices.set(e,t)}},ug=class{constructor(e,r){this.equation=r,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[t,s]=r.includes("->")?r.split("->",2):[r,""];if(!t.match(RegExp(lg)))throw new Error("Invalid LHS term");if(t.split(",").forEach((n,o)=>{let a=e[o].dims.slice();if(!n.match(RegExp(cc)))throw new Error("Invalid LHS term");let i=this.processTerm(n,!0,a,o);this.lhs.push(i)}),s==="")s+=[...this.symbolToInfo.entries()].filter(([n,o])=>o.count===1||n==="...").map(([n])=>n).join("");else if(!s.match(RegExp(zo)))throw new Error("Invalid RHS");s.match(RegExp(Yi,"g"))?.forEach(n=>{if(n==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(n);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(s,!1,this.outputDims)}addSymbol(e,r,t){let s=this.symbolToInfo.get(e);if(s!==void 0){if(s.dimValue!==r&&s.count!==1)throw new Error("Dimension mismatch");s.count++,s.inputIndices.push(t)}else s={count:1,dimValue:r,inputIndices:[t]};this.symbolToInfo.set(e,s)}processTerm(e,r,t,s=-1){let n=t.length,o=!1,a=[],i=0;if(!e.match(RegExp(cc))&&!r&&e!=="")throw new Error("Invalid LHS term");let l=e.match(RegExp(Yi,"g")),c=new cg(s);return l?.forEach((p,d)=>{if(p==="..."){if(o)throw new Error("Only one ellipsis is allowed per input term");o=!0;let u=n-l.length+1;if(u<0)throw new Error("Ellipsis out of bounds");if(a=t.slice(i,i+u),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let f=0;f<a.length;f++){let _=String.fromCharCode(48+f);c.addSymbol(_,d+f),this.addSymbol(_,t[i++],s)}}else c.addSymbol(p,d+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(p,t[i++],s)}),c}},uc=e=>e+"_max",dg=(e,r,t,s)=>{let n=e.map(c=>c.length).map((c,p)=>Pe(`input${p}`,r,c)),o=Me.size(s),a=it("output",r,s.length),i=[...t.symbolToInfo.keys()].filter(c=>!t.rhs.symbolToIndices.has(c)),l=c=>{let p=[],d="var prod = 1.0;",u="var sum = 0.0;",f="sum += prod;",_=[],v=[],I=[],b=[],M=t.symbolToInfo.size===t.rhs.symbolToIndices.size;t.symbolToInfo.forEach((y,T)=>{if(t.rhs.symbolToIndices.has(T)){let E=t.rhs.symbolToIndices.get(T)?.[0];E!==void 0&&t.lhs.forEach((x,S)=>{if(y.inputIndices.includes(S)){let z=x.symbolToIndices.get(T);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(O=>{p.push(`${n[S].indicesSet(`input${S}Indices`,O,a.indicesGet("outputIndices",E))}`)})}})}else t.lhs.forEach((E,x)=>{if(y.inputIndices.includes(x)){let S=E.symbolToIndices.get(T);if(S===void 0)throw new Error("Invalid symbol error");S.forEach(z=>{_.push(`${n[x].indicesSet(`input${x}Indices`,z,`${T}`)}`)}),b.push(`prod *= ${n[x].getByIndices(`input${x}Indices`)};`)}}),v.push(`for(var ${T}: u32 = 0; ${T} < uniforms.${uc(T)}; ${T}++) {`),I.push("}")});let $=M?[...p,`let sum = ${n.map((y,T)=>y.getByIndices(`input${T}Indices`)).join(" * ")};`]:[...p,u,...v,..._,d,...b,f,...I];return`
            ${c.registerUniforms(i.map(y=>({name:`${uc(y)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...n,a)}

            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${n.map((y,T)=>`var input${T}Indices: ${n[T].type.indices};`).join(`
`)}
            ${$.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:t.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let c=i.filter(d=>t.symbolToInfo.has(d)).map(d=>({type:12,data:t.symbolToInfo.get(d)?.dimValue||0}));c.push({type:12,data:o});let p=e.map((d,u)=>[...ct(d)]).reduce((d,u)=>d.concat(u),c);return p.push(...ct(s)),{outputs:[{dims:s,dataType:r}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p}},getShaderSource:l}},My=(e,r)=>{let t=new ug(e.inputs,r.equation),s=t.outputDims,n=e.inputs.map((o,a)=>o.dims);e.compute(dg(n,e.inputs[0].dataType,t,s))},by=e=>{let r=e.equation.replace(/\s+/g,"");return zt({equation:r})}}),pg,dc,mg,hg,yy,Nx=Be(()=>{ft(),yt(),xt(),pg=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=t.length<r.length?0:t.length-r.length,n=r.length<t.length?0:r.length-t.length;for(;s<t.length&&n<r.length;++s,++n)if(t[s]!==r[n]&&t[s]!==1&&r[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},dc=(e,r)=>{let t=e.length-r.length,s=[];for(let n=0;n<t;++n)s.push(e[n]);for(let n=0;n<r.length;++n)s.push(r[n]===1?e[n+t]:r[n]);return s},mg=(e,r)=>e.length>r.length?dc(e,r):dc(r,e),hg=e=>{let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=mg(r,t),n=e[0].dataType,o=n===9||Me.size(r)===1,a=n===9||r.length>0&&r[r.length-1]%4===0?4:1,i=o||s.length>0&&s[s.length-1]%4===0?4:1,l=Math.ceil(Me.size(s)/i),c=d=>{let u=Pe("input",n,r.length,a),f=it("output",n,s.length,i),_;if(n===9){let v=(I,b,M="")=>`
          let outputIndices${b} = ${f.offsetToIndices(`outputOffset + ${b}u`)};
          let offset${b} = ${u.broadcastedIndicesToOffset(`outputIndices${b}`,f)};
          let index${b} = offset${b} / 4u;
          let component${b} = offset${b} % 4u;
          ${I}[${b}] = ${M}(${u.getByOffset(`index${b}`)}[component${b}]);
        `;_=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${v("data",0,"u32")}
        ${v("data",1,"u32")}
        ${v("data",2,"u32")}
        ${v("data",3,"u32")}
        ${f.setByOffset("global_idx","data")}
      }`}else _=`
        let outputIndices = ${f.offsetToIndices(`global_idx * ${i}`)};
        let inputOffset = ${u.broadcastedIndicesToOffset("outputIndices",f)};
        let data = ${f.type.value}(${u.getByOffset(`inputOffset / ${a}`)});
        ${f.setByOffset("global_idx","data")}
      }`;return`
    ${d.registerUniform("vec_size","u32").declareVariables(u,f)}
    ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${_}`},p=[{type:12,data:l},...ct(r,s)];return{name:"Expand",shaderCache:{hint:`${s.length};${a}${i}`,inputDependencies:["rank"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:p})}},yy=e=>{pg(e.inputs),e.compute(hg(e.inputs),{inputs:[0]})}}),_g,vy,Vx=Be(()=>{ft(),yt(),xt(),fu(),_g=e=>{let r=e[0].dataType,t=Me.size(e[0].dims),s=Me.size(e[1].dims),n=s%4===0,o=a=>{let i=Pe("x",r,[1],4),l=Pe("bias",r,[1],4),c=it("y",r,[1],4),p=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],d=f=>`
      let bias${f}_offset: u32 = (global_idx * 4 + ${f}) % uniforms.bias_size;
      let bias${f} = ${l.getByOffset(`bias${f}_offset / 4`)}[bias${f}_offset % 4];`,u=n?`
      let bias = ${l.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${d(0)}${d(1)}${d(2)}${d(3)}
      let bias = ${i.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(p).declareVariables(i,l,c)}

    ${Uc(jr(r))}

    ${a.mainStart(so)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${i.getByOffset("global_idx")};
      ${u}
      let x_in = x + bias;
      ${c.setByOffset("global_idx",Wc("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:o,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(t/4)},{type:12,data:s}],dispatchGroup:{x:Math.ceil(t/so/4)}})}},vy=e=>{e.inputs.length<2||Me.size(e.inputs[1].dims)===0?Vb(e):e.compute(_g(e.inputs))}}),fg,gg,xy,Ty,Ux=Be(()=>{ft(),yt(),lr(),xt(),fg=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},gg=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t.length,o=Me.normalizeAxis(r.axis,n),a=t.slice(0);a.splice(o,1,...s);let i=t[o],l=e[0].dataType===9?4:1,c=Math.ceil(Me.size(a)/l),p=[{type:12,data:c},{type:6,data:i},{type:12,data:o},...ct(e[0].dims,e[1].dims,a)],d=u=>{let f=Pe("data",e[0].dataType,e[0].dims.length,l),_=Pe("inputIndices",e[1].dataType,e[1].dims.length),v=it("output",e[0].dataType,a.length,l),I=M=>{let $=s.length,y=`var indicesIndices${M}  = ${_.type.indices}(0);`;for(let T=0;T<$;T++)y+=`${$>1?`indicesIndices${M}[${T}]`:`indicesIndices${M}`} = ${a.length>1?`outputIndices${M}[uniforms.axis + ${T}]`:`outputIndices${M}`};`;y+=`
          var idx${M} = ${_.getByIndices(`indicesIndices${M}`)};
          if (idx${M} < 0) {
            idx${M} = idx${M} + uniforms.axisDimLimit;
          }
          var dataIndices${M} : ${f.type.indices};
        `;for(let T=0,E=0;T<n;T++)T===o?(y+=`${n>1?`dataIndices${M}[${T}]`:`dataIndices${M}`} = u32(idx${M});`,E+=$):(y+=`${n>1?`dataIndices${M}[${T}]`:`dataIndices${M}`} = ${a.length>1?`outputIndices${M}[${E}]`:`outputIndices${M}`};`,E++);return y},b;if(e[0].dataType===9){let M=($,y,T="")=>`
          let outputIndices${y} = ${v.offsetToIndices(`outputOffset + ${y}u`)};
          ${I(y)};
          let offset${y} = ${f.indicesToOffset(`dataIndices${y}`)};
          let index${y} = offset${y} / 4u;
          let component${y} = offset${y} % 4u;
          ${$}[${y}] = ${T}(${f.getByOffset(`index${y}`)}[component${y}]);
        `;b=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${M("value",0,"u32")}
        ${M("value",1,"u32")}
        ${M("value",2,"u32")}
        ${M("value",3,"u32")}
        ${v.setByOffset("global_idx","value")}
      `}else b=`
      let outputIndices = ${v.offsetToIndices("global_idx")};
      ${I("")};
      let value = ${f.getByIndices("dataIndices")};
      ${v.setByOffset("global_idx","value")};
      `;return`
      ${u.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(f,_,v)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${b}
      }`};return{name:"Gather",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:p}),getShaderSource:d}},xy=e=>zt({axis:e.axis}),Ty=(e,r)=>{let t=e.inputs;fg(t),e.compute(gg(e.inputs,r))}}),wg,Ey,Py,Wx=Be(()=>{ft(),yt(),xt(),wg=(e,r,t,s,n,o,a,i,l)=>{let c=[{type:12,data:o},{type:12,data:s},{type:12,data:n},{type:12,data:t},{type:12,data:a},{type:12,data:i},{type:12,data:l}],p=[o];c.push(...ct(r.dims,p));let d=u=>{let f=Pe("indices_data",r.dataType,r.dims.length),_=it("input_slice_offsets_data",12,1,1),v=[f,_],I=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:n.length},{name:"sizes_from_slice_dims_data",type:"u32",length:t.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${u.registerUniforms(I).declareVariables(...v)}
  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${n.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${t.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${n.length}_${t.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c}),getShaderSource:d},{inputs:[r],outputs:[-1]})[0]},Ey=(e,r)=>{let t=e.inputs,s=t[0].dims,n=t[0].dataType,o=t[1].dims,a=o[o.length-1],i=Me.sizeToDimension(o,o.length-1),l=Me.sizeFromDimension(s,r.batchDims+a),c=Me.sizeToDimension(s,r.batchDims),p=Me.sizeFromDimension(s,r.batchDims),d=i/c,u=new Array(a),f=l;for(let y=0;y<a;++y)u[a-1-y]=f,f*=s[r.batchDims+a-1-y];let _=wg(e,t[1],u,r.batchDims,s,i,d,p,a),v=r.batchDims+a;if(v>s.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let I=o.slice(0,-1).concat(s.slice(v)),b=Me.size(I),M=[{type:12,data:b},{type:12,data:l},...ct(t[0].dims,_.dims,I)],$=y=>{let T=Pe("data",t[0].dataType,t[0].dims.length),E=Pe("slice_offsets",12,_.dims.length),x=it("output",t[0].dataType,I.length);return`
          ${y.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(T,E,x)}
            ${y.mainStart()}
            ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:I,dataType:n}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:M}),getShaderSource:$},{inputs:[t[0],_]})},Py=e=>({batchDims:e.batch_dims,cacheKey:""})}),Mg,bg,Cy,Sy,Gx=Be(()=>{ft(),yt(),lr(),xt(),Mg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let t=Me.normalizeAxis(r.quantizeAxis,e[0].dims.length),s=r.blockSize,n=e[0],o=e[2],a=e.length===4?e[3]:void 0;if(o.dims.length!==n.dims.length||!n.dims.map((i,l)=>l===t?Math.ceil(i/s)===o.dims[l]:i===o.dims[l]).reduce((i,l)=>i&&l,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==n.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==o.dims.length||!a.dims.map((i,l)=>i===o.dims[l]).reduce((i,l)=>i&&l,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},bg=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t.length,o=Me.normalizeAxis(r.gatherAxis,n),a=Me.normalizeAxis(r.quantizeAxis,n),i=t.slice(0);i.splice(o,1,...s);let l=Me.size(i),c=e[2].dataType,p=e[0].dataType===22,d=[{type:12,data:l},{type:12,data:a},{type:12,data:o},{type:12,data:r.blockSize},...ct(...e.map((f,_)=>f.dims),i)],u=f=>{let _=Pe("data",e[0].dataType,e[0].dims.length),v=Pe("inputIndices",e[1].dataType,e[1].dims.length),I=Pe("scales",e[2].dataType,e[2].dims.length),b=e.length>3?Pe("zeroPoint",e[3].dataType,e[3].dims.length):void 0,M=it("output",c,i.length),$=[_,v,I];b&&$.push(b);let y=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${f.registerUniforms(y).declareVariables(...$,M)}
        ${f.mainStart()}
        let output_indices = ${M.offsetToIndices("global_idx")};
        var indices_indices = ${v.type.indices}(0);
        ${s.length>1?`
          for (var i: u32 = 0; i < ${s.length}; i++) {
            let index = ${M.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${v.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${M.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${_.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${M.indicesGet("output_indices","i")};
          ${_.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${v.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${t[o]};
        }
        ${_.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${i.length}; i++) {
          let index = ${M.indicesGet("output_indices",`i + ${s.length} - 1`)};
          ${_.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${_.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${_.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${I.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${I.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${I.getByIndices("scale_indices")};
        ${b?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${b.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${b.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${jr(c)}(quantized_data - zero_point) * scale;
        ${M.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${r.cacheKey};${e.filter((f,_)=>_!==1).map(f=>f.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(f,_)=>"rank")},getRunData:()=>({outputs:[{dims:i,dataType:c}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:u}},Cy=(e,r)=>{let t=e.inputs;Mg(t,r),e.compute(bg(e.inputs,r))},Sy=e=>zt({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),yg,vg,$y,ky,Kx=Be(()=>{ft(),yt(),lr(),xt(),yg=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},vg=(e,r)=>{let t=e[0].dims,s=e[0].dataType,n=t.length,o=e[1].dims,a=e[1].dataType,i=Me.normalizeAxis(r.axis,n),l=t[i],c=o.slice(0),p=Me.size(c),d=Pe("input",s,n),u=Pe("indicesInput",a,o.length),f=it("output",s,c.length),_=[{type:12,data:p},{type:6,data:l},{type:12,data:i}];return _.push(...ct(t,o,c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:_}),getShaderSource:v=>`
      ${v.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(d,u,f)}
      ${v.mainStart()}
      ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${f.offsetToIndices("global_idx")};

      var idx = ${u.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${d.type.indices}(outputIndices);
      ${d.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${d.getByIndices("inputIndices")};

      ${f.setByOffset("global_idx","value")};
  }`}},$y=e=>zt({axis:e.axis}),ky=(e,r)=>{let t=e.inputs;yg(t),e.compute(vg(e.inputs,r))}}),xg,Tg,Iy,Ay,Hx=Be(()=>{ft(),yt(),xt(),xg=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Tg=(e,r)=>{let t=e[0].dims.slice(),s=e[1].dims.slice(),[n,o,a]=$M.getShapeOfGemmResult(t,r.transA,s,r.transB,e.length===3?e[2].dims:void 0),i=[n,o];if(!i)throw new Error("Can't use gemm on the given tensors");let l=16,c=Math.ceil(o/l),p=Math.ceil(n/l),d=!0,u=Me.size(i),f=[{type:12,data:d?c:u},{type:12,data:n},{type:12,data:o},{type:12,data:a},{type:1,data:r.alpha},{type:1,data:r.beta}],_=["type","type"];e.length===3&&(f.push(...ct(e[2].dims)),_.push("rank")),f.push(...ct(i));let v=b=>{let M="";r.transA&&r.transB?M="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":r.transA&&!r.transB?M="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!r.transA&&r.transB?M="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!r.transA&&!r.transB&&(M="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let $=r.alpha===1?"":"value *= uniforms.alpha;",y=Pe("a",e[0].dataType,e[0].dims),T=Pe("b",e[1].dataType,e[1].dims),E=y.type.value,x=null,S=[y,T];e.length===3&&(x=Pe("c",e[2].dataType,e[2].dims.length),S.push(x));let z=it("output",e[0].dataType,i.length);S.push(z);let O=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${b.registerUniforms(O).declareVariables(...S)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${E}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${M}
    }

    ${$}
    ${x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",z)}; value += ${E}(uniforms.beta) * ${x.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},I=b=>{let M=Pe("a",e[0].dataType,e[0].dims),$=Pe("b",e[1].dataType,e[1].dims),y=null,T=[M,$];e.length===3&&(y=Pe("c",e[2].dataType,e[2].dims.length),T.push(y));let E=it("output",e[0].dataType,i.length);T.push(E);let x=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],S="",z="";r.transA&&r.transB?(z=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${M.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):r.transA&&!r.transB?(z=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${M.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!r.transA&&r.transB?(z=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${M.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!r.transA&&!r.transB&&(z=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${M.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let O=r.alpha===1?"":"value *= uniforms.alpha;";return`
  ${b.registerUniforms(x).declareVariables(...T)}
  var<workgroup> tile_a: array<array<${M.type.storage}, ${l}>, ${l}>;
  var<workgroup> tile_b: array<array<${$.type.storage}, ${l}>, ${l}>;
  ${b.mainStart([l,l,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${l};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${l};
    let num_tiles = (uniforms.K - 1) / ${l} + 1;
    var k_start = 0u;
    var value = ${E.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${z}
      k_start = k_start + ${l};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${l}; k++) {
        ${S}
      }
      workgroupBarrier();
    }

    ${O}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${y!=null?`let cOffset = ${y.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${E.type.value}(uniforms.beta) * ${y.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return d?{name:"GemmShared",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:c*p},programUniforms:f}),getShaderSource:I}:{name:"Gemm",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f}),getShaderSource:v}},Iy=e=>{let r=e.transA,t=e.transB,s=e.alpha,n=e.beta;return{transA:r,transB:t,alpha:s,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Ay=(e,r)=>{xg(e.inputs),e.compute(Tg(e.inputs,r))}}),As,Rs,wn,Mn,Eg,Pg,Cg,Sg,$g,kg,Ig,Ag,Fy,Oy,qx=Be(()=>{ft(),yt(),lr(),xt(),[As,Rs,wn,Mn]=[0,1,2,3],Eg=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},Pg=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,Cg=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Sg=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,$g=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,kg=(e,r,t)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${r} {
     var pixel = ${r}(0);
     var indices = vec4<u32>(0);
     indices[${As}] = batch;
     indices[${Rs}] = channel;`+(()=>{switch(t.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${wn}] = u32(r);
            indices[${Mn}] = u32(c);
          } else {
            return ${r}(0);
          }
        `;case"border":return`
          indices[${wn}] = u32(clamp(r, 0, H - 1));
          indices[${Mn}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${wn}] = gs_reflect(r, border[1], border[3]);
          indices[${Mn}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${t.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,Ig=(e,r,t)=>(()=>{switch(t.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${As}], indices[${Rs}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${As}], indices[${Rs}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${As}], indices[${Rs}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${As}], indices[${Rs}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${As}], indices[${Rs}], border);

          let dx2 = ${r}(f32(x2) - x);
          let dx1 = ${r}(x - f32(x1));
          let dy2 = ${r}(f32(y2) - y);
          let dy1 = ${r}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${r}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${As}], indices[${Rs}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${t.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,Ag=(e,r)=>{let t=Pe("x",e[0].dataType,e[0].dims.length),s=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],n=Pe("grid",e[1].dataType,s.length,2),o=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];r.format==="NHWC"&&(o=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[As,Rs,wn,Mn]=[0,3,1,2]);let a=it("output",e[0].dataType,o.length),i=t.type.value,l=Me.size(o),c=[{type:12,data:l},...ct(e[0].dims,s,o)],p=d=>`
  ${d.registerUniform("output_size","u32").declareVariables(t,n,a)}
  ${Pg}
  ${Cg(i)}
  ${Sg(r)}
  ${$g(r)}
  ${kg(t,i,r)}

  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${wn}]);
      let W_in = i32(uniforms.x_shape[${Mn}]);

      ${r.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${As}], indices[${wn}], indices[${Mn}]);
      let nxy = ${n.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${Ig(a,i,r)}
  }`;return{name:"GridSample",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:["type","type"]},getRunData:d=>{let u=Me.size(o);return{outputs:[{dims:o,dataType:d[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:c}},getShaderSource:p}},Fy=(e,r)=>{Eg(e.inputs),e.compute(Ag(e.inputs,r))},Oy=e=>zt({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),Ur,Fg,Dy,pc,Og,Ho,Ly,zy=Be(()=>{ft(),yt(),lr(),pu(),_u(),xt(),tn(),Ur=(e,r)=>e.length>r&&e[r].dims.length>0?e[r]:void 0,Fg=(e,r)=>{let t=e[0],s=Ur(e,1),n=Ur(e,2),o=Ur(e,3),a=Ur(e,4),i=Ur(e,5),l=Ur(e,6),c=Ur(e,7);if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let p=t.dims[0],d=t.dims[1],u=t.dims.length===3?t.dims[2]:r.numHeads*t.dims[4],f=d,_=0,v=0,I=Math.floor(u/r.numHeads);if(l&&c&&Me.size(l.dims)&&Me.size(c.dims)){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==p||l.dims[1]!==r.numHeads||l.dims[3]!==I)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(c.dims[0]!==p||c.dims[1]!==r.numHeads||c.dims[3]!==I)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==c.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');_=l.dims[2],v=l.dims[2]}else if(l&&Me.size(l.dims)||c&&Me.size(c.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let b;if(s&&Me.size(s.dims)>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(s.dims[2]!==t.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');b=2,f=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==I)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');b=5,f=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==I)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');b=0,f=s.dims[2]}}else{if(t.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(t.dims[2]!==r.numHeads||t.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');b=3}if(o&&Me.size(o.dims)>0){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&s.dims.length===5&&s.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let M=_+f,$=0;if(a&&Me.size(a.dims)>0){$=8;let x=a.dims;throw x.length===1?x[0]===p?$=1:x[0]===3*p+2&&($=3):x.length===2&&x[0]===p&&x[1]===M&&($=5),$===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let y=!1,T=u;if(n&&Me.size(n.dims)>0){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(f!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');T=n.dims[2]}else{if(f!==n.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');T=n.dims[1]*n.dims[3],y=!0}}let E=!1;if(a&&Me.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(i&&Me.size(i.dims)>0){if(i.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(i.dims[0]!==p||i.dims[1]!==r.numHeads||i.dims[2]!==d||i.dims[3]!==M)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:p,sequenceLength:d,pastSequenceLength:_,kvSequenceLength:f,totalSequenceLength:M,maxSequenceLength:v,inputHiddenSize:0,hiddenSize:u,vHiddenSize:T,headSize:I,vHeadSize:Math.floor(T/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:$,scale:r.scale,broadcastResPosBias:E,passPastInKv:y,qkvFormat:b}},Dy=e=>zt({...e}),pc=zt({perm:[0,2,1,3]}),Og=(e,r,t,s,n,o,a)=>{let i=[s,n,o],l=Me.size(i),c=[{type:12,data:l},{type:12,data:a},{type:12,data:o}],p=d=>{let u=it("qkv_with_bias",r.dataType,i),f=Pe("qkv",r.dataType,i),_=Pe("bias",t.dataType,i),v=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${d.registerUniforms(v).declareVariables(f,_,u)}
  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:r.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:p},{inputs:[r,t],outputs:[-1]})[0]},Ho=(e,r,t,s,n,o,a,i)=>{let l=o;if(a&&Me.size(a.dims)>0){if(s===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=Og(e,o,a,r,s,t*n,i),l=l.reshape([r,s,t,n]),t===1||s===1?l:e.compute(Yr(l,pc.perm),{inputs:[l],outputs:[-1]})[0]}else return o.dims.length===3&&(l=o.reshape([r,s,t,n])),t===1||s===1?l:e.compute(Yr(l,pc.perm),{inputs:[l],outputs:[-1]})[0]},Ly=(e,r)=>{let t=Fg(e.inputs,r),s=e.inputs[0],n=Ur(e.inputs,1),o=Ur(e.inputs,2),a=Ur(e.inputs,3),i=Ur(e.inputs,4),l=Ur(e.inputs,5),c=Ur(e.inputs,6),p=Ur(e.inputs,7);if(s.dims.length===5)throw new Error("Packed QKV is not implemented");if(n?.dims.length===5)throw new Error("Packed KV is not implemented");let d=n&&o&&n.dims.length===4&&o.dims.length===4,u=Ho(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,s,a,0);if(d)return Jo(e,u,n,o,i,void 0,c,p,l,t);if(!n||!o)throw new Error("key and value must be provided");let f=Ho(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.headSize,n,a,t.hiddenSize),_=Ho(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.vHeadSize,o,a,2*t.hiddenSize);Jo(e,u,f,_,i,void 0,c,p,l,t)}}),Dg,Lg,zg,Bg,Qc,By,Ry,jy=Be(()=>{ft(),yt(),lr(),xt(),Dg=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Lg=(e,r)=>{let t=[],s=r.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>t.push(Number(n))),s=t.length),zt({numOutputs:s,axis:r.axis,splitSizes:t})},zg=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${at("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Bg=e=>{let r=e.length,t=[];for(let s=0;s<r;++s){let n=e[s].setByIndices("indices","input[global_idx]");r===1?t.push(n):s===0?t.push(`if (output_number == ${s}u) { ${n} }`):s===r-1?t.push(`else { ${n} }`):t.push(`else if (output_number == ${s}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${t.join(`
`)}
      }`},Qc=(e,r)=>{let t=e[0].dims,s=Me.size(t),n=e[0].dataType,o=Me.normalizeAxis(r.axis,t.length),a=new Array(r.numOutputs),i=Pe("input",n,t.length),l=new Array(r.numOutputs),c=[],p=[],d=0,u=[{type:12,data:s}];for(let _=0;_<r.numOutputs;_++){d+=r.splitSizes[_],l[_]=d;let v=t.slice();v[o]=r.splitSizes[_],p.push(v),a[_]=it(`output${_}`,n,v.length),c.push({dims:p[_],dataType:e[0].dataType})}u.push({type:12,data:l},...ct(t,...p));let f=_=>`
  ${_.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(i,...a)}
  ${zg(l.length)}
  ${Bg(a)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${i.offsetToIndices("global_idx")};
    var index = ${i.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${at("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${i.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getShaderSource:f,getRunData:()=>({outputs:c,dispatchGroup:{x:Math.ceil(s/64)},programUniforms:u})}},By=(e,r)=>{Dg(e.inputs);let t=e.inputs.length===1?r:Lg(e.inputs,r);e.compute(Qc(e.inputs,t),{inputs:[0]})},Ry=e=>{let r=e.axis,t=e.splitSizes,s=e.numOutputs<0?t.length:e.numOutputs;if(s!==t.length)throw new Error("numOutputs and splitSizes lengh must be equal");return zt({axis:r,numOutputs:s,splitSizes:t})}}),Rg,da,Ny,Vy=Be(()=>{ft(),yt(),lr(),xt(),Rg=(e,r)=>{let[t,s,n,o]=e,{numHeads:a,rotaryEmbeddingDim:i}=r;if(t.dims.length!==3&&t.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${t.dims.length}`);if(!Me.areEqual(s.dims,[])&&!Me.areEqual(s.dims,[1])&&s.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${s.dims.length}`);if(n.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${n.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(!Me.areEqual(n.dims,o.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(i>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let l=t.dims[0],c=t.dims[t.dims.length-2],p=n.dims[0],d=Me.sizeFromDimension(t.dims,1)/c,u=i===0?n.dims[1]*2:d/a;if(i>u)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(s.dims.length===2){if(l!==s.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${s.dims[0]}`);if(c!==s.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${s.dims[1]}`)}if(u/2!==n.dims[1]&&i/2!==n.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${n.dims[1]}`);if(c>p)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},da=(e,r)=>{let{interleaved:t,numHeads:s,rotaryEmbeddingDim:n,scale:o}=r,a=e[0].dims[0],i=Me.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],c=i/l,p=e[2].dims[1],d=n===0?p*2:c/s,u=new Array(a,l,c/d,d-p),f=Me.computeStrides(u),_=[{type:1,data:o},{type:12,data:u},{type:12,data:f},...e[0].dims.length===3?new Array({type:12,data:[i,c,d,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[i,d,l*d,1]}):[],...ct(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],v=I=>{let b=Pe("input",e[0].dataType,e[0].dims.length),M=Pe("position_ids",e[1].dataType,e[1].dims.length),$=Pe("cos_cache",e[2].dataType,e[2].dims.length),y=Pe("sin_cache",e[3].dataType,e[3].dims.length),T=it("output",e[0].dataType,e[0].dims.length);return I.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:u.length},{name:"global_strides",type:"u32",length:f.length},{name:"input_output_strides",type:"u32",length:f.length}]),`
        ${I.declareVariables(b,M,$,y,T)}

        ${I.mainStart(so)}
          let half_rotary_emb_dim = uniforms.${$.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${M.broadcastedIndicesToOffset("bsnh.xy",it("",M.type.tensor,2))};
            let position_id =
                u32(${M.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${t});
            let j = i + select(half_rotary_emb_dim, 1, ${t});
            let re = ${b.getByOffset("i")} * ${$.get("position_id","bsnh[3]")} -
                ${b.getByOffset("j")} * ${y.get("position_id","bsnh[3]")};
            ${T.setByOffset("i","re")}
            let im = ${b.getByOffset("i")} * ${y.get("position_id","bsnh[3]")} +
                ${b.getByOffset("j")} * ${$.get("position_id","bsnh[3]")};
            ${T.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${T.setByOffset("k",b.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:zt({interleaved:t}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:v,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Me.size(u)/so)},programUniforms:_})}},Ny=(e,r)=>{Rg(e.inputs,r),e.compute(da(e.inputs,r))}}),jg,Ng,mc,Vg,Uy,Qx=Be(()=>{lr(),ft(),_u(),zy(),jy(),tn(),Vy(),xt(),jg=(e,r)=>{if(r.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let t=e[0],s=e[1],n=e[2],o=e[3],a=e[4];if(r.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(r.localWindowSize!==-1)throw new Error("Local attention is not supported");if(r.softcap!==0)throw new Error("Softcap is not supported");if(r.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(r.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let i=!1,l=t.dims[0],c=t.dims[1],p=t.dims.length===3?i?t.dims[2]/3:t.dims[2]:r.numHeads*t.dims[4],d=c,u=0,f=!s||s.dims.length===0,_=Math.floor(f?p/(r.numHeads+2*r.kvNumHeads):p/r.numHeads);f&&(p=_*r.numHeads);let v=o&&o.dims.length!==0,I=a&&a.dims.length!==0;if(v&&o.dims.length===4&&o.dims[0]===l&&o.dims[1]!==r.kvNumHeads&&o.dims[2]===r.kvNumHeads&&o.dims[3]===_)throw new Error("BSNH pastKey/pastValue is not supported");if(v&&I){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');u=o.dims[2]}else if(v||I)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let b=1;if(s&&s.dims.length>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(t.dims[2]%s.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');d=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==_)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');d=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==_)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');d=s.dims[2]}}else{if(t.dims.length!==3&&t.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(t.dims.length===5&&(t.dims[2]!==r.numHeads||t.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');b=3}let M=0,$=!1,y=r.kvNumHeads?_*r.kvNumHeads:p;if(n&&n.dims.length>0){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(d!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');y=n.dims[2]}else{if(d!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');y=n.dims[1]*n.dims[3],$=!0}}let T=e.length>4?e[5]:void 0;if(T&&T.dims.length!==1&&T.dims[0]!==l)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:l,sequenceLength:c,pastSequenceLength:u,kvSequenceLength:d,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:p,vHiddenSize:y,headSize:_,vHeadSize:Math.floor(y/r.kvNumHeads),numHeads:r.numHeads,kvNumHeads:r.kvNumHeads,nReps:r.numHeads/r.kvNumHeads,pastPresentShareBuffer:!1,maskType:M,scale:r.scale,broadcastResPosBias:!1,passPastInKv:$,qkvFormat:b}},Ng=zt({perm:[0,2,1,3]}),mc=(e,r,t)=>{let s=r,n=t.kvNumHeads;return r.dims.length===3&&t.kvSequenceLength!==0&&(s=r.reshape([t.batchSize,t.kvSequenceLength,n,t.headSize]),s=e.compute(Yr(s,Ng.perm),{inputs:[s],outputs:[-1]})[0]),s},Vg=(e,r,t,s)=>{let n=7,o=["type","type"],a=[e*r],i=e*r,l=[{type:12,data:i},{type:12,data:r},{type:12,data:e}],c=p=>{let d=Pe("seq_lens",t.dataType,t.dims),u=Pe("total_seq_lens",s.dataType,s.dims),f=it("pos_ids",n,a),_=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${p.registerUniforms(_).declareVariables(d,u,f)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${u.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${d.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${f.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${f.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${f.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${r}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:l}),getShaderSource:c}},Uy=(e,r)=>{let t=jg(e.inputs,r);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let s=e.inputs[0],n=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,o=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,i=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,c=e.inputs.length>5?e.inputs[6]:void 0,p=t.kvNumHeads?t.kvNumHeads:t.numHeads,d=zt({axis:2,numOutputs:3,splitSizes:[t.numHeads*t.headSize,p*t.headSize,p*t.headSize]}),[u,f,_]=!n&&!o?e.compute(Qc([s],d),{inputs:[s],outputs:[-1,-1,-1]}):[s,n,o],v,I;if(r.doRotary){let y=e.compute(Vg(t.batchSize,t.sequenceLength,l,c),{inputs:[l,c],outputs:[-1]})[0],T=e.inputs[7],E=e.inputs[8],x=zt({interleaved:r.rotaryInterleaved!==0,numHeads:t.numHeads,rotaryEmbeddingDim:0,scale:r.scale}),S=[u,y,T,E],z=[-1];v=e.compute(da(S,x),{inputs:S,outputs:z})[0],S.splice(0,1,f);let O=zt({interleaved:r.rotaryInterleaved!==0,numHeads:t.kvNumHeads,rotaryEmbeddingDim:0,scale:r.scale});I=e.compute(da(S,O),{inputs:S,outputs:z})[0]}let b=Ho(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,r.doRotary?v:u,void 0,0),M=mc(e,r.doRotary?I:f,t),$=mc(e,_,t);Jo(e,b,M,$,void 0,void 0,a,i,void 0,t,l,c)}}),hc,Ug,Wg,Wy,Xx=Be(()=>{ft(),yt(),tn(),xt(),hc=(e,r,t,s,n,o,a,i)=>{let l=ir(o),c=l===1?"f32":`vec${l}f`,p=l===1?"vec2f":`mat2x${l}f`,d=n*a,u=64;d===1&&(u=256);let f=[n,a,o/l],_=[n,a,2],v=["rank","type","type"],I=[];I.push(...ct(f,_));let b=M=>{let $=Pe("x",r.dataType,3,l),y=Pe("scale",t.dataType,t.dims),T=Pe("bias",s.dataType,s.dims),E=it("output",1,3,2),x=[$,y,T,E];return`
  var<workgroup> workgroup_shared : array<${p}, ${u}>;
  const workgroup_size = ${u}u;
  ${M.declareVariables(...x)}
  ${M.mainStart(u)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${c}(0);
    var squared_sum = ${c}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${c}(${$.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${p}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${en("workgroup_shared[0][0]",l)} / f32(hight * ${l});
      let squared_sum_final = ${en("workgroup_shared[0][1]",l)} / f32(hight * ${l});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${i}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${i};${u}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:_,dataType:1}],dispatchGroup:{x:d},programUniforms:I}),getShaderSource:b},{inputs:[r,t,s],outputs:[-1]})[0]},Ug=(e,r,t)=>{let s=r[0].dims,n=s,o=2,a=s[0],i=s[1],l=Me.sizeFromDimension(s,o),c=ir(l),p=Me.size(n)/c,d=hc(e,r[0],r[1],r[2],a,l,i,t.epsilon),u=[a,i,l/c],f=[a,i],_=["type","none"],v=I=>{let b=Pe("x",r[0].dataType,u.length,c),M=Pe("scale_shift",1,f.length,2),$=it("output",r[0].dataType,u.length,c),y=[b,M,$];return`
  ${I.registerUniform("output_size","u32").declareVariables(...y)}
  ${I.mainStart()}
  ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${$.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${M.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${b.getByOffset("global_idx")} * ${$.type.value}(scale_shift.x) + ${$.type.value}(scale_shift.y);
      ${$.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${c}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:n,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},...ct(u,f,u)]}),getShaderSource:v},{inputs:[r[0],d]})},Wg=(e,r,t)=>{let s=r[0].dims,n=s,o=s[0],a=s[s.length-1],i=Me.sizeFromDimension(s,1)/a,l=ir(a),c=Me.size(n)/l,p=[{type:12,data:i},{type:12,data:Math.floor(a/l)}],d=["type","type"],u=!1,f=[0,s.length-1];for(let b=0;b<s.length-2;b++)u=u||s[b+1]!==1,f.push(b+1);u=u&&s[s.length-1]!==1;let _=u?e.compute(Yr(e.inputs[0],f),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:s.length},(b,M)=>s[f[M]])),v=hc(e,_,r[1],r[2],o,i,a,t.epsilon),I=b=>{let M=$r(r[0].dataType),$=l===1?"vec2f":`mat${l}x2f`,y=x=>{let S=x===0?"x":"y",z=l===1?"f32":`vec${l}f`;switch(l){case 1:return`${M}(${z}(scale.${S}))`;case 2:return`vec2<${M}>(${z}(scale[0].${S}, scale[1].${S}))`;case 4:return`vec4<${M}>(${z}(scale[0].${S}, scale[1].${S}, scale[2].${S}, scale[3].${S}))`;default:throw new Error(`Not supported compoents ${l}`)}},T=Pe("input",r[0].dataType,r[0].dims,l),E=it("output",r[0].dataType,n,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${T.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${$}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${b.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${y(0)}, ${y(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:n,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:p}),getShaderSource:I},{inputs:[r[0],v]})},Wy=(e,r)=>{r.format==="NHWC"?Wg(e,e.inputs,r):Ug(e,e.inputs,r)}}),Gg,Kg,Gy,Jx=Be(()=>{ft(),yt(),xt(),Gg=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Kg=(e,r,t)=>{let s=r.simplified,n=e[0].dims,o=e[1],a=!s&&e[2],i=n,l=Me.normalizeAxis(r.axis,n.length),c=Me.sizeToDimension(n,l),p=Me.sizeFromDimension(n,l),d=Me.size(o.dims),u=a?Me.size(a.dims):0;if(d!==p||a&&u!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${d} and bias size of ${u}`);let f=[];for(let T=0;T<n.length;++T)T<l?f.push(n[T]):f.push(1);let _=ir(p),v=["type","type"],I=[{type:12,data:c},{type:1,data:p},{type:12,data:Math.floor(p/_)},{type:1,data:r.epsilon}];a&&v.push("type");let b=t>1,M=t>2,$=T=>{let E=$r(e[0].dataType),x=[Pe("x",e[0].dataType,e[0].dims,_),Pe("scale",o.dataType,o.dims,_)];a&&x.push(Pe("bias",a.dataType,a.dims,_)),x.push(it("output",e[0].dataType,i,_)),b&&x.push(it("mean_data_output",1,f)),M&&x.push(it("inv_std_output",1,f));let S=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${T.registerUniforms(S).declareVariables(...x)}
  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${jc("f32",_)};
    var mean_square_vector = ${jc("f32",_)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${to(E,_,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${en("mean_vector",_)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${en("mean_square_vector",_)} / uniforms.norm_size ${s?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${to(E,_,"x[j + offset]")};
      let f32scale = ${to(E,_,"scale[j]")};
      output[j + offset] = ${x[0].type.value}((f32input ${s?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${to(E,_,"bias[j]")}`:""}
      );
    }

    ${b?"mean_data_output[global_idx] = mean":""};
    ${M?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},y=[{dims:i,dataType:e[0].dataType}];return b&&y.push({dims:f,dataType:1}),M&&y.push({dims:f,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${t};${s}`,inputDependencies:v},getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(c/64)},programUniforms:I}),getShaderSource:$}},Gy=(e,r)=>{Gg(e.inputs),e.compute(Kg(e.inputs,r,e.outputCount))}}),Hg,Ky,Yx=Be(()=>{yt(),bu(),yu(),Hg=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ky=e=>{Hg(e.inputs);let r=ro.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!r)throw new Error("Can't use matmul on the given tensors");let t=r[r.length-1],s=e.inputs[0].dims[e.inputs[0].dims.length-1];if(t<8&&s<8)e.compute(Mu(e.inputs,{activation:""},r));else{let n=r[r.length-2],o=Me.size(e.inputs[0].dims.slice(0,-2)),a=Me.size(e.inputs[1].dims.slice(0,-2));if(o!==1&&n===1&&a===1){let i=e.inputs[0].reshape([1,o,s]),l=e.inputs[1].reshape([1,s,t]),c=[1,o,t],p=[i,l];e.compute(ua(p,{activation:""},r,c),{inputs:p})}else e.compute(ua(e.inputs,{activation:""},r))}}}),qg,Qg,Xg,Hy,qy,Zx=Be(()=>{ft(),yt(),lr(),xt(),qg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let t=e[0],s=t.dims.length;if(t.dims[s-1]!==r.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((r.k+r.blockSize-1)/r.blockSize),o=r.blockSize/8*r.bits,a=e[1];if(!Me.areEqual(a.dims,[r.n,n,o]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let i=e[2].dims;if(Me.size(i)!==r.n*n)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,c=r.bits>4?r.n*n:r.n*Math.floor((n+1)/2);if(Me.size(l)!==c)throw new Error("zeroPoints input size error.")}},Qg=(e,r)=>{let t=e[0].dims,s=t.length,n=t[s-2],o=r.k,a=r.n,i=t.slice(0,s-2),l=Me.size(i),c=e[1].dims[2]/4,p=e[0].dataType,d=ir(r.k),u=ir(c),f=ir(a),_=i.concat([n,a]),v=n>1&&a/f%2===0?2:1,I=Me.size(_)/f/v,b=64,M=[],$=[l,n,o/d],y=Me.convertShape(e[1].dims).slice();y.splice(-1,1,c/u),M.push(...ct($)),M.push(...ct(y)),M.push(...ct(e[2].dims)),e.length===4&&M.push(...ct(Me.convertShape(e[3].dims)));let T=[l,n,a/f];M.push(...ct(T));let E=x=>{let S=$.length,z=Pe("a",e[0].dataType,S,d),O=Pe("b",12,y.length,u),K=Pe("scales",e[2].dataType,e[2].dims.length),H=[z,O,K],D=e.length===4?Pe("zero_points",12,e[3].dims.length):void 0;D&&H.push(D);let Z=T.length,Q=it("output",e[0].dataType,Z,f),Y=$r(e[0].dataType),re=(()=>{switch(d){case 1:return`array<${Y}, 8>`;case 2:return`mat4x2<${Y}>`;case 4:return`mat2x4<${Y}>`;default:throw new Error(`${d}-component is not supported.`)}})(),te=()=>{let B=`
          // reuse a data
            var input_offset = ${z.indicesToOffset(`${z.type.indices}(batch, row, word_offset)`)};
            var a_data: ${re};
            for (var j: u32 = 0; j < ${8/d}; j++) {
              a_data[j] = ${z.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let F=0;F<f*v;F++)B+=`
            b_value = ${u===1?`b${F}_data`:`b${F}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${re}(${Array.from({length:4},(G,j)=>`${Y}(b_value_lower[${j}]), ${Y}(b_value_upper[${j}])`).join(", ")});
            b_dequantized_values = ${d===1?`${re}(${Array.from({length:8},(G,j)=>`(b_quantized_values[${j}] - ${D?`zero_point${F}`:"zero_point"}) * scale${F}`).join(", ")});`:`(b_quantized_values - ${re}(${Array(8).fill(`${D?`zero_point${F}`:"zero_point"}`).join(",")})) * scale${F};`};
            workgroup_shared[local_id.x * ${v} + ${Math.floor(F/f)}]${f>1?`[${F%f}]`:""} += ${Array.from({length:8/d},(G,j)=>`${d===1?`a_data[${j}] * b_dequantized_values[${j}]`:`dot(a_data[${j}], b_dequantized_values[${j}])`}`).join(" + ")};
          `;return B},ce=()=>{let B=`
            var col_index = col * ${f};
            ${D?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Y}(8);`}
            `;for(let F=0;F<f*v;F++)B+=`
            let scale${F} = ${K.getByOffset("col_index * nBlocksPerCol + block")};
            ${D?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${D.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${F} = ${Y}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return B},ue=()=>{let B=`col_index = col * ${f};`;for(let F=0;F<f*v;F++)B+=`
            let b${F}_data = ${O.getByIndices(`${O.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return B+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${re};
            var b_dequantized_values: ${re};`,B};return`
        var<workgroup> workgroup_shared: array<${Q.type.value}, ${v*b}>;
        ${x.declareVariables(...H,Q)}
        ${x.mainStart([b,1,1])}
          let output_indices = ${Q.offsetToIndices(`(global_idx / ${b}) * ${v}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${b}) {
            //process one block
            var word_offset: u32 = block * ${r.blockSize/d};
            ${ce()}
            for (var word: u32 = 0; word < ${c}; word += ${u}) {
              ${ue()}
              for (var i: u32 = 0; i < ${u}; i++) {
                ${te()}
                word_offset += ${8/d};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${v}) {
            var output_value: ${Q.type.value} = ${Q.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${b}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${v};
            }
            ${Q.setByIndices(`${Q.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${r.blockSize};${r.bits};${d};${u};${f};${v};${b}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:_,dataType:p}],dispatchGroup:{x:I},programUniforms:M}),getShaderSource:E}},Xg=(e,r)=>{let t=e[0].dims,s=t.length,n=t[s-2],o=r.k,a=r.n,i=t.slice(0,s-2),l=Me.size(i),c=e[1].dims[2]/4,p=e[0].dataType,d=ir(r.k),u=ir(c),f=i.concat([n,a]),_=128,v=a%8===0?8:a%4===0?4:1,I=_/v,b=I*u*8,M=b/d,$=b/r.blockSize,y=Me.size(f)/v,T=[],E=[l,n,o/d],x=Me.convertShape(e[1].dims).slice();x.splice(-1,1,c/u),T.push(...ct(E)),T.push(...ct(x)),T.push(...ct(e[2].dims)),e.length===4&&T.push(...ct(Me.convertShape(e[3].dims)));let S=[l,n,a];T.push(...ct(S));let z=O=>{let K=E.length,H=Pe("a",e[0].dataType,K,d),D=Pe("b",12,x.length,u),Z=Pe("scales",e[2].dataType,e[2].dims.length),Q=[H,D,Z],Y=e.length===4?Pe("zero_points",12,e[3].dims.length):void 0;Y&&Q.push(Y);let re=S.length,te=it("output",e[0].dataType,re),ce=$r(e[0].dataType),ue=()=>{switch(d){case 1:return`
          let a_data0 = vec4<${ce}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${ce}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${ce}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${ce}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${d}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${H.type.value}, ${M}>;
        var<workgroup> inter_results: array<array<${te.type.value}, ${I}>, ${v}>;
        ${O.declareVariables(...Q,te)}
        ${O.mainStart([I,v,1])}
          let output_indices = ${te.offsetToIndices(`workgroup_index * ${v}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${$} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${M};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${M}; a_offset += ${_})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${H.getByIndices(`${H.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${H.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${$} + local_id.x;
            ${Y?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${Y.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${ce}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${ce}(8);`}
            let scale = ${Z.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${D.getByIndices(`${D.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${r.blockSize/d};
            for (var i: u32 = 0; i < ${u}; i++) {
              ${ue()}
              let b_value = ${u===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${ce}>(${Array.from({length:4},(B,F)=>`${ce}(b_value_lower[${F}]), ${ce}(b_value_upper[${F}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${ce}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(B,F)=>`${`dot(a_data${F}, b_dequantized_values[${F}])`}`).join(" + ")};
              word_offset += ${8/d};
            }
            workgroupBarrier();
          }

          if (local_idx < ${v}) {
            var output_value: ${te.type.value} = ${te.type.value}(0);
            for (var b = 0u; b < ${I}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${te.setByIndices(`${te.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${r.blockSize};${d};${u};${I};${v}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:p}],dispatchGroup:{x:y},programUniforms:T}),getShaderSource:z}},Hy=(e,r)=>{qg(e.inputs,r),r.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(Xg(e.inputs,r)):e.compute(Qg(e.inputs,r))},qy=e=>zt(e)}),Jg,Yg,Zg,ew,tw,rw,sw,nw,Qy,eT=Be(()=>{ft(),yt(),xt(),Jg=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let r=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(r=e[3].dims[0]*2===e[1].dims[0]),!r)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Yg=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
            k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${at("uniforms.x_shape",n,r)})) {
              break;
            }
            offset += k * i32(${at("uniforms.x_strides",n,r)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${s}
            value = x[offset];
          }
      `},Zg=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${at("uniforms.x_shape",n,r)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${at("uniforms.x_shape",n,r)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},ew=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${at("uniforms.x_shape",n,r)})) {
                  k = i32(${at("uniforms.x_shape",n,r)}) - 1;
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},tw=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0)  {
                  k += i32(${at("uniforms.x_shape",n,r)}]);
                }
                if (k >= i32(${at("uniforms.x_shape",n,r)})) {
                  k -= i32(${at("uniforms.x_shape",n,r)});
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},rw=(e,r,t)=>{switch(t.mode){case 0:return Yg(e,r,t.pads.length);case 1:return Zg(e,r,t.pads.length);case 2:return ew(e,r,t.pads.length);case 3:return tw(e,r,t.pads.length);default:throw new Error("Invalid mode")}},sw=(e,r)=>{let t=Me.padShape(e[0].dims.slice(),r.pads),s=e[0].dims,n=Me.size(t),o=[{type:12,data:n},{type:6,data:r.pads}],a=e.length>=3&&e[2].data;r.mode===0&&o.push({type:a?e[2].dataType:1,data:r.value}),o.push(...ct(e[0].dims,t));let i=["rank"],l=c=>{let p=it("output",e[0].dataType,t.length),d=Pe("x",e[0].dataType,s.length),u=d.type.value,f=rw(p,s.length,r),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:r.pads.length}];return r.mode===0&&_.push({name:"constant_value",type:a?u:"f32"}),`
            ${c.registerUniforms(_).declareVariables(d,p)}
            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${u}(0);
            ${f}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${r.mode}${a}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Me.size(t)/64)},programUniforms:o}),getShaderSource:l}},nw=(e,r)=>{if(e.length>1){let t=e[1].getBigInt64Array(),s=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let i=e[3].getBigInt64Array();for(let l=0;l<i.length;l++)o[Number(i[l])]=Number(t[l]),o[Number(i[l])+n]=Number(t[l+i.length])}else t.forEach((i,l)=>o[Number(l)]=Number(i));let a=[];return o.forEach(i=>a.push(i)),{mode:r.mode,value:s,pads:a}}else return r},Qy=(e,r)=>{Jg(e.inputs);let t=nw(e.inputs,r);e.compute(sw(e.inputs,t),{inputs:[0]})}}),Bo,_c,fc,gc,wc,ow,iw,Mc,bc,Xy,Jy,yc,Yy,Zy,vc,e0,t0,r0,s0,tT=Be(()=>{Ts(),ft(),yt(),xt(),Bo=e=>{if(Yt.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},_c=(e,r,t)=>{let s=r.format==="NHWC",n=e.dims.slice();s&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(r,"dilations"),a=r.kernelShape.slice(),i=r.strides.slice(),l=o?r.dilations.slice():[],c=r.pads.slice();la.adjustPoolAttributes(t,n,a,i,l,c);let p=la.computePoolOutputShape(t,n,i,l,a,c,r.autoPad),d=Object.assign({},r);o?Object.assign(d,{kernelShape:a,strides:i,pads:c,dilations:l,cacheKey:r.cacheKey}):Object.assign(d,{kernelShape:a,strides:i,pads:c,cacheKey:r.cacheKey});let u=p.slice();return u.push(u.splice(1,1)[0]),[d,s?u:p]},fc=(e,r)=>{let t=r.format==="NHWC",s=Me.size(e),n=Me.size(r.kernelShape),o=[{type:12,data:s},{type:12,data:n}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(r.kernelShape.length<=2){let i=r.kernelShape[r.kernelShape.length-1],l=r.strides[r.strides.length-1],c=r.pads[r.pads.length/2-1],p=r.pads[r.pads.length-1],d=!!(c+p);o.push({type:12,data:i},{type:12,data:l},{type:12,data:c},{type:12,data:p}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let u=!1;if(r.kernelShape.length===2){let f=r.kernelShape[r.kernelShape.length-2],_=r.strides[r.strides.length-2],v=r.pads[r.pads.length/2-2],I=r.pads[r.pads.length-2];u=!!(v+I),o.push({type:12,data:f},{type:12,data:_},{type:12,data:v},{type:12,data:I}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,a,!0,d,u]}else{if(t)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let i=Me.computeStrides(r.kernelShape);o.push({type:12,data:i},{type:12,data:r.pads},{type:12,data:r.strides}),a.push({name:"kernelStrides",type:"u32",length:i.length},{name:"pads",type:"u32",length:r.pads.length},{name:"strides",type:"u32",length:r.strides.length});let l=r.pads.reduce((c,p)=>c+p);return[o,a,!!l,!1,!1]}},gc=(e,r,t,s,n,o,a,i,l,c,p,d)=>{let u=n.format==="NHWC",f=r.type.value,_=it("output",r.type.tensor,s);if(n.kernelShape.length<=2){let v="",I="",b="",M=t-(u?2:1);if(p?v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${M}] = indices[${M}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${M}] < 0 || xIndices[${M}]
                      >= uniforms.x_shape[${M}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${o}
                }`:v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${M}] = indices[${M}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let $=t-(u?3:2);d?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${$}] = indices[${$}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${$}] < 0 || xIndices[${$}] >= uniforms.x_shape[${$}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${$}] = indices[${$}] * uniforms.sh - uniforms.phStart + j;
                `,b=`
              }
            `}return`
            ${e.registerUniforms(l).declareVariables(r,_)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${_.offsetToIndices("global_idx")};
              var xIndices = ${_.offsetToIndices("global_idx")};

              var value = ${f}(${i});
              var pad = 0;
              ${I}
              ${v}
              ${b}
              ${a}

              output[global_idx] = value;
            }`}else{if(u)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=n.kernelShape.length,I=n.pads.length,b="";return c?b=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${r.indicesToOffset("xIndices")}];
                ${o}
              }`:b=`
              }
              let x_val = x[${r.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(l).declareVariables(r,_)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${_.offsetToIndices("global_idx")};
              var xIndices = ${_.offsetToIndices("global_idx")};

              var offsets: array<u32, ${v}>;

              var value = ${f}(${i});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${v-1}u; j++) {
                  offsets[j] = offset / ${at("uniforms.kernelStrides","j",v)};
                  offset -= offsets[j] * ${at("uniforms.kernelStrides","j",v)};
                }
                offsets[${v-1}] = offset;

                isPad = false;
                for (var j = ${t-v}u; j < ${t}u; j++) {
                  xIndices[j] = indices[j] * ${at("uniforms.strides",`j - ${t-v}u`,v)}
                    + offsets[j - ${t-v}u] - ${at("uniforms.pads","j - 2u",I)};
                  ${b}
              }
              ${a}

              output[global_idx] = value;
            }`}},wc=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,ow=e=>`${wc(e)};${e.countIncludePad}`,iw=e=>`${wc(e)};${e.storageOrder};${e.dilations}`,Mc=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),bc=(e,r,t,s)=>{let[n,o]=_c(r,s,t),a=Pe("x",r.dataType,r.dims.length),i=a.type.value,l="value += x_val;",c="";n.countIncludePad?c+=`value /= ${i}(uniforms.kernelSize);`:c+=`value /= ${i}(i32(uniforms.kernelSize) - pad);`;let[p,d,u,f,_]=fc(o,n);p.push(...ct(r.dims,o));let v=["rank"];return{name:e,shaderCache:{hint:`${s.cacheKey};${u};${f};${_}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:o,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(Me.size(o)/64)},programUniforms:p}),getShaderSource:I=>gc(I,a,r.dims.length,o.length,n,l,c,0,d,u,f,_)}},Xy=e=>{let r=e.count_include_pad!==0,t=Mc(e);if(t.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let s={countIncludePad:r,...t,cacheKey:""};return{...s,cacheKey:ow(s)}},Jy=(e,r)=>{Bo(e.inputs),e.compute(bc("AveragePool",e.inputs[0],!1,r))},yc={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Yy=e=>{let r=e.format;return{format:r,...yc,cacheKey:r}},Zy=(e,r)=>{Bo(e.inputs),e.compute(bc("GlobalAveragePool",e.inputs[0],!0,r))},vc=(e,r,t,s)=>{let[n,o]=_c(r,s,t),a=`
      value = max(x_val, value);
    `,i="",l=Pe("x",r.dataType,r.dims.length),c=["rank"],[p,d,u,f,_]=fc(o,n);return p.push(...ct(r.dims,o)),{name:e,shaderCache:{hint:`${s.cacheKey};${u};${f};${_}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(Me.size(o)/64)},programUniforms:p}),getShaderSource:v=>gc(v,l,r.dims.length,o.length,n,a,i,r.dataType===10?-65504:-1e5,d,u,f,_)}},e0=(e,r)=>{Bo(e.inputs),e.compute(vc("MaxPool",e.inputs[0],!1,r))},t0=e=>{let r=e.storage_order,t=e.dilations,s=Mc(e);if(r!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(s.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:r,dilations:t,...s,cacheKey:""};return{...n,cacheKey:iw(n)}},r0=e=>{let r=e.format;return{format:r,...yc,cacheKey:r}},s0=(e,r)=>{Bo(e.inputs),e.compute(vc("GlobalMaxPool",e.inputs[0],!0,r))}}),aw,lw,n0,o0,rT=Be(()=>{ft(),yt(),lr(),xt(),aw=(e,r)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((t,s)=>t===e[2].dims[s]).reduce((t,s)=>t&&s,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(r.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((n,o)=>o===r.axis||n===e[0].dims[o]).reduce((n,o)=>n&&o,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let t=e[0].dims[r.axis],s=e[1].dims[r.axis];if(r.blockSize<Math.ceil(t/s)||r.blockSize>Math.ceil(t/(s-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},lw=(e,r)=>{let t=Me.normalizeAxis(r.axis,e[0].dims.length),s=e[0].dataType,n=s===3,o=e[0].dims,a=e[1].dataType,i=Me.size(o),l=s===3||s===2,c=l?[Math.ceil(Me.size(e[0].dims)/4)]:e[0].dims,p=e[1].dims,d=e.length>2?e[2]:void 0,u=d?l?[Math.ceil(Me.size(d.dims)/4)]:d.dims:void 0,f=p.length===0||p.length===1&&p[0]===1,_=f===!1&&p.length===1,v=ir(i),I=f&&(!l||v===4),b=I?v:1,M=I&&!l?v:1,$=Pe("input",l?12:s,c.length,M),y=Pe("scale",a,p.length),T=d?Pe("zero_point",l?12:s,u.length):void 0,E=it("output",a,o.length,b),x=[$,y];T&&x.push(T);let S=[c,p];d&&S.push(u);let z=[{type:12,data:i/b},{type:12,data:t},{type:12,data:r.blockSize},...ct(...S,o)],O=K=>{let H=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${K.registerUniforms(H).declareVariables(...x,E)}
      ${K.mainStart()}
          ${K.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${E.offsetToIndices("global_idx")};

          // Set input x
          ${l?`
            let input = ${$.getByOffset("global_idx / 4")};
            let x_vec = ${n?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${b===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${$.getByOffset("global_idx")};`};

          // Set scale input
          ${f?`let scale_value= ${y.getByOffset("0")}`:_?`
            let scale_index = ${E.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${y.getByOffset("scale_index")};`:`
            var scale_indices: ${y.type.indices} = output_indices;
            let index = ${y.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${y.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${y.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${T?f?l?`
                let zero_point_input = ${T.getByOffset("0")};
                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${T.getByOffset("0")}`:_?l?`
                let zero_point_index = ${E.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${T.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${E.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${T.getByOffset("zero_point_index")};`:l?`
                let zero_point_offset = ${y.indicesToOffset("scale_indices")};
                let zero_point_input = ${T.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${T.getByIndices("scale_indices")};`:`let zero_point_value = ${l?n?"i32":"u32":$.type.value}(0);`};
      // Compute and write output
      ${E.setByOffset("global_idx",`${E.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:r.cacheKey,inputDependencies:T?["rank","rank","rank"]:["rank","rank"]},getShaderSource:O,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(i/b/64),y:1,z:1},programUniforms:z})}},n0=(e,r)=>{aw(e.inputs,r),e.compute(lw(e.inputs,r))},o0=e=>zt({axis:e.axis,blockSize:e.blockSize})}),cw,uw,i0,sT=Be(()=>{Ts(),ft(),xt(),cw=(e,r,t)=>{let s=e===r,n=e<r&&t<0,o=e>r&&t>0;if(s||n||o)throw new Error("Range these inputs' contents are invalid.")},uw=(e,r,t,s)=>{let n=Math.abs(Math.ceil((r-e)/t)),o=[n],a=n,i=[{type:12,data:a},{type:s,data:e},{type:s,data:t},...ct(o)],l=c=>{let p=it("output",s,o.length),d=p.type.value,u=[{name:"outputSize",type:"u32"},{name:"start",type:d},{name:"delta",type:d}];return`
        ${c.registerUniforms(u).declareVariables(p)}
        ${c.mainStart()}
        ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${d}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${s}`},getShaderSource:l,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:i})}},i0=e=>{let r=0,t=0,s=0;e.inputs[0].dataType===6?(r=e.inputs[0].getInt32Array()[0],t=e.inputs[1].getInt32Array()[0],s=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(r=e.inputs[0].getFloat32Array()[0],t=e.inputs[1].getFloat32Array()[0],s=e.inputs[2].getFloat32Array()[0]),Yt.webgpu.validateInputContent&&cw(r,t,s),e.compute(uw(r,t,s,e.inputs[0].dataType),{inputs:[]})}}),dw,xc,Tc,pw,a0,l0,nT=Be(()=>{ft(),yt(),lr(),xt(),dw=(e,r,t,s)=>{if(e!=="none"&&s!=="i32"&&s!=="u32"&&s!=="f32")throw new Error(`Input ${s} is not supported with reduction ${e}.`);let n=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,o=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${r}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${r}=${t};`;case"add":return s==="i32"||s==="u32"?`atomicAdd(&${r}, bitcast<${s}>(${t}));`:`
              ${n}bitcast<${s}>(oldValue) + (${t})${o}`;case"max":return s==="i32"||s==="u32"?`atomicMax(&${r}, bitcast<${s}>(${t}));`:`
                ${n}max(bitcast<f32>(oldValue), (${t}))${o}`;case"min":return s==="i32"||s==="u32"?`atomicMin(&${r}, bitcast<${s}>(${t}));`:`${n}min(bitcast<${s}>(oldValue), (${t}))${o}`;case"mul":return`${n}(bitcast<${s}>(oldValue) * (${t}))${o}`;default:throw new Error(`Reduction ${e} is not supported.`)}},xc=(e,r)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${r?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${r?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,Tc=(e,r,t)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${t?"global_idx":"idx"} + i];
        ${dw(e.reduction,"output[data_offset + i]","value",r)}
      }`,pw=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t,o=1,a=Math.ceil(Me.size(s)/o),i=s[s.length-1],l=Me.sizeFromDimension(t,i),c=Me.sizeFromDimension(s,0)/i,p=[{type:12,data:a},{type:12,data:i},{type:12,data:l},...ct(e[1].dims,e[2].dims,n)],d=u=>{let f=Pe("indices",e[1].dataType,e[1].dims.length),_=Pe("updates",e[2].dataType,e[2].dims.length,o),v=r.reduction!=="none"&&r.reduction!==""?LM("output",e[0].dataType,n.length):it("output",e[0].dataType,n.length,o);return`
      ${u.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(f,_,v)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${r.reduction==="none"}) {
    for (var i = 0; i < ${c}; i = i + 1) {
      for (var j = i + 1; j < ${c}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${r.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${c}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${xc(t.length,!1)}
      }
      ${Tc(r,v.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${xc(t.length,!0)}
  }
  ${Tc(r,v.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${r.cacheKey}_${r.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:d}},a0=e=>zt({reduction:e.reduction}),l0=(e,r)=>{e.compute(pw(e.inputs,r),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),mw,hw,_w,Ec,fw,gw,ww,Mw,bw,yw,vw,xw,Pc,Tw,Ew,Pw,Cw,Sw,c0,u0,oT=Be(()=>{ft(),yt(),lr(),xt(),mw=(e,r)=>{if(e.every(t=>t>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(r.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(r.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},hw=(e,r,t)=>{r.every(n=>n>=0&&n<t||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let s=new Array(t).fill(1);return r.forEach((n,o)=>s[n]=e[o]),s},_w=(e,r,t,s,n,o)=>{let[a,i,l]=t>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(p=>o.push(p));else if(r.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(i>0&&e.length>i&&e[i].dims.length===1&&e[i].dims[0]>0){if(e[i].getFloat32Array().forEach(p=>s.push(p)),s.length!==0&&s.length!==c&&t>=18&&s.length!==r.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");mw(s,r),r.axes.length>0&&hw(s,r.axes,c).forEach((p,d)=>s[d]=p)}if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0&&(e[l].getBigInt64Array().forEach(p=>n.push(Number(p))),n.length!==0&&n.length!==c&&t>=18&&n.length!==r.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(r.axes.length>0){if(s.length!==0&&s.length!==r.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==0&&n.length!==r.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof s<"u"&&typeof n<"u"&&s.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},Ec=(e,r,t,s)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${r});
  let whole = ${s}(big / (${t}));
  let fract = ${s}(big % (${t})) / ${s}(${t});
  return whole + fract;
`,fw=(e,r)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${r} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${r}(xResized) / ${r}(xScale);
          } else {
            ${Ec("xResized","lengthOriginal","lengthResized",r)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${r}(xResized) + 0.5) / ${r}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${r}(xResized) + 0.5) / ${r}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${Ec("xResized","lengthOriginal - 1","lengthResized - 1",r)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${r}(roiStart) * ${r}(lengthOriginal - 1) +
                        (${r}(xResized) * ${r}(roiEnd - roiStart) * ${r}(lengthOriginal - 1)) /
                        ${r}(lengthResized - 1);
                  } else {
                    return 0.5 * ${r}(roiStart + roiEnd) * ${r}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${r}xScale * ${r}(lengthResized);
                  const adjustment = ${r}(lengthResized) / outputWidth;
                  const center = ${r}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;case"half_pixel":return`return ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",gw=(e,r,t)=>`fn getNearestPixelFromOriginal(xOriginal: ${t}, isDownSample: bool) -> ${t} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(r<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",ww=(e,r,t)=>{let s=new Array(t).fill(0).concat(new Array(t).fill(1)),n=e.length===0?s:e.slice();return r.length>0?(r.forEach((o,a)=>{s[o]=n[a],s[a+t]=n[r.length+a]}),s):n},Mw=(e,r,t,s)=>{let n=[];if(t.length>0)if(s.length>0){if(e.forEach(o=>n.push(o)),Math.max(...s)>e.length)throw new Error("axes is out of bound");s.forEach((o,a)=>n[o]=t[a])}else t.forEach(o=>n.push(o));else{if(r.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,a)=>Math.round(o*r[a]))}return n},bw=(e,r,t)=>{let s=(()=>{switch(t.keepAspectRatioPolicy){case"not_larger":return t.axes.length>0?Math.min(...t.axes.map(o=>r[o]),Number.MAX_VALUE):Math.min(...r,Number.MAX_VALUE);case"not_smaller":return t.axes.length>0?Math.max(...t.axes.map(o=>r[o]),Number.MIN_VALUE):Math.max(...r,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${t.keepAspectRatioPolicy} is not supported`)}})();r.fill(1,0,r.length);let n=e.slice();return t.axes.length>0?(t.axes.forEach(o=>r[o]=s),t.axes.forEach(o=>n[o]=Math.round(e[o]*r[o]))):(r.fill(s,0,r.length),n.forEach((o,a)=>n[a]=Math.round(o*r[a]))),n},yw=(e,r,t,s,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${t.length}> {
      var original_indices: array<${e.type.value}, ${t.length}>;
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${at("uniforms.scales","i",s)};
        var roi_low = ${at("uniforms.roi","i",n)};
        var roi_hi = ${at("uniforms.roi",`i + ${r.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${at("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${at("uniforms.output_shape","i",t.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,vw=(e,r,t,s,n,o,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${s.length}; i++) {
        var output_index = ${r.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${at("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${at("uniforms.roi","i",o)};
          var roi_hi = ${at("uniforms.roi",`i + ${t.length}`,o)};
          var input_shape_i = ${at("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${at("uniforms.output_shape","i",s.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${r.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${r.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,xw=(e,r)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${at("uniforms.input_shape","i",r.length)}) {
          return false;
        }
      }
      return true;
    }`,Pc=(e,r,t,s)=>e.rank>s?`
    ${e.indicesSet("input_indices",r,"channel")};
    ${e.indicesSet("input_indices",t,"batch")};
`:"",Tw=(e,r,t,s,n)=>{let[o,a,i,l]=t.length===2?[-1,0,1,-1]:[0,2,3,1],c=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${c} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${t[i]} - 1))`)};
      ${Pc(e,l,o,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${r.type.indices}) -> ${c} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${c} = originalIndices[${a}];
      var col:${c} = originalIndices[${i}];
      ${s?`if (row < 0 || row > (${t[a]} - 1) || col < 0 || col > (${t[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${t[a]} - 1));
      col = max(0, min(col, ${t[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${t.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${t.length>2?`u32(originalIndices[${o}])`:"0"};
      var x11: ${c} = getInputValue(batch, channel, row1, col1);
      var x12: ${c} = getInputValue(batch, channel, row1, col2);
      var x21: ${c} = getInputValue(batch, channel, row2, col1);
      var x22: ${c} = getInputValue(batch, channel, row2, col2);
      var dx1: ${c} = abs(row - ${c}(row1));
      var dx2: ${c} = abs(${c}(row2) - row);
      var dy1: ${c} = abs(col - ${c}(col1));
      var dy2: ${c} = abs(${c}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Ew=(e,r,t,s,n,o,a,i,l,c)=>{let p=t.length===2,[d,u]=p?[0,1]:[2,3],f=e.type.value,_=v=>{let I=v===d?"row":"col";return`
      fn ${I}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${r.type.indices}) -> ${f} {
        var output_index = ${r.indicesGet("output_indices",v)};
        var originalIdx: ${f} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[v]},
        ${s[v]}, ${t[v]}, ${o[v]}, ${o[v]} + ${t.length});
        var fractOriginalIdx: ${f} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${i} && (originalIdx < 0 || originalIdx > (${t[v]} - 1))) {
          return ${l};
        }
        var data: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${I}: ${f} = originalIdx + ${f}(i);
          if (${I} < 0 || ${I} >= ${t[v]}) {
            ${c?`coefs[i + 1] = 0.0;
                        continue;`:i?`return ${l};`:`${I} = max(0, min(${I}, ${t[v]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",v,`u32(${I})`)};
          data[i + 1] = ${v===d?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${_(d)};
    ${_(u)};
  fn getCubicInterpolationCoefs(s: ${f}) -> array<${f}, 4> {
    var absS = abs(s);
    var coeffs: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${f} = 1.0 - absS;
    var twoMinusAbsS: ${f} = 2.0 - absS;
    var onePlusAbsS: ${f} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${f}, 4>, coefs: array<${f}, 4>) -> ${f} {
    var coefsSum: ${f} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${r.type.indices}) -> ${f} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Pw=(e,r,t,s,n)=>{let[o,a,i,l,c]=t.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],p=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${p} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${t[i]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(width, ${t[l]} - 1))`)};
      ${Pc(e,c,o,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${r.type.indices}) -> ${p} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${p} = originalIndices[${a}];
      var height:${p} = originalIndices[${i}];
      var width:${p} = originalIndices[${l}];
      ${s?`if (depth < 0 || depth > (${t[a]} - 1) || height < 0 || height > (${t[i]} - 1) || width < 0 || (width > ${t[l]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${t[a]} - 1));
      height = max(0, min(height, ${t[i]} - 1));
      width = max(0, min(width, ${t[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${t.length>3?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${t.length>3?`u32(originalIndices[${o}])`:"0"};

      var x111: ${p} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${p} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${p} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${p} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${p} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${p} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${p} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${p} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${p} = abs(depth - ${p}(depth1));
      var dx2: ${p} = abs(${p}(depth2) - depth);
      var dy1: ${p} = abs(height - ${p}(height1));
      var dy2: ${p} = abs(${p}(height2) - height);
      var dz1: ${p} = abs(width - ${p}(width1));
      var dz2: ${p} = abs(${p}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Cw=(e,r,t,s,n,o)=>{let a=e.dims,i=ww(o,r.axes,a.length),l=Mw(a,s,n,r.axes),c=s.slice();s.length===0&&(c=a.map((M,$)=>M===0?1:l[$]/M),r.keepAspectRatioPolicy!=="stretch"&&(l=bw(a,c,r)));let p=it("output",e.dataType,l.length),d=Pe("input",e.dataType,a.length),u=Me.size(l),f=a.length===l.length&&a.every((M,$)=>M===l[$]),_=r.coordinateTransformMode==="tf_crop_and_resize",v=r.extrapolationValue,I=d.type.value,b=M=>`
      ${f?"":`
      ${fw(r.coordinateTransformMode,I)};
      ${(()=>{switch(r.mode){case"nearest":return`
              ${xw(d,a)};
              ${gw(r.nearestMode,t,I)};
              ${vw(d,p,a,l,c.length,i.length,_)};
              `;case"linear":return`
              ${yw(p,a,l,c.length,i.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${Tw(d,p,a,_,v)}`;if(a.length===3||a.length===5)return`${Pw(d,p,a,_,v)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${Ew(d,p,a,l,c,i,r.cubicCoeffA,_,r.extrapolationValue,r.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${M.registerUniform("output_size","u32").registerUniform("scales","f32",c.length).registerUniform("roi","f32",i.length).declareVariables(d,p)}
      ${M.mainStart()}
        ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${f?"output[global_idx] = input[global_idx];":`
        let output_indices = ${p.offsetToIndices("global_idx")};
        var input_indices: ${d.type.indices};
        ${(()=>{switch(r.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${d.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${r.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${r.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${r.cacheKey}|${t}|${c.length>0?r.mode==="cubic"?c:c.length:""}|${n.length>0?n:""}|${i.length>0?i:""}|${f}|${r.mode==="nearest"?a.length:a}`,inputDependencies:["rank"]},getShaderSource:b,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:[{type:12,data:u},{type:1,data:c},{type:1,data:i},...ct(a,l)]})}},Sw=e=>{let r=e.customDataBuffer;return new Uint32Array(r,r.byteOffset,1)[0]},c0=(e,r)=>{let t=[],s=[],n=[],o=Sw(e);if(r.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");_w(e.inputs,r,o,t,s,n),e.compute(Cw(e.inputs[0],r,o,t,s,n),{inputs:[0]})},u0=e=>{let r=e.antialias,t=e.axes,s=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,a=e.extrapolationValue,i=e.keepAspectRatioPolicy,l=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return zt({antialias:r,axes:t,coordinateTransformMode:s,cubicCoeffA:n,excludeOutside:o,extrapolationValue:a,keepAspectRatioPolicy:i,mode:l,nearestMode:c})}}),$w,kw,d0,iT=Be(()=>{ft(),yt(),xt(),$w=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let r=e[0],t=e[1],s=e[2];if(r.dataType!==t.dataType||r.dataType!==s.dataType)throw new Error("All inputs must have the same data type");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Input must be 2D or 3D");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=r.dims[r.dims.length-1],o=r.dims[r.dims.length-2];if(t.dims[t.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(t.dims[t.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(s.dims.length!==1)throw new Error("Gamma must be 1D");if(s.dims[s.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},kw=(e,r,t,s)=>{let n=r.simplified,o=e[0].dims,a=Me.size(o),i=o,l=a,c=o.slice(-1)[0],p=s?o.slice(0,-1).concat(1):[],d=!n&&e.length>3,u=e.length>4,f=s&&t>1,_=s&&t>2,v=t>3,I=64,b=ir(c),M=[{type:12,data:l},{type:12,data:b},{type:12,data:c},{type:1,data:r.epsilon}],$=T=>{let E=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],x=[Pe("x",e[0].dataType,e[0].dims,b),Pe("skip",e[1].dataType,e[1].dims,b),Pe("gamma",e[2].dataType,e[2].dims,b)];d&&x.push(Pe("beta",e[3].dataType,e[3].dims,b)),u&&x.push(Pe("bias",e[4].dataType,e[4].dims,b)),x.push(it("output",e[0].dataType,i,b)),f&&x.push(it("mean_output",1,p)),_&&x.push(it("inv_std_output",1,p)),v&&x.push(it("input_skip_bias_sum",e[0].dataType,i,b));let S=$r(e[0].dataType),z=$r(1,b);return`

      ${T.registerUniforms(E).declareVariables(...x)}
      var<workgroup> sum_shared : array<${z}, ${I}>;
      var<workgroup> sum_squared_shared : array<${z}, ${I}>;

      ${T.mainStart([I,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${I};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${I};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${I-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${u?"bias[offset1d + i]":S+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${v?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${to(S,b,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${I};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${en("sum",b)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${en("square_sum",b)} / f32(uniforms.hidden_size) ${n?"":"- mean * mean"} + uniforms.epsilon);
        ${f?"mean_output[global_idx] = mean;":""}
        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${n?"":`- ${S}(mean)`}) *
            ${S}(inv_std_dev) * gamma[offset1d + i]
            ${d?"+ beta[offset1d + i]":""};
        }
      }`},y=[{dims:i,dataType:e[0].dataType}];return t>1&&y.push({dims:p,dataType:1}),t>2&&y.push({dims:p,dataType:1}),t>3&&y.push({dims:o,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${b};${f};${_};${v}`,inputDependencies:e.map((T,E)=>"type")},getShaderSource:$,getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(l/c)},programUniforms:M})}},d0=(e,r)=>{$w(e.inputs);let t=[0];e.outputCount>1&&t.push(-3),e.outputCount>2&&t.push(-3),e.outputCount>3&&t.push(3),e.compute(kw(e.inputs,r,e.outputCount,!1),{outputs:t})}}),Iw,Ro,Aw,Cc,Fw,Ow,p0,m0,aT=Be(()=>{ft(),yt(),lr(),xt(),Iw=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");if(r.axes.length!==0){if(r.axes.length!==r.starts.length||r.axes.length!==r.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(r.starts.length!==r.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((t,s)=>{if(e[s+1].dataType!==6&&e[s+1].dataType!==7)throw new Error(`Input ${s} must be an array of int32 or int64`)})},Ro=(e,r)=>{let t=[];if(e.length>r)if(e[r].dataType===7)e[r].getBigInt64Array().forEach(s=>t.push(Number(s)));else if(e[r].dataType===6)e[r].getInt32Array().forEach(s=>t.push(Number(s)));else throw new Error(`Input ${r} must be an array of int32 or int64`);return t},Aw=(e,r)=>{if(e.length>1){let t=Ro(e,1),s=Ro(e,2),n=Ro(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),zt({starts:t,ends:s,axes:n})}else return r},Cc=(e,r,t,s,n)=>{let o=e;return e<0&&(o+=t[s[r]]),n[r]<0?Math.max(0,Math.min(o,t[s[r]]-1)):Math.max(0,Math.min(o,t[s[r]]))},Fw=(e,r,t)=>`fn calculateInputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${t.length}; i >= 0; i--) {
            let input_shape_i = ${at("uniforms.input_shape","i",t.length)};
            let steps_i = ${at("uniforms.steps","i",t.length)};
            let signs_i = ${at("uniforms.signs","i",t.length)};
            let starts_i = ${at("uniforms.starts","i",t.length)};
            var output_index = ${r.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Ow=(e,r)=>{let t=e[0].dims,s=Me.size(t),n=r.axes.length>0?Me.normalizeAxes(r.axes,t.length):[...Array(t.length).keys()],o=Ro(e,4);o.forEach(b=>b!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let a=r.starts.map((b,M)=>Cc(b,M,t,n,o)),i=r.ends.map((b,M)=>Cc(b,M,t,n,o));if(n.length!==a.length||n.length!==i.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==t.length)for(let b=0;b<t.length;++b)n.includes(b)||(a.splice(b,0,0),i.splice(b,0,t[b]),o.splice(b,0,1));let l=o.map(b=>Math.sign(b));o.forEach((b,M,$)=>{if(b<0){let y=(i[M]-a[M])/b,T=a[M],E=T+y*o[M];a[M]=E,i[M]=T,$[M]=-b}});let c=t.slice(0);n.forEach((b,M)=>{c[b]=Math.ceil((i[b]-a[b])/o[b])});let p={dims:c,dataType:e[0].dataType},d=it("output",e[0].dataType,c.length),u=Pe("input",e[0].dataType,e[0].dims.length),f=Me.size(c),_=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:o.length}],v=[{type:12,data:f},{type:12,data:a},{type:6,data:l},{type:12,data:o},...ct(e[0].dims,c)],I=b=>`
      ${b.registerUniforms(_).declareVariables(u,d)}
        ${Fw(u,d,t)}
        ${b.mainStart()}
          ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${d.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${a.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[p],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:v})}},p0=(e,r)=>{Iw(e.inputs,r);let t=Aw(e.inputs,r);e.compute(Ow(e.inputs,t),{inputs:[0]})},m0=e=>{let r=e.starts,t=e.ends,s=e.axes;return zt({starts:r,ends:t,axes:s})}}),Dw,Lw,h0,_0,lT=Be(()=>{ft(),yt(),lr(),tn(),xt(),Dw=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Lw=(e,r)=>{let t=e.inputs[0],s=t.dims,n=Me.size(s),o=s.length,a=Me.normalizeAxis(r.axis,o),i=a<s.length-1,l,c=[];i?(c=Array.from({length:o},(x,S)=>S),c[a]=o-1,c[o-1]=a,l=e.compute(Yr(t,c),{inputs:[t],outputs:[-1]})[0]):l=t;let p=l.dims,d=p[o-1],u=n/d,f=ir(d),_=d/f,v=64;u===1&&(v=256);let I=(x,S)=>S===4?`max(max(${x}.x, ${x}.y), max(${x}.z, ${x}.w))`:S===2?`max(${x}.x, ${x}.y)`:S===3?`max(max(${x}.x, ${x}.y), ${x}.z)`:x,b=Pe("x",l.dataType,l.dims,f),M=it("result",l.dataType,l.dims,f),$=b.type.value,y=$r(l.dataType)==="f32"?`var threadMax = ${$}(-3.402823e+38f);`:`var threadMax = ${$}(-65504.0h);`,T=x=>`
      var<workgroup> rowMaxShared : ${$};
      var<workgroup> rowSumShared : ${$};
      var<workgroup> threadShared : array<${$}, ${v}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${$} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${$}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${x.registerUniform("packedCols","i32").declareVariables(b,M)}
      ${x.mainStart(v)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${v};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${y}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${$}(${I("threadShared[0]",f)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${$}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${$}(${en("threadShared[0]",f)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,E=e.compute({name:"Softmax",shaderCache:{hint:`${f};${v}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:p,dataType:l.dataType}],dispatchGroup:{x:u},programUniforms:[{type:6,data:_}]}),getShaderSource:T},{inputs:[l],outputs:[i?-1:0]})[0];i&&e.compute(Yr(E,c),{inputs:[E]})},h0=(e,r)=>{Dw(e.inputs),Lw(e,r)},_0=e=>zt({axis:e.axis})}),Sc,zw,Bw,Rw,f0,cT=Be(()=>{ft(),yt(),xt(),Sc=e=>Array.from(e.getBigInt64Array(),Number),zw=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Sc(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Bw=(e,r)=>{let t=[];for(let s=0;s<e.length;++s)t.push(e[s]*r[s]);return t},Rw=(e,r)=>{let t=e[0].dims,s=r??Sc(e[1]),n=Bw(t,s),o=Me.size(n),a=e[0].dataType,i=Pe("input",a,t.length),l=it("output",a,n.length),c=p=>`
      const inputShape = ${i.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(i,l)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${i.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${i.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${i.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",i.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${s}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},...ct(e[0].dims,n)]}),getShaderSource:c}},f0=e=>{zw(e.inputs),e.compute(Rw(e.inputs),{inputs:[0]})}}),jw,Nw,g0,uT=Be(()=>{ft(),yt(),xt(),jw=(e,r,t,s,n)=>{let o=it("output_data",n,t.length,4),a=Pe("a_data",r[1].dataType,r[1].dims.length,4),i=Pe("b_data",r[2].dataType,r[2].dims.length,4),l=Pe("c_data",r[0].dataType,r[0].dims.length,4),c,p=(d,u,f)=>`select(${u}, ${d}, ${f})`;if(!s)c=o.setByOffset("global_idx",p(a.getByOffset("global_idx"),i.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let d=(u,f,_="")=>{let v=`a_data[index_a${f}][component_a${f}]`,I=`b_data[index_b${f}][component_b${f}]`,b=`bool(c_data[index_c${f}] & (0xffu << (component_c${f} * 8)))`;return`
            let output_indices${f} = ${o.offsetToIndices(`global_idx * 4u + ${f}u`)};
            let offset_a${f} = ${a.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let offset_b${f} = ${i.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let offset_c${f} = ${l.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let index_a${f} = offset_a${f} / 4u;
            let index_b${f} = offset_b${f} / 4u;
            let index_c${f} = offset_c${f} / 4u;
            let component_a${f} = offset_a${f} % 4u;
            let component_b${f} = offset_b${f} % 4u;
            let component_c${f} = offset_c${f} % 4u;
            ${u}[${f}] = ${_}(${p(v,I,b)});
          `};n===9?c=`
            var data = vec4<u32>(0);
            ${d("data",0,"u32")}
            ${d("data",1,"u32")}
            ${d("data",2,"u32")}
            ${d("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:c=`
            ${d("output_data[global_idx]",0)}
            ${d("output_data[global_idx]",1)}
            ${d("output_data[global_idx]",2)}
            ${d("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(l,a,i,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${c}
      }`},Nw=e=>{let r=e[1].dims,t=e[2].dims,s=e[0].dims,n=e[1].dataType,o=!(Me.areEqual(r,t)&&Me.areEqual(t,s)),a=r,i=Me.size(r);if(o){let c=ro.calcShape(ro.calcShape(r,t,!1),s,!1);if(!c)throw new Error("Can't perform where op on the given tensors");a=c,i=Me.size(a)}let l=Math.ceil(i/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:c=>jw(c,e,a,o,n),getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64/4)},programUniforms:[{type:12,data:l},...ct(s,r,t,a)]})}},g0=e=>{e.compute(Nw(e.inputs))}}),w0,dT=Be(()=>{Ex(),_u(),Px(),Cx(),Sx(),$x(),kx(),Dx(),zx(),Bx(),Rx(),jx(),Nx(),Vx(),Ux(),Wx(),Gx(),Kx(),Hx(),qx(),Qx(),Xx(),Jx(),Yx(),Zx(),zy(),eT(),tT(),rT(),sT(),nT(),hu(),oT(),Vy(),iT(),aT(),lT(),jy(),cT(),tn(),fu(),uT(),w0=new Map([["Abs",[db]],["Acos",[pb]],["Acosh",[mb]],["Add",[Hb]],["ArgMax",[ab,Vc]],["ArgMin",[ib,Vc]],["Asin",[hb]],["Asinh",[_b]],["Atan",[fb]],["Atanh",[gb]],["Attention",[lb]],["AveragePool",[Jy,Xy]],["BatchNormalization",[cb]],["BiasAdd",[ub]],["BiasSplitGelu",[Kb]],["Cast",[Mb,wb]],["Ceil",[yb]],["Clip",[bb]],["Concat",[sy,ny]],["Conv",[qc,Hc]],["ConvTranspose",[hy,my]],["Cos",[vb]],["Cosh",[xb]],["CumSum",[_y,fy]],["DepthToSpace",[gy,wy]],["DequantizeLinear",[n0,o0]],["Div",[qb]],["Einsum",[My,by]],["Elu",[Tb,Ko]],["Equal",[Qb]],["Erf",[Eb]],["Exp",[Pb]],["Expand",[yy]],["FastGelu",[vy]],["Floor",[Cb]],["FusedConv",[qc,Hc]],["Gather",[Ty,xy]],["GatherElements",[ky,$y]],["GatherBlockQuantized",[Cy,Sy]],["GatherND",[Ey,Py]],["Gelu",[Sb]],["Gemm",[Ay,Iy]],["GlobalAveragePool",[Zy,Yy]],["GlobalMaxPool",[s0,r0]],["Greater",[Zb]],["GreaterOrEqual",[ty]],["GridSample",[Fy,Oy]],["GroupQueryAttention",[Uy]],["HardSigmoid",[Lb,Db]],["InstanceNormalization",[Wy]],["LayerNormalization",[Gy]],["LeakyRelu",[$b,Ko]],["Less",[ey]],["LessOrEqual",[ry]],["Log",[Wb]],["MatMul",[Ky]],["MatMulNBits",[Hy,qy]],["MaxPool",[e0,t0]],["Mul",[Xb]],["MultiHeadAttention",[Ly,Dy]],["Neg",[Ib]],["Not",[kb]],["Pad",[Qy]],["Pow",[Jb]],["QuickGelu",[Gb,Ko]],["Range",[i0]],["Reciprocal",[Ab]],["ReduceMin",[tb]],["ReduceMean",[XM]],["ReduceMax",[eb]],["ReduceSum",[sb]],["ReduceProd",[rb]],["ReduceL1",[JM]],["ReduceL2",[YM]],["ReduceLogSum",[ob]],["ReduceLogSumExp",[ZM]],["ReduceSumSquare",[nb]],["Relu",[Fb]],["Resize",[c0,u0]],["RotaryEmbedding",[Ny]],["ScatterND",[l0,a0]],["Sigmoid",[Ob]],["Sin",[zb]],["Sinh",[Bb]],["Slice",[p0,m0]],["SkipLayerNormalization",[d0]],["Split",[By,Ry]],["Sqrt",[Rb]],["Softmax",[h0,_0]],["Sub",[Yb]],["Tan",[jb]],["Tanh",[Nb]],["ThresholdedRelu",[Ub,Ko]],["Tile",[f0]],["Transpose",[BM,RM]],["Where",[g0]]])}),M0,pT=Be(()=>{Ts(),Ns(),xt(),M0=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,r){this.repo.set(e,r)}run(e,r,t,s,n){xs(e.programInfo.name);let o=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let i=[];for(let c of r)i.push({binding:i.length,resource:{buffer:c.buffer}});for(let c of t)i.push({binding:i.length,resource:{buffer:c.buffer}});n&&i.push({binding:i.length,resource:n});let l=o.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:i,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let c={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:s};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(c)}a.setPipeline(e.computePipeline),a.setBindGroup(0,l),a.dispatchWorkgroups(...s),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),as(e.programInfo.name)}dispose(){}build(e,r){xs(e.name);let t=this.backend.device,s=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(c=>{t.features.has(c.feature)&&s.push(`enable ${c.extension};`)});let n=zM(r,this.backend.device.limits),o=e.getShaderSource(n),a=`${s.join(`
`)}
${n.additionalImplementations}
${o}`,i=t.createShaderModule({code:a,label:e.name});Ft("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let l=t.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:e.name});return as(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:n.variablesInfo}}normalizeDispatchGroupSize(e){let r=typeof e=="number"?e:e.x,t=typeof e=="number"?1:e.y||1,s=typeof e=="number"?1:e.z||1,n=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=n&&t<=n&&s<=n)return[r,t,s];let o=r*t*s,a=Math.ceil(Math.sqrt(o));if(a>n){if(a=Math.ceil(Math.cbrt(o)),a>n)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),b0={};no(b0,{WebGpuBackend:()=>y0});var Vw,Uw,Ww,y0,mT=Be(()=>{Ts(),ft(),Ns(),AM(),xx(),dT(),pT(),Vw=(e,r)=>{if(r.length!==e.length)throw new Error(`inputDependencies length ${r.length} is not equal to inputTensors length ${e.length}.`);let t=[];for(let s=0;s<e.length;++s){let n=e[s].dataType;switch(r[s]){case"none":{t.push("");break}case"type":{t.push(`${n}`);break}case"rank":{let o=e[s].dims.length;t.push(`${n};${o}`);break}case"dims":{let o=e[s].dims.join(",");t.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${r[s]}`)}}return t.join("|")},Uw=(e,r,t)=>{let s=e.name;return e.shaderCache?.hint&&(s+="["+e.shaderCache.hint+"]"),s+=":"+t+`:${Vw(r,e.shaderCache?.inputDependencies??new Array(r.length).fill("dims"))}`,s},Ww=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},y0=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,r){this.env=e;let t=[],s={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:t},n=o=>r.features.has(o)&&t.push(o)&&!0;n("chromium-experimental-timestamp-query-inside-passes")||n("timestamp-query"),n("shader-f16"),n("subgroups"),this.device=await r.requestDevice(s),this.adapterInfo=new Ww(r.info||await r.requestAdapterInfo()),this.gpuDataManager=DM(this),this.programManager=new M0(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,uu(e.logLevel,!!e.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;xs(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(e.getMappedRange()),t=this.pendingQueries.get(e);for(let s=0;s<r.length/2;s++){let n=t[s],o=n.kernelId,a=this.kernels.get(o),i=a.kernelType,l=a.kernelName,c=n.programName,p=n.inputTensorViews,d=n.outputTensorViews,u=r[s*2],f=r[s*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=u);let _=Number(u-this.queryTimeBase),v=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(_)||!Number.isSafeInteger(v))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:p.map(I=>({dims:I.dims,dataType:js(I.dataType)})),outputsMetadata:d.map(I=>({dims:I.dims,dataType:js(I.dataType)})),kernelId:o,kernelType:i,kernelName:l,programName:c,startTime:_,endTime:v});else{let I="";p.forEach((M,$)=>{I+=`input[${$}]: [${M.dims}] | ${js(M.dataType)}, `});let b="";d.forEach((M,$)=>{b+=`output[${$}]: [${M.dims}] | ${js(M.dataType)}, `}),console.log(`[profiling] kernel "${o}|${i}|${l}|${c}" ${I}${b}execution time: ${v-_} ns`)}Xo("GPU",`${c}::${u}::${f}`)}e.unmap(),this.pendingQueries.delete(e)}),as()}run(e,r,t,s,n,o){xs(e.name);let a=[];for(let M=0;M<r.length;++M){let $=r[M].data;if($===0)continue;let y=this.gpuDataManager.get($);if(!y)throw new Error(`no GPU data for input: ${$}`);a.push(y)}let{outputs:i,dispatchGroup:l,programUniforms:c}=e.getRunData(r),p=t.length===0?i.map((M,$)=>$):t;if(p.length!==i.length)throw new Error(`Output size ${p.length} must be equal to ${i.length}.`);let d=[],u=[];for(let M=0;M<i.length;++M){if(!Number.isInteger(p[M])||p[M]<-3||p[M]>=o)throw new Error(`Invalid output index: ${p[M]}`);if(p[M]===-3)continue;let $=p[M]===-1,y=p[M]===-2,T=$||y?n(i[M].dataType,i[M].dims):s(p[M],i[M].dataType,i[M].dims);if(d.push(T),T.data===0)continue;let E=this.gpuDataManager.get(T.data);if(!E)throw new Error(`no GPU data for output: ${T.data}`);if($&&this.temporaryData.push(E),y){let x=this.kernelPersistentData.get(this.currentKernelId);x||(x=[],this.kernelPersistentData.set(this.currentKernelId,x)),x.push(E)}u.push(E)}if(a.length!==r.length||u.length!==d.length){if(u.length===0)return as(e.name),d;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let f;if(c){let M=0,$=[];c.forEach(x=>{let S=typeof x.data=="number"?[x.data]:x.data;if(S.length===0)return;let z=x.type===10?2:4,O,K;x.type===10?(K=S.length>4?16:S.length>2?8:S.length*z,O=S.length>4?16:z*S.length):(K=S.length<=2?S.length*z:16,O=16),M=Math.ceil(M/K)*K,$.push(M);let H=x.type===10?8:4;M+=S.length>4?Math.ceil(S.length/H)*O:S.length*z});let y=16;M=Math.ceil(M/y)*y;let T=new ArrayBuffer(M);c.forEach((x,S)=>{let z=$[S],O=typeof x.data=="number"?[x.data]:x.data;if(x.type===6)new Int32Array(T,z,O.length).set(O);else if(x.type===12)new Uint32Array(T,z,O.length).set(O);else if(x.type===10)new Uint16Array(T,z,O.length).set(O);else if(x.type===1)new Float32Array(T,z,O.length).set(O);else throw new Error(`Unsupported uniform type: ${js(x.type)}`)});let E=this.gpuDataManager.create(M,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(E.buffer,0,T,0,M),this.gpuDataManager.release(E.id),f={offset:0,size:M,buffer:E.buffer}}let _=this.programManager.normalizeDispatchGroupSize(l),v=_[1]===1&&_[2]===1,I=Uw(e,r,v),b=this.programManager.getArtifact(I);if(b||(b=this.programManager.build(e,_),this.programManager.setArtifact(I,b),Ft("info",()=>`[artifact] key: ${I}, programName: ${e.name}`)),c&&b.uniformVariablesInfo){if(c.length!==b.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${b.uniformVariablesInfo.length}, got ${c.length} in program "${b.programInfo.name}".`);for(let M=0;M<c.length;M++){let $=c[M],y=$.type,T=typeof $.data=="number"?1:$.data.length,[E,x]=b.uniformVariablesInfo[M];if(y!==E||T!==x)throw new Error(`Uniform variable ${M} mismatch: expect type ${E} with size ${x}, got type ${y} with size ${T} in program "${b.programInfo.name}".`)}}if(Ft("info",()=>`[ProgramManager] run "${e.name}" (key=${I}) with ${_[0]}x${_[1]}x${_[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let M={kernelId:this.currentKernelId,programName:b.programInfo.name,inputTensorViews:r,outputTensorViews:d};this.pendingKernels.push(M),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(M)}return this.programManager.run(b,a,u,_,f),as(e.name),d}upload(e,r){this.gpuDataManager.upload(e,r)}memcpy(e,r){this.gpuDataManager.memcpy(e,r)}async download(e,r){await this.gpuDataManager.download(e,r)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,r,t,s){let n=w0.get(e);if(!n)throw new Error(`kernel not implemented: ${e}`);let o={kernelType:e,kernelName:s,kernelEntry:n[0],attributes:[n[1],t]};this.kernels.set(r,o)}releaseKernel(e){let r=this.kernelPersistentData.get(e);if(r){for(let t of r)this.gpuDataManager.release(t.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,r,t){let s=this.kernels.get(e);if(!s)throw new Error(`kernel not created: ${e}`);let n=s.kernelType,o=s.kernelName,a=s.kernelEntry,i=s.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${n}] ${o}" is not allowed to be called recursively`);this.currentKernelId=e,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Ft("info",()=>`[WebGPU] Start to run kernel "[${n}] ${o}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),a(r,i[1]),0}catch(c){return t.push(Promise.resolve(`[WebGPU] Kernel "[${n}] ${o}" failed. ${c}`)),1}finally{l&&t.push(this.device.popErrorScope().then(c=>c?`GPU validation error for kernel "[${n}] ${o}": ${c.message}`:null));for(let c of this.temporaryData)this.gpuDataManager.release(c.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,r,t,s){let n=this.sessionExternalDataMapping.get(e);n||(n=new Map,this.sessionExternalDataMapping.set(e,n));let o=n.get(r),a=this.gpuDataManager.registerExternalBuffer(t,s,o);return n.set(r,[a,t]),a}unregisterBuffers(e){let r=this.sessionExternalDataMapping.get(e);r&&(r.forEach(t=>this.gpuDataManager.unregisterExternalBuffer(t[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let r=this.gpuDataManager.get(e);if(!r)throw new Error(`no GPU data for buffer: ${e}`);return r.buffer}createDownloader(e,r,t){return async()=>{let s=await Rc(this,e,r);return du(s.buffer,t)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ft("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ft("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ft("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),t=e.length;this.pendingKernels=[];for(let s=0;s<t;s++){let n=this.getComputePassEncoder(),o=e[s];this.writeTimestamp(this.pendingDispatchNumber*2),n.setPipeline(o.computePipeline),n.setBindGroup(0,o.bindGroup),n.dispatchWorkgroups(...o.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[s]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),v0={};no(v0,{init:()=>x0});var Zi,Gw,x0,hT=Be(()=>{ft(),Ns(),yt(),vx(),Zi=class T0{constructor(r,t,s,n){this.module=r,this.dataType=t,this.data=s,this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let r=Me.size(this.dims);return r===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,r)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let r=Me.size(this.dims);return r===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,r)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let r=Me.size(this.dims);return r===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,r)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let r=Me.size(this.dims);return r===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,r)}reshape(r){if(Me.size(r)!==Me.size(this.dims))throw new Error("Invalid new shape");return new T0(this.module,this.dataType,this.data,r)}},Gw=class{constructor(e,r,t){this.module=e,this.backend=r,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=r.adapterInfo;let s=e.PTR_SIZE,n=t/e.PTR_SIZE,o=s===4?"i32":"i64";this.opKernelContext=Number(e.getValue(s*n++,o));let a=Number(e.getValue(s*n++,o));this.outputCount=Number(e.getValue(s*n++,o)),this.customDataOffset=Number(e.getValue(s*n++,"*")),this.customDataSize=Number(e.getValue(s*n++,o));let i=[];for(let l=0;l<a;l++){let c=Number(e.getValue(s*n++,o)),p=Number(e.getValue(s*n++,"*")),d=Number(e.getValue(s*n++,o)),u=[];for(let f=0;f<d;f++)u.push(Number(e.getValue(s*n++,o)));i.push(new Zi(e,c,p,u))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,r){let t=r?.inputs?.map(a=>typeof a=="number"?this.inputs[a]:a)??this.inputs,s=r?.outputs??[],n=(a,i,l)=>new Zi(this.module,i,this.output(a,l),l),o=(a,i)=>{let l=Tn(a,i);if(!l)throw new Error(`Unsupported data type: ${a}`);let c=l>0?this.backend.gpuDataManager.create(l).id:0;return new Zi(this.module,a,c,i)};return this.backend.run(e,t,s,n,o,this.outputCount)}output(e,r){let t=this.module.stackSave();try{let s=this.module.PTR_SIZE,n=s===4?"i32":"i64",o=this.module.stackAlloc((1+r.length)*s);this.module.setValue(o,r.length,n);for(let a=0;a<r.length;a++)this.module.setValue(o+s*(a+1),r[a],n);return this.module._JsepOutput(this.opKernelContext,e,o)}catch(s){throw new Error(`Failed to generate kernel's output[${e}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${s}`)}finally{this.module.stackRestore(t)}}},x0=async(e,r,t,s)=>{let n=r.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let o=(mT(),Qo(b0)).WebGpuBackend,a=new o;await a.initialize(t,s),n("webgpu",[a,i=>a.alloc(Number(i)),i=>a.free(i),(i,l,c,p=!1)=>{if(p)Ft("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(i)}, dst=${Number(l)}, size=${Number(c)}`),a.memcpy(Number(i),Number(l));else{Ft("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(i)}, gpuDataId=${Number(l)}, size=${Number(c)}`);let d=r.HEAPU8.subarray(Number(i>>>0),Number(i>>>0)+Number(c));a.upload(Number(l),d)}},async(i,l,c)=>{Ft("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${i}, dataOffset=${l}, size=${c}`),await a.download(Number(i),()=>r.HEAPU8.subarray(Number(l)>>>0,Number(l+c)>>>0))},(i,l,c)=>a.createKernel(i,Number(l),c,r.UTF8ToString(r._JsepGetNodeName(Number(l)))),i=>a.releaseKernel(i),(i,l,c,p)=>{Ft("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${i}, contextDataOffset=${l}`);let d=new Gw(r,a,Number(l));return a.computeKernel(Number(i),d,p)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let o=new OM(t);n("webnn",[o,()=>o.reserveTensorId(),a=>o.releaseTensorId(a),async(a,i,l,c,p)=>o.ensureTensor(a,i,l,c,p),(a,i)=>{o.uploadTensor(a,i)},async(a,i)=>o.downloadTensor(a,i)])}}}),Kw,vu,xu,Ys,Hw,$c,pa,Tu,Eu,kc,Pu,Cu,Su,E0=Be(()=>{Mx(),bx(),ft(),$n(),ou(),SM(),Kw=(e,r)=>{qt()._OrtInit(e,r)!==0&&Vt("Can't initialize onnxruntime.")},vu=async e=>{Kw(e.wasm.numThreads,aa(e.logLevel))},xu=async(e,r)=>{qt().asyncInit?.();{let t=(hT(),Qo(v0)).init;if(r==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let s=e.webgpu.adapter;if(s){if(typeof s.limits!="object"||typeof s.features!="object"||typeof s.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let n=e.webgpu.powerPreference;if(n!==void 0&&n!=="low-power"&&n!=="high-performance")throw new Error(`Invalid powerPreference setting: "${n}"`);let o=e.webgpu.forceFallbackAdapter;if(o!==void 0&&typeof o!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${o}"`);if(s=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:o}),!s)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await t("webgpu",qt(),e,s)}if(r==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await t("webnn",qt(),e)}}},Ys=new Map,Hw=e=>{let r=qt(),t=r.stackSave();try{let s=r.PTR_SIZE,n=r.stackAlloc(2*s);r._OrtGetInputOutputCount(e,n,n+s)!==0&&Vt("Can't get session input/output count.");let o=s===4?"i32":"i64";return[Number(r.getValue(n,o)),Number(r.getValue(n+s,o))]}finally{r.stackRestore(t)}},$c=(e,r)=>{let t=qt(),s=t.stackSave(),n=0;try{let o=t.PTR_SIZE,a=t.stackAlloc(2*o);t._OrtGetInputOutputMetadata(e,r,a,a+o)!==0&&Vt("Can't get session input/output metadata.");let i=Number(t.getValue(a,"*"));n=Number(t.getValue(a+o,"*"));let l=t.HEAP32[n/4];if(l===0)return[i,0];let c=t.HEAPU32[n/4+1],p=[];for(let d=0;d<c;d++){let u=Number(t.getValue(n+8+d*o,"*"));p.push(u!==0?t.UTF8ToString(u):Number(t.getValue(n+8+(d+c)*o,"*")))}return[i,l,p]}finally{t.stackRestore(s),n!==0&&t._OrtFree(n)}},pa=e=>{let r=qt(),t=r._malloc(e.byteLength);if(t===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return r.HEAPU8.set(e,t),[t,e.byteLength]},Tu=async(e,r)=>{let t,s,n=qt();Array.isArray(e)?[t,s]=e:e.buffer===n.HEAPU8.buffer?[t,s]=[e.byteOffset,e.byteLength]:[t,s]=pa(e);let o=0,a=0,i=0,l=[],c=[],p=[];try{if([a,l]=await CM(r),r?.externalData&&n.mountExternalData){let y=[];for(let T of r.externalData){let E=typeof T=="string"?T:T.path;y.push(cu(typeof T=="string"?T:T.data).then(x=>{n.mountExternalData(E,x)}))}await Promise.all(y)}for(let y of r?.executionProviders??[])if((typeof y=="string"?y:y.name)==="webnn"){if(n.shouldTransferToMLTensor=!1,typeof y!="string"){let T=y,E=T?.context,x=T?.gpuDevice,S=T?.deviceType,z=T?.powerPreference;E?n.currentContext=E:x?n.currentContext=await n.webnnCreateMLContext(x):n.currentContext=await n.webnnCreateMLContext({deviceType:S,powerPreference:z})}else n.currentContext=await n.webnnCreateMLContext();break}o=await n._OrtCreateSession(t,s,a),n.webgpuOnCreateSession?.(o),o===0&&Vt("Can't create a session."),n.jsepOnCreateSession?.(),n.currentContext&&(n.webnnRegisterMLContext(o,n.currentContext),n.currentContext=void 0,n.shouldTransferToMLTensor=!0);let[d,u]=Hw(o),f=!!r?.enableGraphCapture,_=[],v=[],I=[],b=[],M=[];for(let y=0;y<d;y++){let[T,E,x]=$c(o,y);T===0&&Vt("Can't get an input name."),c.push(T);let S=n.UTF8ToString(T);_.push(S),I.push(E===0?{name:S,isTensor:!1}:{name:S,isTensor:!0,type:js(E),shape:x})}for(let y=0;y<u;y++){let[T,E,x]=$c(o,y+d);T===0&&Vt("Can't get an output name."),p.push(T);let S=n.UTF8ToString(T);v.push(S),b.push(E===0?{name:S,isTensor:!1}:{name:S,isTensor:!0,type:js(E),shape:x});{if(f&&r?.preferredOutputLocation===void 0){M.push("gpu-buffer");continue}let z=typeof r?.preferredOutputLocation=="string"?r.preferredOutputLocation:r?.preferredOutputLocation?.[S]??"cpu";if(z!=="cpu"&&z!=="cpu-pinned"&&z!=="gpu-buffer"&&z!=="ml-tensor")throw new Error(`Not supported preferred output location: ${z}.`);if(f&&z!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${z}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);M.push(z)}}let $=null;return M.some(y=>y==="gpu-buffer"||y==="ml-tensor")&&(i=n._OrtCreateBinding(o),i===0&&Vt("Can't create IO binding."),$={handle:i,outputPreferredLocations:M,outputPreferredLocationsEncoded:M.map(y=>zc(y))}),Ys.set(o,[o,c,p,$,f,!1]),[o,_,v,I,b]}catch(d){throw c.forEach(u=>n._OrtFree(u)),p.forEach(u=>n._OrtFree(u)),i!==0&&n._OrtReleaseBinding(i)!==0&&Vt("Can't release IO binding."),o!==0&&n._OrtReleaseSession(o)!==0&&Vt("Can't release session."),d}finally{n._free(t),a!==0&&n._OrtReleaseSessionOptions(a)!==0&&Vt("Can't release session options."),l.forEach(d=>n._free(d)),n.unmountExternalData?.()}},Eu=e=>{let r=qt(),t=Ys.get(e);if(!t)throw new Error(`cannot release session. invalid session id: ${e}`);let[s,n,o,a,i]=t;a&&(i&&r._OrtClearBoundOutputs(a.handle)!==0&&Vt("Can't clear bound outputs."),r._OrtReleaseBinding(a.handle)!==0&&Vt("Can't release IO binding.")),r.jsepOnReleaseSession?.(e),r.webnnOnReleaseSession?.(e),r.webgpuOnReleaseSession?.(e),n.forEach(l=>r._OrtFree(l)),o.forEach(l=>r._OrtFree(l)),r._OrtReleaseSession(s)!==0&&Vt("Can't release session."),Ys.delete(e)},kc=async(e,r,t,s,n,o,a=!1)=>{if(!e){r.push(0);return}let i=qt(),l=i.PTR_SIZE,c=e[0],p=e[1],d=e[3],u=d,f,_;if(c==="string"&&(d==="gpu-buffer"||d==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&d!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${o} when enableGraphCapture is true.`);if(d==="gpu-buffer"){let b=e[2].gpuBuffer;_=Tn(Zn(c),p);{let M=i.jsepRegisterBuffer;if(!M)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');f=M(s,o,b,_)}}else if(d==="ml-tensor"){let b=e[2].mlTensor;_=Tn(Zn(c),p);let M=i.webnnRegisterMLTensor;if(!M)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');f=M(s,b,Zn(c),p)}else{let b=e[2];if(Array.isArray(b)){_=l*b.length,f=i._malloc(_),t.push(f);for(let M=0;M<b.length;M++){if(typeof b[M]!="string")throw new TypeError(`tensor data at index ${M} is not a string`);i.setValue(f+M*l,bs(b[M],t),"*")}}else{let M=i.webnnIsGraphInput;if(c!=="string"&&M){let $=i.UTF8ToString(n);if(M(s,$)){let y=Zn(c);_=Tn(y,p),u="ml-tensor";let T=i.webnnCreateTemporaryTensor,E=i.webnnUploadTensor;if(!T||!E)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let x=await T(s,y,p);E(x,new Uint8Array(b.buffer,b.byteOffset,b.byteLength)),f=x}else _=b.byteLength,f=i._malloc(_),t.push(f),i.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,_),f)}else _=b.byteLength,f=i._malloc(_),t.push(f),i.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,_),f)}}let v=i.stackSave(),I=i.stackAlloc(4*p.length);try{p.forEach((M,$)=>i.setValue(I+$*l,M,l===4?"i32":"i64"));let b=i._OrtCreateTensor(Zn(c),f,_,I,p.length,zc(u));b===0&&Vt(`Can't create tensor for input/output. session=${s}, index=${o}.`),r.push(b)}finally{i.stackRestore(v)}},Pu=async(e,r,t,s,n,o)=>{let a=qt(),i=a.PTR_SIZE,l=Ys.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let c=l[0],p=l[1],d=l[2],u=l[3],f=l[4],_=l[5],v=r.length,I=s.length,b=0,M=[],$=[],y=[],T=[],E=a.stackSave(),x=a.stackAlloc(v*i),S=a.stackAlloc(v*i),z=a.stackAlloc(I*i),O=a.stackAlloc(I*i);try{[b,M]=PM(o);for(let D=0;D<v;D++)await kc(t[D],$,T,e,p[r[D]],r[D],f);for(let D=0;D<I;D++)await kc(n[D],y,T,e,d[s[D]],v+s[D],f);for(let D=0;D<v;D++)a.setValue(x+D*i,$[D],"*"),a.setValue(S+D*i,p[r[D]],"*");for(let D=0;D<I;D++)a.setValue(z+D*i,y[D],"*"),a.setValue(O+D*i,d[s[D]],"*");if(u&&!_){let{handle:D,outputPreferredLocations:Z,outputPreferredLocationsEncoded:Q}=u;if(p.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model's input count (${p.length}).`);for(let Y=0;Y<v;Y++){let re=r[Y];await a._OrtBindInput(D,p[re],$[Y])!==0&&Vt(`Can't bind input[${Y}] for session=${e}.`)}for(let Y=0;Y<I;Y++){let re=s[Y];n[Y]?.[3]?a._OrtBindOutput(D,d[re],y[Y],0)!==0&&Vt(`Can't bind pre-allocated output[${Y}] for session=${e}.`):a._OrtBindOutput(D,d[re],0,Q[re])!==0&&Vt(`Can't bind output[${Y}] to ${Z[Y]} for session=${e}.`)}Ys.set(e,[c,p,d,u,f,!0])}a.jsepOnRunStart?.(c),a.webnnOnRunStart?.(c);let K;u?K=await a._OrtRunWithBinding(c,u.handle,I,z,b):K=await a._OrtRun(c,S,x,v,O,I,z,b),K!==0&&Vt("failed to call OrtRun().");let H=[];for(let D=0;D<I;D++){let Z=Number(a.getValue(z+D*i,"*"));if(Z===y[D]){H.push(n[D]);continue}let Q=a.stackSave(),Y=a.stackAlloc(4*i),re=!1,te,ce=0;try{a._OrtGetTensorData(Z,Y,Y+i,Y+2*i,Y+3*i)!==0&&Vt(`Can't access output tensor data on index ${D}.`);let ue=i===4?"i32":"i64",B=Number(a.getValue(Y,ue));ce=a.getValue(Y+i,"*");let F=a.getValue(Y+i*2,"*"),G=Number(a.getValue(Y+i*3,ue)),j=[];for(let ve=0;ve<G;ve++)j.push(Number(a.getValue(F+ve*i,ue)));a._OrtFree(F)!==0&&Vt("Can't free memory for tensor dims.");let ae=j.reduce((ve,Fe)=>ve*Fe,1);te=js(B);let Ae=u?.outputPreferredLocations[s[D]];if(te==="string"){if(Ae==="gpu-buffer"||Ae==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let ve=[];for(let Fe=0;Fe<ae;Fe++){let Qe=a.getValue(ce+Fe*i,"*"),xe=a.getValue(ce+(Fe+1)*i,"*"),q=Fe===ae-1?void 0:xe-Qe;ve.push(a.UTF8ToString(Qe,q))}H.push([te,j,ve,"cpu"])}else if(Ae==="gpu-buffer"&&ae>0){let ve=a.jsepGetBuffer;if(!ve)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let Fe=ve(ce),Qe=Tn(B,ae);if(Qe===void 0||!au(te))throw new Error(`Unsupported data type: ${te}`);re=!0,H.push([te,j,{gpuBuffer:Fe,download:a.jsepCreateDownloader(Fe,Qe,te),dispose:()=>{a._OrtReleaseTensor(Z)!==0&&Vt("Can't release tensor.")}},"gpu-buffer"])}else if(Ae==="ml-tensor"&&ae>0){let ve=a.webnnEnsureTensor,Fe=a.webnnIsInt64Supported;if(!ve||!Fe)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(Tn(B,ae)===void 0||!lu(te))throw new Error(`Unsupported data type: ${te}`);if(te==="int64"&&!Fe(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let Qe=await ve(e,ce,B,j,!1);re=!0,H.push([te,j,{mlTensor:Qe,download:a.webnnCreateMLTensorDownloader(ce,te),dispose:()=>{a.webnnReleaseTensorId(ce),a._OrtReleaseTensor(Z)}},"ml-tensor"])}else{let ve=iu(te),Fe=new ve(ae);new Uint8Array(Fe.buffer,Fe.byteOffset,Fe.byteLength).set(a.HEAPU8.subarray(ce,ce+Fe.byteLength)),H.push([te,j,Fe,"cpu"])}}finally{a.stackRestore(Q),te==="string"&&ce&&a._free(ce),re||a._OrtReleaseTensor(Z),a.webnnOnRunEnd?.(c)}}return u&&!f&&(a._OrtClearBoundOutputs(u.handle)!==0&&Vt("Can't clear bound outputs."),Ys.set(e,[c,p,d,u,f,!1])),H}finally{a.stackRestore(E),$.forEach(K=>a._OrtReleaseTensor(K)),y.forEach(K=>a._OrtReleaseTensor(K)),T.forEach(K=>a._free(K)),b!==0&&a._OrtReleaseRunOptions(b),M.forEach(K=>a._free(K))}},Cu=e=>{let r=qt(),t=Ys.get(e);if(!t)throw new Error("invalid session id");let s=t[0],n=r._OrtEndProfiling(s);n===0&&Vt("Can't get an profile file name."),r._OrtFree(n)},Su=e=>{let r=[];for(let t of e){let s=t[2];!Array.isArray(s)&&"buffer"in s&&r.push(s.buffer)}return r}}),Zs,ns,Jn,jo,No,ea,Ic,ta,bn,yn,qw,P0,C0,S0,$0,k0,I0,A0,F0=Be(()=>{Ts(),E0(),$n(),su(),Zs=()=>!!Yt.wasm.proxy&&typeof document<"u",Jn=!1,jo=!1,No=!1,ta=new Map,bn=(e,r)=>{let t=ta.get(e);t?t.push(r):ta.set(e,[r])},yn=()=>{if(Jn||!jo||No||!ns)throw new Error("worker not ready")},qw=e=>{switch(e.data.type){case"init-wasm":Jn=!1,e.data.err?(No=!0,Ic[1](e.data.err)):(jo=!0,Ic[0]()),ea&&(URL.revokeObjectURL(ea),ea=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let r=ta.get(e.data.type);e.data.err?r.shift()[1](e.data.err):r.shift()[0](e.data.out);break}}},P0=async()=>{if(!jo){if(Jn)throw new Error("multiple calls to 'initWasm()' detected.");if(No)throw new Error("previous call to 'initWasm()' failed.");if(Jn=!0,Zs())return new Promise((e,r)=>{ns?.terminate(),TM().then(([t,s])=>{try{ns=s,ns.onerror=o=>r(o),ns.onmessage=qw,Ic=[e,r];let n={type:"init-wasm",in:Yt};!n.in.wasm.wasmPaths&&(t||Lc)&&(n.in.wasm.wasmPaths={wasm:new URL("/web-ai/transformerjs-demos/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href}),ns.postMessage(n),ea=t}catch(n){r(n)}},r)});try{await nu(Yt.wasm),await vu(Yt),jo=!0}catch(e){throw No=!0,e}finally{Jn=!1}}},C0=async e=>{if(Zs())return yn(),new Promise((r,t)=>{bn("init-ep",[r,t]);let s={type:"init-ep",in:{epName:e,env:Yt}};ns.postMessage(s)});await xu(Yt,e)},S0=async e=>Zs()?(yn(),new Promise((r,t)=>{bn("copy-from",[r,t]);let s={type:"copy-from",in:{buffer:e}};ns.postMessage(s,[e.buffer])})):pa(e),$0=async(e,r)=>{if(Zs()){if(r?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return yn(),new Promise((t,s)=>{bn("create",[t,s]);let n={type:"create",in:{model:e,options:{...r}}},o=[];e instanceof Uint8Array&&o.push(e.buffer),ns.postMessage(n,o)})}else return Tu(e,r)},k0=async e=>{if(Zs())return yn(),new Promise((r,t)=>{bn("release",[r,t]);let s={type:"release",in:e};ns.postMessage(s)});Eu(e)},I0=async(e,r,t,s,n,o)=>{if(Zs()){if(t.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return yn(),new Promise((a,i)=>{bn("run",[a,i]);let l=t,c={type:"run",in:{sessionId:e,inputIndices:r,inputs:l,outputIndices:s,options:o}};ns.postMessage(c,Su(l))})}else return Pu(e,r,t,s,n,o)},A0=async e=>{if(Zs())return yn(),new Promise((r,t)=>{bn("end-profiling",[r,t]);let s={type:"end-profiling",in:e};ns.postMessage(s)});Cu(e)}}),Ac,Qw,O0,_T=Be(()=>{Ts(),F0(),ft(),ru(),SM(),Ac=(e,r)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${r()}`)}},Qw=e=>{switch(e[3]){case"cpu":return new ys(e[0],e[2],e[1]);case"gpu-buffer":{let r=e[0];if(!au(r))throw new Error(`not supported data type: ${r} for deserializing GPU tensor`);let{gpuBuffer:t,download:s,dispose:n}=e[2];return ys.fromGpuBuffer(t,{dataType:r,dims:e[1],download:s,dispose:n})}case"ml-tensor":{let r=e[0];if(!lu(r))throw new Error(`not supported data type: ${r} for deserializing MLTensor tensor`);let{mlTensor:t,download:s,dispose:n}=e[2];return ys.fromMLTensor(t,{dataType:r,dims:e[1],download:s,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},O0=class{async fetchModelAndCopyToWasmMemory(e){return S0(await cu(e))}async loadModel(e,r){xs();let t;typeof e=="string"?t=await this.fetchModelAndCopyToWasmMemory(e):t=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await $0(t,r),as()}async dispose(){return k0(this.sessionId)}async run(e,r,t){xs();let s=[],n=[];Object.entries(e).forEach(d=>{let u=d[0],f=d[1],_=this.inputNames.indexOf(u);if(_===-1)throw new Error(`invalid input '${u}'`);s.push(f),n.push(_)});let o=[],a=[];Object.entries(r).forEach(d=>{let u=d[0],f=d[1],_=this.outputNames.indexOf(u);if(_===-1)throw new Error(`invalid output '${u}'`);o.push(f),a.push(_)});let i=s.map((d,u)=>Ac(d,()=>`input "${this.inputNames[n[u]]}"`)),l=o.map((d,u)=>d?Ac(d,()=>`output "${this.outputNames[a[u]]}"`):null),c=await I0(this.sessionId,n,i,a,l,t),p={};for(let d=0;d<c.length;d++)p[this.outputNames[a[d]]]=o[d]??Qw(c[d]);return as(),p}startProfiling(){}endProfiling(){A0(this.sessionId)}}}),D0={};no(D0,{OnnxruntimeWebAssemblyBackend:()=>Jc,initializeFlags:()=>Xc,wasmBackend:()=>L0});var Xc,Jc,L0,fT=Be(()=>{Ts(),F0(),_T(),Xc=()=>{(typeof Yt.wasm.initTimeout!="number"||Yt.wasm.initTimeout<0)&&(Yt.wasm.initTimeout=0);let e=Yt.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),Yt.wasm.simd=!1),typeof Yt.wasm.proxy!="boolean"&&(Yt.wasm.proxy=!1),typeof Yt.wasm.trace!="boolean"&&(Yt.wasm.trace=!1),typeof Yt.wasm.numThreads!="number"||!Number.isInteger(Yt.wasm.numThreads)||Yt.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)Yt.wasm.numThreads=1;else{let r=typeof navigator>"u"?rx("node:os").cpus().length:navigator.hardwareConcurrency;Yt.wasm.numThreads=Math.min(4,Math.ceil((r||1)/2))}},Jc=class{async init(e){Xc(),await P0(),await C0(e)}async createInferenceSessionHandler(e,r){let t=new O0;return await t.loadModel(e,r),t}},L0=new Jc});Ts();Ts();Ts();var gT="1.22.0-dev.20250409-89f8206ba4",wT=wM;{let e=(fT(),Qo(D0)).wasmBackend;En("webgpu",e,5),En("webnn",e,5),En("cpu",e,10),En("wasm",e,10)}Object.defineProperty(Yt.versions,"web",{value:gT,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const MT=Object.freeze(Object.defineProperty({__proto__:null,get InferenceSession(){return tu},get TRACE(){return Xo},get TRACE_FUNC_BEGIN(){return xs},get TRACE_FUNC_END(){return as},get Tensor(){return ys},default:wT,get env(){return Yt},get registerBackend(){return En}},Symbol.toStringTag,{value:"Module"}));var Fc={},bT={"onnxruntime-common":e=>{e.exports=Yv},"onnxruntime-web":e=>{e.exports=MT},"?2ce3":()=>{},"?7992":()=>{},"?5af5":()=>{},"?2b25":()=>{},"?db59":()=>{},"?383f":()=>{},"?fa4b":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(e,r,t)=>{t.r(r),t.d(r,{Environment:()=>qe,Interpreter:()=>Ze,Template:()=>Ps,parse:()=>Ae,tokenize:()=>p});var s=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Comment:"Comment"}),n=class{constructor(C,X){this.value=C,this.type=X}};function o(C){return/\w/.test(C)}function a(C){return/[0-9]/.test(C)}var i=[["{%",s.OpenStatement],["%}",s.CloseStatement],["{{",s.OpenExpression],["}}",s.CloseExpression],["(",s.OpenParen],[")",s.CloseParen],["{",s.OpenCurlyBracket],["}",s.CloseCurlyBracket],["[",s.OpenSquareBracket],["]",s.CloseSquareBracket],[",",s.Comma],[".",s.Dot],[":",s.Colon],["|",s.Pipe],["<=",s.ComparisonBinaryOperator],[">=",s.ComparisonBinaryOperator],["==",s.ComparisonBinaryOperator],["!=",s.ComparisonBinaryOperator],["<",s.ComparisonBinaryOperator],[">",s.ComparisonBinaryOperator],["+",s.AdditiveBinaryOperator],["-",s.AdditiveBinaryOperator],["~",s.AdditiveBinaryOperator],["*",s.MultiplicativeBinaryOperator],["/",s.MultiplicativeBinaryOperator],["%",s.MultiplicativeBinaryOperator],["=",s.Equals]],l=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function c(C,X={}){return C.endsWith(`
`)&&(C=C.slice(0,-1)),X.lstrip_blocks&&(C=C.replace(/^[ \t]*({[#%-])/gm,"$1")),X.trim_blocks&&(C=C.replace(/([#%-]})\n/g,"$1")),C.replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{").replace(/-#}\s*/g,"#}").replace(/\s*{#-/g,"{#").replace(/{%\s*(end)?generation\s*%}/gs,"")}function p(C,X={}){const N=[],J=c(C,X);let ne=0,me=0;const Se=tt=>{let lt="";for(;tt(J[ne]);){if(J[ne]==="\\"){if(++ne,ne>=J.length)throw new SyntaxError("Unexpected end of input");const Ge=J[ne++],Ct=l.get(Ge);if(Ct===void 0)throw new SyntaxError(`Unexpected escaped character: ${Ge}`);lt+=Ct;continue}if(lt+=J[ne++],ne>=J.length)throw new SyntaxError("Unexpected end of input")}return lt};e:for(;ne<J.length;){const tt=N.at(-1)?.type;if(tt===void 0||tt===s.CloseStatement||tt===s.CloseExpression||tt===s.Comment){let Ge="";for(;ne<J.length&&!(J[ne]==="{"&&(J[ne+1]==="%"||J[ne+1]==="{"||J[ne+1]==="#"));)Ge+=J[ne++];if(Ge.length>0){N.push(new n(Ge,s.Text));continue}}if(J[ne]==="{"&&J[ne+1]==="#"){ne+=2;let Ge="";for(;J[ne]!=="#"||J[ne+1]!=="}";){if(ne+2>=J.length)throw new SyntaxError("Missing end of comment tag");Ge+=J[ne++]}N.push(new n(Ge,s.Comment)),ne+=2;continue}Se(Ge=>/\s/.test(Ge));const lt=J[ne];if(lt==="-"||lt==="+"){const Ge=N.at(-1)?.type;if(Ge===s.Text||Ge===void 0)throw new SyntaxError(`Unexpected character: ${lt}`);switch(Ge){case s.Identifier:case s.NumericLiteral:case s.StringLiteral:case s.CloseParen:case s.CloseSquareBracket:break;default:{++ne;const Ct=Se(a);N.push(new n(`${lt}${Ct}`,Ct.length>0?s.NumericLiteral:s.UnaryOperator));continue}}}for(const[Ge,Ct]of i){if(Ge==="}}"&&me>0)continue;if(J.slice(ne,ne+Ge.length)===Ge){N.push(new n(Ge,Ct)),Ct===s.OpenExpression?me=0:Ct===s.OpenCurlyBracket?++me:Ct===s.CloseCurlyBracket&&--me,ne+=Ge.length;continue e}}if(lt==="'"||lt==='"'){++ne;const Ge=Se(Ct=>Ct!==lt);N.push(new n(Ge,s.StringLiteral)),++ne;continue}if(a(lt)){let Ge=Se(a);if(J[ne]==="."&&a(J[ne+1])){++ne;const Ct=Se(a);Ge=`${Ge}.${Ct}`}N.push(new n(Ge,s.NumericLiteral));continue}if(o(lt)){const Ge=Se(o);N.push(new n(Ge,s.Identifier));continue}throw new SyntaxError(`Unexpected character: ${lt}`)}return N}var d=class{type="Statement"},u=class extends d{constructor(C){super(),this.body=C}type="Program"},f=class extends d{constructor(C,X,N){super(),this.test=C,this.body=X,this.alternate=N}type="If"},_=class extends d{constructor(C,X,N,J){super(),this.loopvar=C,this.iterable=X,this.body=N,this.defaultBlock=J}type="For"},v=class extends d{type="Break"},I=class extends d{type="Continue"},b=class extends d{constructor(C,X,N){super(),this.assignee=C,this.value=X,this.body=N}type="Set"},M=class extends d{constructor(C,X,N){super(),this.name=C,this.args=X,this.body=N}type="Macro"},$=class extends d{constructor(C){super(),this.value=C}type="Comment"},y=class extends d{type="Expression"},T=class extends y{constructor(C,X,N){super(),this.object=C,this.property=X,this.computed=N}type="MemberExpression"},E=class extends y{constructor(C,X){super(),this.callee=C,this.args=X}type="CallExpression"},x=class extends y{constructor(C){super(),this.value=C}type="Identifier"},S=class extends y{constructor(C){super(),this.value=C}type="Literal"},z=class extends S{type="IntegerLiteral"},O=class extends S{type="FloatLiteral"},K=class extends S{type="StringLiteral"},H=class extends S{type="ArrayLiteral"},D=class extends S{type="TupleLiteral"},Z=class extends S{type="ObjectLiteral"},Q=class extends y{constructor(C,X,N){super(),this.operator=C,this.left=X,this.right=N}type="BinaryExpression"},Y=class extends y{constructor(C,X){super(),this.operand=C,this.filter=X}type="FilterExpression"},re=class extends d{constructor(C,X){super(),this.filter=C,this.body=X}type="FilterStatement"},te=class extends y{constructor(C,X){super(),this.lhs=C,this.test=X}type="SelectExpression"},ce=class extends y{constructor(C,X,N){super(),this.operand=C,this.negate=X,this.test=N}type="TestExpression"},ue=class extends y{constructor(C,X){super(),this.operator=C,this.argument=X}type="UnaryExpression"},B=class extends y{constructor(C=void 0,X=void 0,N=void 0){super(),this.start=C,this.stop=X,this.step=N}type="SliceExpression"},F=class extends y{constructor(C,X){super(),this.key=C,this.value=X}type="KeywordArgumentExpression"},G=class extends y{constructor(C){super(),this.argument=C}type="SpreadExpression"},j=class extends d{constructor(C,X,N){super(),this.call=C,this.callerArgs=X,this.body=N}type="CallStatement"},ae=class extends y{constructor(C,X,N){super(),this.condition=C,this.trueExpr=X,this.falseExpr=N}type="Ternary"};function Ae(C){const X=new u([]);let N=0;function J(Le,Re){const rt=C[N++];if(!rt||rt.type!==Le)throw new Error(`Parser Error: ${Re}. ${rt.type} !== ${Le}.`);return rt}function ne(Le){if(!lt(Le))throw new SyntaxError(`Expected ${Le}`);++N}function me(){switch(C[N].type){case s.Comment:return new $(C[N++].value);case s.Text:return Ge();case s.OpenStatement:return Ct();case s.OpenExpression:return $t();default:throw new SyntaxError(`Unexpected token type: ${C[N].type}`)}}function Se(...Le){return N+Le.length<=C.length&&Le.every((Re,rt)=>Re===C[N+rt].type)}function tt(...Le){return C[N]?.type===s.OpenStatement&&C[N+1]?.type===s.Identifier&&Le.includes(C[N+1]?.value)}function lt(...Le){return N+Le.length<=C.length&&Le.every((Re,rt)=>C[N+rt].type==="Identifier"&&Re===C[N+rt].value)}function Ge(){return new K(J(s.Text,"Expected text token").value)}function Ct(){if(J(s.OpenStatement,"Expected opening statement token"),C[N].type!==s.Identifier)throw new SyntaxError(`Unknown statement, got ${C[N].type}`);const Le=C[N].value;let Re;switch(Le){case"set":++N,Re=_r();break;case"if":++N,Re=Bt(),J(s.OpenStatement,"Expected {% token"),ne("endif"),J(s.CloseStatement,"Expected %} token");break;case"macro":++N,Re=cr(),J(s.OpenStatement,"Expected {% token"),ne("endmacro"),J(s.CloseStatement,"Expected %} token");break;case"for":++N,Re=Qt(),J(s.OpenStatement,"Expected {% token"),ne("endfor"),J(s.CloseStatement,"Expected %} token");break;case"call":{++N;let rt=null;Se(s.OpenParen)&&(rt=Kr());const Xt=Lr();if(Xt.type!=="Identifier")throw new SyntaxError("Expected identifier following call statement");const Ls=Kr();J(s.CloseStatement,"Expected closing statement token");const $s=[];for(;!tt("endcall");)$s.push(me());J(s.OpenStatement,"Expected '{%'"),ne("endcall"),J(s.CloseStatement,"Expected closing statement token");const zs=new E(Xt,Ls);Re=new j(zs,rt,$s);break}case"break":++N,J(s.CloseStatement,"Expected closing statement token"),Re=new v;break;case"continue":++N,J(s.CloseStatement,"Expected closing statement token"),Re=new I;break;case"filter":{++N;let rt=Lr();rt instanceof x&&Se(s.OpenParen)&&(rt=sr(rt)),J(s.CloseStatement,"Expected closing statement token");const Xt=[];for(;!tt("endfilter");)Xt.push(me());J(s.OpenStatement,"Expected '{%'"),ne("endfilter"),J(s.CloseStatement,"Expected '%}'"),Re=new re(rt,Xt);break}default:throw new SyntaxError(`Unknown statement type: ${Le}`)}return Re}function $t(){J(s.OpenExpression,"Expected opening expression token");const Le=fr();return J(s.CloseExpression,"Expected closing expression token"),Le}function _r(){const Le=Gr();let Re=null;const rt=[];if(Se(s.Equals))++N,Re=Gr();else{for(J(s.CloseStatement,"Expected %} token");!tt("endset");)rt.push(me());J(s.OpenStatement,"Expected {% token"),ne("endset")}return J(s.CloseStatement,"Expected closing statement token"),new b(Le,Re,rt)}function Bt(){const Le=fr();J(s.CloseStatement,"Expected closing statement token");const Re=[],rt=[];for(;!tt("elif","else","endif");)Re.push(me());if(tt("elif")){++N,++N;const Xt=Bt();rt.push(Xt)}else if(tt("else"))for(++N,++N,J(s.CloseStatement,"Expected closing statement token");!tt("endif");)rt.push(me());return new f(Le,Re,rt)}function cr(){const Le=Lr();if(Le.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const Re=Kr();J(s.CloseStatement,"Expected closing statement token");const rt=[];for(;!tt("endmacro");)rt.push(me());return new M(Le,Re,rt)}function Gr(Le=!1){const Re=Le?Lr:fr,rt=[Re()],Xt=Se(s.Comma);for(;Xt&&(++N,rt.push(Re()),!!Se(s.Comma)););return Xt?new D(rt):rt[0]}function Qt(){const Le=Gr(!0);if(!(Le instanceof x||Le instanceof D))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Le.type} instead`);if(!lt("in"))throw new SyntaxError("Expected `in` keyword following loop variable");++N;const Re=fr();J(s.CloseStatement,"Expected closing statement token");const rt=[];for(;!tt("endfor","else");)rt.push(me());const Xt=[];if(tt("else"))for(++N,++N,J(s.CloseStatement,"Expected closing statement token");!tt("endfor");)Xt.push(me());return new _(Le,Re,rt,Xt)}function fr(){return es()}function es(){const Le=ur();if(lt("if")){++N;const Re=ur();if(lt("else")){++N;const rt=es();return new ae(Re,Le,rt)}else return new te(Le,Re)}return Le}function ur(){let Le=ls();for(;lt("or");){const Re=C[N];++N;const rt=ls();Le=new Q(Re,Le,rt)}return Le}function ls(){let Le=cs();for(;lt("and");){const Re=C[N];++N;const rt=cs();Le=new Q(Re,Le,rt)}return Le}function cs(){let Le;for(;lt("not");){const Re=C[N];++N;const rt=cs();Le=new ue(Re,rt)}return Le??Dr()}function Dr(){let Le=Cs();for(;;){let Re;if(lt("not","in"))Re=new n("not in",s.Identifier),N+=2;else if(lt("in"))Re=C[N++];else if(Se(s.ComparisonBinaryOperator))Re=C[N++];else break;const rt=Cs();Le=new Q(Re,Le,rt)}return Le}function Cs(){let Le=Ss();for(;Se(s.AdditiveBinaryOperator);){const Re=C[N];++N;const rt=Ss();Le=new Q(Re,Le,rt)}return Le}function us(){const Le=ts(Lr());return Se(s.OpenParen)?sr(Le):Le}function sr(Le){let Re=new E(Le,Kr());return Re=ts(Re),Se(s.OpenParen)&&(Re=sr(Re)),Re}function Kr(){J(s.OpenParen,"Expected opening parenthesis for arguments list");const Le=dr();return J(s.CloseParen,"Expected closing parenthesis for arguments list"),Le}function dr(){const Le=[];for(;!Se(s.CloseParen);){let Re;if(C[N].type===s.MultiplicativeBinaryOperator&&C[N].value==="*"){++N;const rt=fr();Re=new G(rt)}else if(Re=fr(),Se(s.Equals)){if(++N,!(Re instanceof x))throw new SyntaxError("Expected identifier for keyword argument");const rt=fr();Re=new F(Re,rt)}Le.push(Re),Se(s.Comma)&&++N}return Le}function yr(){const Le=[];let Re=!1;for(;!Se(s.CloseSquareBracket);)Se(s.Colon)?(Le.push(void 0),++N,Re=!0):(Le.push(fr()),Se(s.Colon)&&(++N,Re=!0));if(Le.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(Re){if(Le.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new B(...Le)}return Le[0]}function ts(Le){for(;Se(s.Dot)||Se(s.OpenSquareBracket);){const Re=C[N];++N;let rt;const Xt=Re.type===s.OpenSquareBracket;if(Xt)rt=yr(),J(s.CloseSquareBracket,"Expected closing square bracket");else if(rt=Lr(),rt.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Le=new T(Le,rt,Xt)}return Le}function Ss(){let Le=Hr();for(;Se(s.MultiplicativeBinaryOperator);){const Re=C[N++],rt=Hr();Le=new Q(Re,Le,rt)}return Le}function Hr(){let Le=Ds();for(;lt("is");){++N;const Re=lt("not");Re&&++N;const rt=Lr();if(!(rt instanceof x))throw new SyntaxError("Expected identifier for the test");Le=new ce(Le,Re,rt)}return Le}function Ds(){let Le=us();for(;Se(s.Pipe);){++N;let Re=Lr();if(!(Re instanceof x))throw new SyntaxError("Expected identifier for the filter");Se(s.OpenParen)&&(Re=sr(Re)),Le=new Y(Le,Re)}return Le}function Lr(){const Le=C[N++];switch(Le.type){case s.NumericLiteral:{const Re=Le.value;return Re.includes(".")?new O(Number(Re)):new z(Number(Re))}case s.StringLiteral:{let Re=Le.value;for(;Se(s.StringLiteral);)Re+=C[N++].value;return new K(Re)}case s.Identifier:return new x(Le.value);case s.OpenParen:{const Re=Gr();return J(s.CloseParen,"Expected closing parenthesis, got ${tokens[current].type} instead."),Re}case s.OpenSquareBracket:{const Re=[];for(;!Se(s.CloseSquareBracket);)Re.push(fr()),Se(s.Comma)&&++N;return++N,new H(Re)}case s.OpenCurlyBracket:{const Re=new Map;for(;!Se(s.CloseCurlyBracket);){const rt=fr();J(s.Colon,"Expected colon between key and value in object literal");const Xt=fr();Re.set(rt,Xt),Se(s.Comma)&&++N}return++N,new Z(Re)}default:throw new SyntaxError(`Unexpected token: ${Le.type}`)}}for(;N<C.length;)X.body.push(me());return X}function ve(C,X,N=1){X===void 0&&(X=C,C=0);const J=[];for(let ne=C;ne<X;ne+=N)J.push(ne);return J}function Fe(C,X,N,J=1){const ne=Math.sign(J);ne>=0?(X=(X??=0)<0?Math.max(C.length+X,0):Math.min(X,C.length),N=(N??=C.length)<0?Math.max(C.length+N,0):Math.min(N,C.length)):(X=(X??=C.length-1)<0?Math.max(C.length+X,-1):Math.min(X,C.length-1),N=(N??=-1)<-1?Math.max(C.length+N,-1):Math.min(N,C.length-1));const me=[];for(let Se=X;ne*Se<ne*N;Se+=J)me.push(C[Se]);return me}function Qe(C){return C.replace(/\b\w/g,X=>X.toUpperCase())}function xe(C){return q(new Date,C)}function q(C,X){const N=new Intl.DateTimeFormat(void 0,{month:"long"}),J=new Intl.DateTimeFormat(void 0,{month:"short"}),ne=me=>me<10?"0"+me:me.toString();return X.replace(/%[YmdbBHM%]/g,me=>{switch(me){case"%Y":return C.getFullYear().toString();case"%m":return ne(C.getMonth()+1);case"%d":return ne(C.getDate());case"%b":return J.format(C);case"%B":return N.format(C);case"%H":return ne(C.getHours());case"%M":return ne(C.getMinutes());case"%%":return"%";default:return me}})}function de(C){return C.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function W(C,X,N,J){if(J===0)return C;let ne=J==null||J<0?1/0:J;const me=X.length===0?new RegExp("(?=)","gu"):new RegExp(de(X),"gu");return C.replaceAll(me,Se=>ne>0?(--ne,N):Se)}var fe=class extends Error{},ke=class extends Error{},ye=class{type="RuntimeValue";value;builtins=new Map;constructor(C=void 0){this.value=C}__bool__(){return new Ie(!!this.value)}toString(){return String(this.value)}},ge=class extends ye{type="IntegerValue"},Ee=class extends ye{type="FloatValue";toString(){return this.value%1===0?this.value.toFixed(1):this.value.toString()}},we=class extends ye{type="StringValue";builtins=new Map([["upper",new Ne(()=>new we(this.value.toUpperCase()))],["lower",new Ne(()=>new we(this.value.toLowerCase()))],["strip",new Ne(()=>new we(this.value.trim()))],["title",new Ne(()=>new we(Qe(this.value)))],["capitalize",new Ne(()=>new we(this.value.charAt(0).toUpperCase()+this.value.slice(1)))],["length",new ge(this.value.length)],["rstrip",new Ne(()=>new we(this.value.trimEnd()))],["lstrip",new Ne(()=>new we(this.value.trimStart()))],["startswith",new Ne(C=>{if(C.length===0)throw new Error("startswith() requires at least one argument");const X=C[0];if(X instanceof we)return new Ie(this.value.startsWith(X.value));if(X instanceof be){for(const N of X.value){if(!(N instanceof we))throw new Error("startswith() tuple elements must be strings");if(this.value.startsWith(N.value))return new Ie(!0)}return new Ie(!1)}throw new Error("startswith() argument must be a string or tuple of strings")})],["endswith",new Ne(C=>{if(C.length===0)throw new Error("endswith() requires at least one argument");const X=C[0];if(X instanceof we)return new Ie(this.value.endsWith(X.value));if(X instanceof be){for(const N of X.value){if(!(N instanceof we))throw new Error("endswith() tuple elements must be strings");if(this.value.endsWith(N.value))return new Ie(!0)}return new Ie(!1)}throw new Error("endswith() argument must be a string or tuple of strings")})],["split",new Ne(C=>{const X=C[0]??new je;if(!(X instanceof we||X instanceof je))throw new Error("sep argument must be a string or null");const N=C[1]??new ge(-1);if(!(N instanceof ge))throw new Error("maxsplit argument must be a number");let J=[];if(X instanceof je){const ne=this.value.trimStart();for(const{0:me,index:Se}of ne.matchAll(/\S+/g)){if(N.value!==-1&&J.length>=N.value&&Se!==void 0){J.push(me+ne.slice(Se+me.length));break}J.push(me)}}else{if(X.value==="")throw new Error("empty separator");J=this.value.split(X.value),N.value!==-1&&J.length>N.value&&J.push(J.splice(N.value).join(X.value))}return new be(J.map(ne=>new we(ne)))})],["replace",new Ne(C=>{if(C.length<2)throw new Error("replace() requires at least two arguments");const X=C[0],N=C[1];if(!(X instanceof we&&N instanceof we))throw new Error("replace() arguments must be strings");let J;if(C.length>2?C[2].type==="KeywordArgumentsValue"?J=C[2].value.get("count")??new je:J=C[2]:J=new je,!(J instanceof ge||J instanceof je))throw new Error("replace() count argument must be a number or null");return new we(W(this.value,X.value,N.value,J.value))})]])},Ie=class extends ye{type="BooleanValue"},Oe=class extends ye{type="ObjectValue";__bool__(){return new Ie(this.value.size>0)}builtins=new Map([["get",new Ne(([C,X])=>{if(!(C instanceof we))throw new Error(`Object key must be a string: got ${C.type}`);return this.value.get(C.value)??X??new je})],["items",new Ne(()=>this.items())],["keys",new Ne(()=>this.keys())],["values",new Ne(()=>this.values())]]);items(){return new be(Array.from(this.value.entries()).map(([C,X])=>new be([new we(C),X])))}keys(){return new be(Array.from(this.value.keys()).map(C=>new we(C)))}values(){return new be(Array.from(this.value.values()))}},We=class extends Oe{type="KeywordArgumentsValue"},be=class extends ye{type="ArrayValue";builtins=new Map([["length",new ge(this.value.length)]]);__bool__(){return new Ie(this.value.length>0)}},st=class extends be{type="TupleValue"},Ne=class extends ye{type="FunctionValue"},je=class extends ye{type="NullValue"},et=class extends ye{type="UndefinedValue"},qe=class{constructor(C){this.parent=C}variables=new Map([["namespace",new Ne(C=>{if(C.length===0)return new Oe(new Map);if(C.length!==1||!(C[0]instanceof Oe))throw new Error("`namespace` expects either zero arguments or a single object argument");return C[0]})]]);tests=new Map([["boolean",C=>C.type==="BooleanValue"],["callable",C=>C instanceof Ne],["odd",C=>{if(!(C instanceof ge))throw new Error(`cannot odd on ${C.type}`);return C.value%2!==0}],["even",C=>{if(!(C instanceof ge))throw new Error(`cannot even on ${C.type}`);return C.value%2===0}],["false",C=>C.type==="BooleanValue"&&!C.value],["true",C=>C.type==="BooleanValue"&&C.value],["none",C=>C.type==="NullValue"],["string",C=>C.type==="StringValue"],["number",C=>C instanceof ge||C instanceof Ee],["integer",C=>C instanceof ge],["iterable",C=>C.type==="ArrayValue"||C.type==="StringValue"],["mapping",C=>C.type==="ObjectValue"],["lower",C=>{const X=C.value;return C.type==="StringValue"&&X===X.toLowerCase()}],["upper",C=>{const X=C.value;return C.type==="StringValue"&&X===X.toUpperCase()}],["none",C=>C.type==="NullValue"],["defined",C=>C.type!=="UndefinedValue"],["undefined",C=>C.type==="UndefinedValue"],["equalto",(C,X)=>C.value===X.value],["eq",(C,X)=>C.value===X.value]]);set(C,X){return this.declareVariable(C,Pt(X))}declareVariable(C,X){if(this.variables.has(C))throw new SyntaxError(`Variable already declared: ${C}`);return this.variables.set(C,X),X}setVariable(C,X){return this.variables.set(C,X),X}resolve(C){if(this.variables.has(C))return this;if(this.parent)return this.parent.resolve(C);throw new Error(`Unknown variable: ${C}`)}lookupVariable(C){try{return this.resolve(C).variables.get(C)??new et}catch{return new et}}};function Ye(C){C.set("false",!1),C.set("true",!0),C.set("none",null),C.set("raise_exception",X=>{throw new Error(X)}),C.set("range",ve),C.set("strftime_now",xe),C.set("True",!0),C.set("False",!1),C.set("None",null)}var Ze=class{global;constructor(C){this.global=C??new qe}run(C){return this.evaluate(C,this.global)}evaluateBinaryExpression(C,X){const N=this.evaluate(C.left,X);switch(C.operator.value){case"and":return N.__bool__().value?this.evaluate(C.right,X):N;case"or":return N.__bool__().value?N:this.evaluate(C.right,X)}const J=this.evaluate(C.right,X);switch(C.operator.value){case"==":return new Ie(N.value==J.value);case"!=":return new Ie(N.value!=J.value)}if(N instanceof et||J instanceof et){if(J instanceof et&&["in","not in"].includes(C.operator.value))return new Ie(C.operator.value==="not in");throw new Error(`Cannot perform operation ${C.operator.value} on undefined values`)}else{if(N instanceof je||J instanceof je)throw new Error("Cannot perform operation on null values");if(C.operator.value==="~")return new we(N.value.toString()+J.value.toString());if((N instanceof ge||N instanceof Ee)&&(J instanceof ge||J instanceof Ee)){const ne=N.value,me=J.value;switch(C.operator.value){case"+":case"-":case"*":{const Se=C.operator.value==="+"?ne+me:C.operator.value==="-"?ne-me:ne*me;return N instanceof Ee||J instanceof Ee?new Ee(Se):new ge(Se)}case"/":return new Ee(ne/me);case"%":{const Se=ne%me;return N instanceof Ee||J instanceof Ee?new Ee(Se):new ge(Se)}case"<":return new Ie(ne<me);case">":return new Ie(ne>me);case">=":return new Ie(ne>=me);case"<=":return new Ie(ne<=me)}}else if(N instanceof be&&J instanceof be)switch(C.operator.value){case"+":return new be(N.value.concat(J.value))}else if(J instanceof be){const ne=J.value.find(me=>me.value===N.value)!==void 0;switch(C.operator.value){case"in":return new Ie(ne);case"not in":return new Ie(!ne)}}}if(N instanceof we||J instanceof we)switch(C.operator.value){case"+":return new we(N.value.toString()+J.value.toString())}if(N instanceof we&&J instanceof we)switch(C.operator.value){case"in":return new Ie(J.value.includes(N.value));case"not in":return new Ie(!J.value.includes(N.value))}if(N instanceof we&&J instanceof Oe)switch(C.operator.value){case"in":return new Ie(J.value.has(N.value));case"not in":return new Ie(!J.value.has(N.value))}throw new SyntaxError(`Unknown operator "${C.operator.value}" between ${N.type} and ${J.type}`)}evaluateArguments(C,X){const N=[],J=new Map;for(const ne of C)if(ne.type==="SpreadExpression"){const me=ne,Se=this.evaluate(me.argument,X);if(!(Se instanceof be))throw new Error(`Cannot unpack non-iterable type: ${Se.type}`);for(const tt of Se.value)N.push(tt)}else if(ne.type==="KeywordArgumentExpression"){const me=ne;J.set(me.key.value,this.evaluate(me.value,X))}else{if(J.size>0)throw new Error("Positional arguments must come before keyword arguments");N.push(this.evaluate(ne,X))}return[N,J]}applyFilter(C,X,N){if(X.type==="Identifier"){const J=X;if(J.value==="tojson")return new we(It(C));if(C instanceof be)switch(J.value){case"list":return C;case"first":return C.value[0];case"last":return C.value[C.value.length-1];case"length":return new ge(C.value.length);case"reverse":return new be(C.value.reverse());case"sort":return new be(C.value.sort((ne,me)=>{if(ne.type!==me.type)throw new Error(`Cannot compare different types: ${ne.type} and ${me.type}`);switch(ne.type){case"IntegerValue":case"FloatValue":return ne.value-me.value;case"StringValue":return ne.value.localeCompare(me.value);default:throw new Error(`Cannot compare type: ${ne.type}`)}}));case"join":return new we(C.value.map(ne=>ne.value).join(""));case"string":return new we(It(C));case"unique":{const ne=new Set,me=[];for(const Se of C.value)ne.has(Se.value)||(ne.add(Se.value),me.push(Se));return new be(me)}default:throw new Error(`Unknown ArrayValue filter: ${J.value}`)}else if(C instanceof we)switch(J.value){case"length":case"upper":case"lower":case"title":case"capitalize":{const ne=C.builtins.get(J.value);if(ne instanceof Ne)return ne.value([],N);if(ne instanceof ge)return ne;throw new Error(`Unknown StringValue filter: ${J.value}`)}case"trim":return new we(C.value.trim());case"indent":return new we(C.value.split(`
`).map((ne,me)=>me===0||ne.length===0?ne:"    "+ne).join(`
`));case"join":case"string":return C;case"int":{const ne=parseInt(C.value,10);return new ge(isNaN(ne)?0:ne)}case"float":{const ne=parseFloat(C.value);return new Ee(isNaN(ne)?0:ne)}default:throw new Error(`Unknown StringValue filter: ${J.value}`)}else if(C instanceof ge||C instanceof Ee)switch(J.value){case"abs":return C instanceof ge?new ge(Math.abs(C.value)):new Ee(Math.abs(C.value));case"int":return new ge(Math.floor(C.value));case"float":return new Ee(C.value);default:throw new Error(`Unknown NumericValue filter: ${J.value}`)}else if(C instanceof Oe)switch(J.value){case"items":return new be(Array.from(C.value.entries()).map(([ne,me])=>new be([new we(ne),me])));case"length":return new ge(C.value.size);default:throw new Error(`Unknown ObjectValue filter: ${J.value}`)}else if(C instanceof Ie)switch(J.value){case"bool":return new Ie(C.value);case"int":return new ge(C.value?1:0);case"float":return new Ee(C.value?1:0);case"string":return new we(C.value?"true":"false");default:throw new Error(`Unknown BooleanValue filter: ${J.value}`)}throw new Error(`Cannot apply filter "${J.value}" to type: ${C.type}`)}else if(X.type==="CallExpression"){const J=X;if(J.callee.type!=="Identifier")throw new Error(`Unknown filter: ${J.callee.type}`);const ne=J.callee.value;if(ne==="tojson"){const[,me]=this.evaluateArguments(J.args,N),Se=me.get("indent")??new je;if(!(Se instanceof ge||Se instanceof je))throw new Error("If set, indent must be a number");return new we(It(C,Se.value))}else if(ne==="join"){let me;if(C instanceof we)me=Array.from(C.value);else if(C instanceof be)me=C.value.map(Ge=>Ge.value);else throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`);const[Se,tt]=this.evaluateArguments(J.args,N),lt=Se.at(0)??tt.get("separator")??new we("");if(!(lt instanceof we))throw new Error("separator must be a string");return new we(me.join(lt.value))}else if(ne==="int"||ne==="float"){const[me,Se]=this.evaluateArguments(J.args,N),tt=me.at(0)??Se.get("default")??(ne==="int"?new ge(0):new Ee(0));if(C instanceof we){const lt=ne==="int"?parseInt(C.value,10):parseFloat(C.value);return isNaN(lt)?tt:ne==="int"?new ge(lt):new Ee(lt)}else{if(C instanceof ge||C instanceof Ee)return C;if(C instanceof Ie)return ne==="int"?new ge(C.value?1:0):new Ee(C.value?1:0);throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`)}}else if(ne==="default"){const[me,Se]=this.evaluateArguments(J.args,N),tt=me[0]??new we(""),lt=me[1]??Se.get("boolean")??new Ie(!1);if(!(lt instanceof Ie))throw new Error("`default` filter flag must be a boolean");return C instanceof et||lt.value&&!C.__bool__().value?tt:C}if(C instanceof be){switch(ne){case"selectattr":case"rejectattr":{const me=ne==="selectattr";if(C.value.some($t=>!($t instanceof Oe)))throw new Error(`\`${ne}\` can only be applied to array of objects`);if(J.args.some($t=>$t.type!=="StringLiteral"))throw new Error(`arguments of \`${ne}\` must be strings`);const[Se,tt,lt]=J.args.map($t=>this.evaluate($t,N));let Ge;if(tt){const $t=N.tests.get(tt.value);if(!$t)throw new Error(`Unknown test: ${tt.value}`);Ge=$t}else Ge=(...$t)=>$t[0].__bool__().value;const Ct=C.value.filter($t=>{const _r=$t.value.get(Se.value),Bt=_r?Ge(_r,lt):!1;return me?Bt:!Bt});return new be(Ct)}case"map":{const[,me]=this.evaluateArguments(J.args,N);if(me.has("attribute")){const Se=me.get("attribute");if(!(Se instanceof we))throw new Error("attribute must be a string");const tt=me.get("default"),lt=C.value.map(Ge=>{if(!(Ge instanceof Oe))throw new Error("items in map must be an object");return Ge.value.get(Se.value)??tt??new et});return new be(lt)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${ne}`)}else if(C instanceof we){switch(ne){case"indent":{const[me,Se]=this.evaluateArguments(J.args,N),tt=me.at(0)??Se.get("width")??new ge(4);if(!(tt instanceof ge))throw new Error("width must be a number");const lt=me.at(1)??Se.get("first")??new Ie(!1),Ge=me.at(2)??Se.get("blank")??new Ie(!1),Ct=C.value.split(`
`),$t=" ".repeat(tt.value),_r=Ct.map((Bt,cr)=>!lt.value&&cr===0||!Ge.value&&Bt.length===0?Bt:$t+Bt);return new we(_r.join(`
`))}case"replace":{const me=C.builtins.get("replace");if(!(me instanceof Ne))throw new Error("replace filter not available");const[Se,tt]=this.evaluateArguments(J.args,N);return me.value([...Se,new We(tt)],N)}}throw new Error(`Unknown StringValue filter: ${ne}`)}else throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`)}throw new Error(`Unknown filter: ${X.type}`)}evaluateFilterExpression(C,X){const N=this.evaluate(C.operand,X);return this.applyFilter(N,C.filter,X)}evaluateTestExpression(C,X){const N=this.evaluate(C.operand,X),J=X.tests.get(C.test.value);if(!J)throw new Error(`Unknown test: ${C.test.value}`);const ne=J(N);return new Ie(C.negate?!ne:ne)}evaluateSelectExpression(C,X){return this.evaluate(C.test,X).__bool__().value?this.evaluate(C.lhs,X):new et}evaluateUnaryExpression(C,X){const N=this.evaluate(C.argument,X);switch(C.operator.value){case"not":return new Ie(!N.value);default:throw new SyntaxError(`Unknown operator: ${C.operator.value}`)}}evaluateTernaryExpression(C,X){return this.evaluate(C.condition,X).__bool__().value?this.evaluate(C.trueExpr,X):this.evaluate(C.falseExpr,X)}evalProgram(C,X){return this.evaluateBlock(C.body,X)}evaluateBlock(C,X){let N="";for(const J of C){const ne=this.evaluate(J,X);ne.type!=="NullValue"&&ne.type!=="UndefinedValue"&&(N+=ne.toString())}return new we(N)}evaluateIdentifier(C,X){return X.lookupVariable(C.value)}evaluateCallExpression(C,X){const[N,J]=this.evaluateArguments(C.args,X);J.size>0&&N.push(new We(J));const ne=this.evaluate(C.callee,X);if(ne.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${ne.type}`);return ne.value(N,X)}evaluateSliceExpression(C,X,N){if(!(C instanceof be||C instanceof we))throw new Error("Slice object must be an array or string");const J=this.evaluate(X.start,N),ne=this.evaluate(X.stop,N),me=this.evaluate(X.step,N);if(!(J instanceof ge||J instanceof et))throw new Error("Slice start must be numeric or undefined");if(!(ne instanceof ge||ne instanceof et))throw new Error("Slice stop must be numeric or undefined");if(!(me instanceof ge||me instanceof et))throw new Error("Slice step must be numeric or undefined");return C instanceof be?new be(Fe(C.value,J.value,ne.value,me.value)):new we(Fe(Array.from(C.value),J.value,ne.value,me.value).join(""))}evaluateMemberExpression(C,X){const N=this.evaluate(C.object,X);let J;if(C.computed){if(C.property.type==="SliceExpression")return this.evaluateSliceExpression(N,C.property,X);J=this.evaluate(C.property,X)}else J=new we(C.property.value);let ne;if(N instanceof Oe){if(!(J instanceof we))throw new Error(`Cannot access property with non-string: got ${J.type}`);ne=N.value.get(J.value)??N.builtins.get(J.value)}else if(N instanceof be||N instanceof we)if(J instanceof ge)ne=N.value.at(J.value),N instanceof we&&(ne=new we(N.value.at(J.value)));else if(J instanceof we)ne=N.builtins.get(J.value);else throw new Error(`Cannot access property with non-string/non-number: got ${J.type}`);else{if(!(J instanceof we))throw new Error(`Cannot access property with non-string: got ${J.type}`);ne=N.builtins.get(J.value)}return ne instanceof ye?ne:new et}evaluateSet(C,X){const N=C.value?this.evaluate(C.value,X):this.evaluateBlock(C.body,X);if(C.assignee.type==="Identifier"){const J=C.assignee.value;X.setVariable(J,N)}else if(C.assignee.type==="TupleLiteral"){const J=C.assignee;if(!(N instanceof be))throw new Error(`Cannot unpack non-iterable type in set: ${N.type}`);const ne=N.value;if(ne.length!==J.value.length)throw new Error(`Too ${J.value.length>ne.length?"few":"many"} items to unpack in set`);for(let me=0;me<J.value.length;++me){const Se=J.value[me];if(Se.type!=="Identifier")throw new Error(`Cannot unpack to non-identifier in set: ${Se.type}`);X.setVariable(Se.value,ne[me])}}else if(C.assignee.type==="MemberExpression"){const J=C.assignee,ne=this.evaluate(J.object,X);if(!(ne instanceof Oe))throw new Error("Cannot assign to member of non-object");if(J.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");ne.value.set(J.property.value,N)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(C.assignee)}`);return new je}evaluateIf(C,X){const N=this.evaluate(C.test,X);return this.evaluateBlock(N.__bool__().value?C.body:C.alternate,X)}evaluateFor(C,X){const N=new qe(X);let J,ne;if(C.iterable.type==="SelectExpression"){const Ge=C.iterable;ne=this.evaluate(Ge.lhs,N),J=Ge.test}else ne=this.evaluate(C.iterable,N);if(!(ne instanceof be||ne instanceof Oe))throw new Error(`Expected iterable or object type in for loop: got ${ne.type}`);ne instanceof Oe&&(ne=ne.keys());const me=[],Se=[];for(let Ge=0;Ge<ne.value.length;++Ge){const Ct=new qe(N),$t=ne.value[Ge];let _r;if(C.loopvar.type==="Identifier")_r=Bt=>Bt.setVariable(C.loopvar.value,$t);else if(C.loopvar.type==="TupleLiteral"){const Bt=C.loopvar;if($t.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${$t.type}`);const cr=$t;if(Bt.value.length!==cr.value.length)throw new Error(`Too ${Bt.value.length>cr.value.length?"few":"many"} items to unpack`);_r=Gr=>{for(let Qt=0;Qt<Bt.value.length;++Qt){if(Bt.value[Qt].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Bt.value[Qt].type}`);Gr.setVariable(Bt.value[Qt].value,cr.value[Qt])}}}else throw new Error(`Invalid loop variable(s): ${C.loopvar.type}`);J&&(_r(Ct),!this.evaluate(J,Ct).__bool__().value)||(me.push($t),Se.push(_r))}let tt="",lt=!0;for(let Ge=0;Ge<me.length;++Ge){const Ct=new Map([["index",new ge(Ge+1)],["index0",new ge(Ge)],["revindex",new ge(me.length-Ge)],["revindex0",new ge(me.length-Ge-1)],["first",new Ie(Ge===0)],["last",new Ie(Ge===me.length-1)],["length",new ge(me.length)],["previtem",Ge>0?me[Ge-1]:new et],["nextitem",Ge<me.length-1?me[Ge+1]:new et]]);N.setVariable("loop",new Oe(Ct)),Se[Ge](N);try{const $t=this.evaluateBlock(C.body,N);tt+=$t.value}catch($t){if($t instanceof ke)continue;if($t instanceof fe)break;throw $t}lt=!1}if(lt){const Ge=this.evaluateBlock(C.defaultBlock,N);tt+=Ge.value}return new we(tt)}evaluateMacro(C,X){return X.setVariable(C.name.value,new Ne((N,J)=>{const ne=new qe(J);N=N.slice();let me;N.at(-1)?.type==="KeywordArgumentsValue"&&(me=N.pop());for(let Se=0;Se<C.args.length;++Se){const tt=C.args[Se],lt=N[Se];if(tt.type==="Identifier"){const Ge=tt;if(!lt)throw new Error(`Missing positional argument: ${Ge.value}`);ne.setVariable(Ge.value,lt)}else if(tt.type==="KeywordArgumentExpression"){const Ge=tt,Ct=lt??me?.value.get(Ge.key.value)??this.evaluate(Ge.value,ne);ne.setVariable(Ge.key.value,Ct)}else throw new Error(`Unknown argument type: ${tt.type}`)}return this.evaluateBlock(C.body,ne)})),new je}evaluateCallStatement(C,X){const N=new Ne((tt,lt)=>{const Ge=new qe(lt);if(C.callerArgs)for(let Ct=0;Ct<C.callerArgs.length;++Ct){const $t=C.callerArgs[Ct];if($t.type!=="Identifier")throw new Error(`Caller parameter must be an identifier, got ${$t.type}`);Ge.setVariable($t.value,tt[Ct]??new et)}return this.evaluateBlock(C.body,Ge)}),[J,ne]=this.evaluateArguments(C.call.args,X);J.push(new We(ne));const me=this.evaluate(C.call.callee,X);if(me.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${me.type}`);const Se=new qe(X);return Se.setVariable("caller",N),me.value(J,Se)}evaluateFilterStatement(C,X){const N=this.evaluateBlock(C.body,X);return this.applyFilter(N,C.filter,X)}evaluate(C,X){if(!C)return new et;switch(C.type){case"Program":return this.evalProgram(C,X);case"Set":return this.evaluateSet(C,X);case"If":return this.evaluateIf(C,X);case"For":return this.evaluateFor(C,X);case"Macro":return this.evaluateMacro(C,X);case"CallStatement":return this.evaluateCallStatement(C,X);case"Break":throw new fe;case"Continue":throw new ke;case"IntegerLiteral":return new ge(C.value);case"FloatLiteral":return new Ee(C.value);case"StringLiteral":return new we(C.value);case"ArrayLiteral":return new be(C.value.map(N=>this.evaluate(N,X)));case"TupleLiteral":return new st(C.value.map(N=>this.evaluate(N,X)));case"ObjectLiteral":{const N=new Map;for(const[J,ne]of C.value){const me=this.evaluate(J,X);if(!(me instanceof we))throw new Error(`Object keys must be strings: got ${me.type}`);N.set(me.value,this.evaluate(ne,X))}return new Oe(N)}case"Identifier":return this.evaluateIdentifier(C,X);case"CallExpression":return this.evaluateCallExpression(C,X);case"MemberExpression":return this.evaluateMemberExpression(C,X);case"UnaryExpression":return this.evaluateUnaryExpression(C,X);case"BinaryExpression":return this.evaluateBinaryExpression(C,X);case"FilterExpression":return this.evaluateFilterExpression(C,X);case"FilterStatement":return this.evaluateFilterStatement(C,X);case"TestExpression":return this.evaluateTestExpression(C,X);case"SelectExpression":return this.evaluateSelectExpression(C,X);case"Ternary":return this.evaluateTernaryExpression(C,X);case"Comment":return new je;default:throw new SyntaxError(`Unknown node type: ${C.type}`)}}};function Pt(C){switch(typeof C){case"number":return Number.isInteger(C)?new ge(C):new Ee(C);case"string":return new we(C);case"boolean":return new Ie(C);case"undefined":return new et;case"object":return C===null?new je:Array.isArray(C)?new be(C.map(Pt)):new Oe(new Map(Object.entries(C).map(([X,N])=>[X,Pt(N)])));case"function":return new Ne((X,N)=>{const J=C(...X.map(ne=>ne.value))??null;return Pt(J)});default:throw new Error(`Cannot convert to runtime value: ${C}`)}}function It(C,X,N){const J=N??0;switch(C.type){case"NullValue":case"UndefinedValue":return"null";case"IntegerValue":case"FloatValue":case"StringValue":case"BooleanValue":return JSON.stringify(C.value);case"ArrayValue":case"ObjectValue":{const ne=X?" ".repeat(X):"",me=`
`+ne.repeat(J),Se=me+ne;if(C.type==="ArrayValue"){const tt=C.value.map(lt=>It(lt,X,J+1));return X?`[${Se}${tt.join(`,${Se}`)}${me}]`:`[${tt.join(", ")}]`}else{const tt=Array.from(C.value.entries()).map(([lt,Ge])=>{const Ct=`"${lt}": ${It(Ge,X,J+1)}`;return X?`${Se}${Ct}`:Ct});return X?`{${tt.join(",")}${me}}`:`{${tt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${C.type}`)}}var ht=`
`,br="{%- ",Wr=" -%}";function Or(C){switch(C.operator.type){case"MultiplicativeBinaryOperator":return 4;case"AdditiveBinaryOperator":return 3;case"ComparisonBinaryOperator":return 2;case"Identifier":return C.operator.value==="and"?1:C.operator.value==="in"||C.operator.value==="not in"?2:0}return 0}function Zr(C,X="	"){const N=typeof X=="number"?" ".repeat(X):X;return kr(C.body,0,N).replace(/\n$/,"")}function Gt(...C){return br+C.join(" ")+Wr}function kr(C,X,N){return C.map(J=>Vs(J,X,N)).join(ht)}function Vs(C,X,N){const J=N.repeat(X);switch(C.type){case"Program":return kr(C.body,X,N);case"If":return Us(C,X,N);case"For":return Fs(C,X,N);case"Set":return Os(C,X,N);case"Macro":return dt(C,X,N);case"Break":return J+Gt("break");case"Continue":return J+Gt("continue");case"CallStatement":return Es(C,X,N);case"FilterStatement":return Ut(C,X,N);case"Comment":return J+"{# "+C.value+" #}";default:return J+"{{- "+Tt(C)+" -}}"}}function Us(C,X,N){const J=N.repeat(X),ne=[];let me=C;for(;me&&(ne.push({test:me.test,body:me.body}),me.alternate.length===1&&me.alternate[0].type==="If");)me=me.alternate[0];let Se=J+Gt("if",Tt(ne[0].test))+ht+kr(ne[0].body,X+1,N);for(let tt=1;tt<ne.length;++tt)Se+=ht+J+Gt("elif",Tt(ne[tt].test))+ht+kr(ne[tt].body,X+1,N);return me&&me.alternate.length>0&&(Se+=ht+J+Gt("else")+ht+kr(me.alternate,X+1,N)),Se+=ht+J+Gt("endif"),Se}function Fs(C,X,N){const J=N.repeat(X);let ne="";if(C.iterable.type==="SelectExpression"){const Se=C.iterable;ne=`${Tt(Se.lhs)} if ${Tt(Se.test)}`}else ne=Tt(C.iterable);let me=J+Gt("for",Tt(C.loopvar),"in",ne)+ht+kr(C.body,X+1,N);return C.defaultBlock.length>0&&(me+=ht+J+Gt("else")+ht+kr(C.defaultBlock,X+1,N)),me+=ht+J+Gt("endfor"),me}function Os(C,X,N){const J=N.repeat(X),ne=Tt(C.assignee),me=C.value?Tt(C.value):"",Se=J+Gt("set",`${ne}${C.value?" = "+me:""}`);return C.body.length===0?Se:Se+ht+kr(C.body,X+1,N)+ht+J+Gt("endset")}function dt(C,X,N){const J=N.repeat(X),ne=C.args.map(Tt).join(", ");return J+Gt("macro",`${C.name.value}(${ne})`)+ht+kr(C.body,X+1,N)+ht+J+Gt("endmacro")}function Es(C,X,N){const J=N.repeat(X),ne=C.callerArgs&&C.callerArgs.length>0?`(${C.callerArgs.map(Tt).join(", ")})`:"",me=Tt(C.call);let Se=J+Gt(`call${ne}`,me)+ht;return Se+=kr(C.body,X+1,N)+ht,Se+=J+Gt("endcall"),Se}function Ut(C,X,N){const J=N.repeat(X),ne=C.filter.type==="Identifier"?C.filter.value:Tt(C.filter);let me=J+Gt("filter",ne)+ht;return me+=kr(C.body,X+1,N)+ht,me+=J+Gt("endfilter"),me}function Tt(C,X=-1){switch(C.type){case"SpreadExpression":return`*${Tt(C.argument)}`;case"Identifier":return C.value;case"IntegerLiteral":return`${C.value}`;case"FloatLiteral":return`${C.value}`;case"StringLiteral":return JSON.stringify(C.value);case"BinaryExpression":{const N=C,J=Or(N),ne=Tt(N.left,J),me=Tt(N.right,J+1),Se=`${ne} ${N.operator.value} ${me}`;return J<X?`(${Se})`:Se}case"UnaryExpression":{const N=C;return N.operator.value+(N.operator.value==="not"?" ":"")+Tt(N.argument,1/0)}case"CallExpression":{const N=C,J=N.args.map(Tt).join(", ");return`${Tt(N.callee)}(${J})`}case"MemberExpression":{const N=C;let J=Tt(N.object);["Identifier","MemberExpression","CallExpression","StringLiteral","IntegerLiteral","FloatLiteral","ArrayLiteral","TupleLiteral","ObjectLiteral"].includes(N.object.type)||(J=`(${J})`);let ne=Tt(N.property);return!N.computed&&N.property.type!=="Identifier"&&(ne=`(${ne})`),N.computed?`${J}[${ne}]`:`${J}.${ne}`}case"FilterExpression":{const N=C,J=Tt(N.operand,1/0);return N.filter.type==="CallExpression"?`${J} | ${Tt(N.filter)}`:`${J} | ${N.filter.value}`}case"SelectExpression":{const N=C;return`${Tt(N.lhs)} if ${Tt(N.test)}`}case"TestExpression":{const N=C;return`${Tt(N.operand)} is${N.negate?" not":""} ${N.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const N=C.value.map(Tt),J=C.type==="ArrayLiteral"?"[]":"()";return`${J[0]}${N.join(", ")}${J[1]}`}case"ObjectLiteral":return`{${Array.from(C.value.entries()).map(([J,ne])=>`${Tt(J)}: ${Tt(ne)}`).join(", ")}}`;case"SliceExpression":{const N=C,J=N.start?Tt(N.start):"",ne=N.stop?Tt(N.stop):"",me=N.step?`:${Tt(N.step)}`:"";return`${J}:${ne}${me}`}case"KeywordArgumentExpression":{const N=C;return`${N.key.value}=${Tt(N.value)}`}case"Ternary":{const N=C,J=`${Tt(N.trueExpr)} if ${Tt(N.condition,0)} else ${Tt(N.falseExpr)}`;return X>-1?`(${J})`:J}default:throw new Error(`Unknown expression type: ${C.type}`)}}var Ps=class{parsed;constructor(C){const X=p(C,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Ae(X)}render(C){const X=new qe;if(Ye(X),C)for(const[ne,me]of Object.entries(C))X.set(ne,me);return new Ze(X).run(this.parsed).value}format(C){return Zr(this.parsed,C?.indent||"	")}}},"./src/backends/onnx.js":(e,r,t)=>{var s;t.r(r),t.d(r,{Tensor:()=>i.Tensor,createInferenceSession:()=>I,deviceToExecutionProviders:()=>_,isONNXProxy:()=>$,isONNXTensor:()=>b});var n=t("./src/env.js"),o=t("?2ce3"),a=t("onnxruntime-web"),i=t("onnxruntime-common");const l=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),c=[];let p,d;const u=Symbol.for("onnxruntime");if(u in globalThis)d=globalThis[u];else if(n.apis.IS_NODE_ENV){switch(d=o??(s||(s=t.t(o,2))),process.platform){case"win32":c.push("dml");break;case"linux":process.arch==="x64"&&c.push("cuda");break}c.push("cpu"),p=["cpu"]}else d=a,n.apis.IS_WEBNN_AVAILABLE&&c.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),n.apis.IS_WEBGPU_AVAILABLE&&c.push("webgpu"),c.push("wasm"),p=["wasm"];const f=d.InferenceSession;function _(y=null){if(!y)return p;switch(y){case"auto":return c;case"gpu":return c.filter(T=>["webgpu","cuda","dml","webnn-gpu"].includes(T))}if(c.includes(y))return[l[y]??y];throw new Error(`Unsupported device: "${y}". Should be one of: ${c.join(", ")}.`)}let v=null;async function I(y,T,E){v&&await v;const x=f.create(y,T);v??=x;const S=await x;return S.config=E,S}function b(y){return y instanceof d.Tensor}const M=d?.env;M?.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!M.wasm.wasmPaths&&(M.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${n.env.version}/dist/`),M.wasm.proxy=!1),M?.webgpu&&(M.webgpu.powerPreference="high-performance");function $(){return M?.wasm?.proxy}n.env.backends.onnx=M},"./src/base/feature_extraction_utils.js":(e,r,t)=>{t.r(r),t.d(r,{FeatureExtractor:()=>a,validate_audio_inputs:()=>i});var s=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),o=t("./src/utils/hub.js");class a extends n.Callable{constructor(c){super(),this.config=c}static async from_pretrained(c,p={}){const d=await(0,o.getModelJSON)(c,s.FEATURE_EXTRACTOR_NAME,!0,p);return new this(d)}}function i(l,c){if(!(l instanceof Float32Array||l instanceof Float64Array))throw new Error(`${c} expects input to be a Float32Array or a Float64Array, but got ${l?.constructor?.name??typeof l} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(e,r,t)=>{t.r(r),t.d(r,{ImageProcessor:()=>y,center_to_corners_format:()=>d,post_process_instance_segmentation:()=>$,post_process_object_detection:()=>u,post_process_panoptic_segmentation:()=>M,post_process_semantic_segmentation:()=>f});var s=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");t("./src/utils/image.js");var a=t("./src/utils/core.js"),i=t("./src/utils/hub.js"),l=t("./src/utils/constants.js");function c(T,E,x=0,S=null){const z=T/E;let O=(0,o.bankers_round)(z)*E;return S!==null&&O>S&&(O=Math.floor(z)*E),O<x&&(O=Math.ceil(z)*E),O}function p([T,E],x){return[Math.max(Math.floor(T/x),1)*x,Math.max(Math.floor(E/x),1)*x]}function d([T,E,x,S]){return[T-x/2,E-S/2,T+x/2,E+S/2]}function u(T,E=.5,x=null,S=!1){const z=T.logits,O=T.pred_boxes,[K,H,D]=z.dims;if(x!==null&&x.length!==K)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Z=[];for(let Q=0;Q<K;++Q){let Y=x!==null?x[Q]:null,re={boxes:[],classes:[],scores:[]},te=z[Q],ce=O[Q];for(let ue=0;ue<H;++ue){let B=te[ue],F=[],G;if(S){G=B.sigmoid().data;for(let j=0;j<G.length;++j)G[j]>E&&F.push(j)}else{let j=(0,o.max)(B.data)[1];if(j===D-1||(G=(0,o.softmax)(B.data),G[j]<E))continue;F.push(j)}for(const j of F){let ae=ce[ue].data;ae=d(ae),Y!==null&&(ae=ae.map((Ae,ve)=>Ae*Y[(ve+1)%2])),re.boxes.push(ae),re.classes.push(j),re.scores.push(G[j])}}Z.push(re)}return Z}function f(T,E=null){const x=T.logits,S=x.dims[0];if(E!==null&&E.length!==S)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const z=[];for(let O=0;O<S;++O){const K=E!==null?E[O]:null;let H=x[O];K!==null&&(H=(0,n.interpolate)(H,K,"bilinear",!1));const[D,Z]=K??H.dims.slice(-2),Q=new n.Tensor("int32",new Int32Array(D*Z),[D,Z]),Y=H[0].data,re=Q.data;for(let ue=1;ue<H.dims[0];++ue){const B=H[ue].data;for(let F=0;F<B.length;++F)B[F]>Y[F]&&(Y[F]=B[F],re[F]=ue)}const te=new Array(H.dims[0]);for(let ue=0;ue<re.length;++ue){const B=re[ue];te[B]=B}const ce=te.filter(ue=>ue!==void 0);z.push({segmentation:Q,labels:ce})}return z}function _(T,E,x,S){const z=[],O=[],K=[];for(let H=0;H<T.dims[0];++H){const D=T[H],Z=E[H],Q=(0,o.max)(D.data)[1];if(Q===S)continue;const re=(0,o.softmax)(D.data)[Q];re>x&&(z.push(Z),O.push(re),K.push(Q))}return[z,O,K]}function v(T,E,x,S=.5,z=.8){const O=[];let K=0,H=0;const D=E[x].data;for(let Q=0;Q<T.length;++Q)T[Q]===x&&(O.push(Q),++K),D[Q]>=S&&++H;let Z=K>0&&H>0;return Z&&(Z=K/H>z),[Z,O]}function I(T,E,x,S,z,O=null,K=null){const[H,D]=K??T[0].dims,Z=new n.Tensor("int32",new Int32Array(H*D),[H,D]),Q=[];if(K!==null)for(let ue=0;ue<T.length;++ue)T[ue]=(0,n.interpolate)(T[ue],K,"bilinear",!1);const Y=new Int32Array(T[0].data.length),re=new Float32Array(T[0].data.length);for(let ue=0;ue<T.length;++ue){let B=E[ue];const F=T[ue].data;for(let G=0;G<F.length;++G)F[G]*=B,F[G]>re[G]&&(Y[G]=ue,re[G]=F[G])}let te=0;const ce=Z.data;for(let ue=0;ue<x.length;++ue){const B=x[ue],[F,G]=v(Y,T,ue,S,z);if(F){++te;for(const j of G)ce[j]=te;Q.push({id:te,label_id:B,score:E[ue]})}}return[Z,Q]}function b(T,E,x=28,S=3136,z=784*1280){if(T<x||E<x)throw new Error(`height:${T} or width:${E} must be larger than factor:${x}`);if(Math.max(T,E)/Math.min(T,E)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(T,E)/Math.min(T,E)}`);let O=Math.round(T/x)*x,K=Math.round(E/x)*x;if(O*K>z){const H=Math.sqrt(T*E/z);O=Math.floor(T/H/x)*x,K=Math.floor(E/H/x)*x}else if(O*K<S){const H=Math.sqrt(S/(T*E));O=Math.ceil(T*H/x)*x,K=Math.ceil(E*H/x)*x}return[O,K]}function M(T,E=.5,x=.5,S=.8,z=null,O=null){z===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),z=new Set);const K=T.class_queries_logits??T.logits,D=(T.masks_queries_logits??T.pred_masks).sigmoid();let[Z,Q,Y]=K.dims;if(Y-=1,O!==null&&O.length!==Z)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let re=[];for(let te=0;te<Z;++te){let ce=O!==null?O[te]:null,ue=K[te],B=D[te],[F,G,j]=_(ue,B,E,Y);if(j.length===0){let[ve,Fe]=ce??B.dims.slice(-2),Qe=new n.Tensor("int32",new Int32Array(ve*Fe).fill(-1),[ve,Fe]);re.push({segmentation:Qe,segments_info:[]});continue}let[ae,Ae]=I(F,G,j,x,S,z,ce);re.push({segmentation:ae,segments_info:Ae})}return re}function $(T,E=.5,x=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class y extends s.Callable{constructor(E){super(),this.image_mean=E.image_mean??E.mean,this.image_std=E.image_std??E.std,this.resample=E.resample??2,this.do_rescale=E.do_rescale??!0,this.rescale_factor=E.rescale_factor??1/255,this.do_normalize=E.do_normalize,this.do_thumbnail=E.do_thumbnail,this.size=E.size??E.image_size,this.do_resize=E.do_resize??this.size!==void 0,this.size_divisibility=E.size_divisibility??E.size_divisor,this.do_center_crop=E.do_center_crop,this.crop_size=E.crop_size,this.do_convert_rgb=E.do_convert_rgb??!0,this.do_crop_margin=E.do_crop_margin,this.pad_size=E.pad_size,this.do_pad=E.do_pad,this.min_pixels=E.min_pixels,this.max_pixels=E.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=E.do_flip_channel_order??!1,this.config=E}async thumbnail(E,x,S=2){const z=E.height,O=E.width,K=x.height,H=x.width;let D=Math.min(z,K),Z=Math.min(O,H);return D===z&&Z===O?E:(z>O?Z=Math.floor(O*D/z):O>z&&(D=Math.floor(z*Z/O)),await E.resize(Z,D,{resample:S}))}async crop_margin(E,x=200){const S=E.clone().grayscale(),z=(0,o.min)(S.data)[0],K=(0,o.max)(S.data)[0]-z;if(K===0)return E;const H=x/255;let D=S.width,Z=S.height,Q=0,Y=0;const re=S.data;for(let te=0;te<S.height;++te){const ce=te*S.width;for(let ue=0;ue<S.width;++ue)(re[ce+ue]-z)/K<H&&(D=Math.min(D,ue),Z=Math.min(Z,te),Q=Math.max(Q,ue),Y=Math.max(Y,te))}return E=await E.crop([D,Z,Q,Y]),E}pad_image(E,x,S,{mode:z="constant",center:O=!1,constant_values:K=0}={}){const[H,D,Z]=x;let Q,Y;if(typeof S=="number"?(Q=S,Y=S):S==="square"?Q=Y=Math.max(H,D):(Q=S.width,Y=S.height),Q!==D||Y!==H){const re=new Float32Array(Q*Y*Z);if(Array.isArray(K))for(let ue=0;ue<re.length;++ue)re[ue]=K[ue%Z];else K!==0&&re.fill(K);const[te,ce]=O?[Math.floor((Q-D)/2),Math.floor((Y-H)/2)]:[0,0];for(let ue=0;ue<H;++ue){const B=(ue+ce)*Q,F=ue*D;for(let G=0;G<D;++G){const j=(B+G+te)*Z,ae=(F+G)*Z;for(let Ae=0;Ae<Z;++Ae)re[j+Ae]=E[ae+Ae]}}if(z==="symmetric"){if(O)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const ue=H-1,B=D-1;for(let F=0;F<Y;++F){const G=F*Q,j=(0,a.calculateReflectOffset)(F,ue)*D;for(let ae=0;ae<Q;++ae){if(F<H&&ae<D)continue;const Ae=(G+ae)*Z,ve=(j+(0,a.calculateReflectOffset)(ae,B))*Z;for(let Fe=0;Fe<Z;++Fe)re[Ae+Fe]=E[ve+Fe]}}}E=re,x=[Y,Q,Z]}return[E,x]}rescale(E){for(let x=0;x<E.length;++x)E[x]=this.rescale_factor*E[x]}get_resize_output_image_size(E,x){const[S,z]=E.size;let O,K;if(this.do_thumbnail){const{height:H,width:D}=x;O=Math.min(H,D)}else Number.isInteger(x)?(O=x,K=this.config.max_size??O):x!==void 0&&(O=x.shortest_edge,K=x.longest_edge);if(O!==void 0||K!==void 0){const H=O===void 0?1:Math.max(O/S,O/z),D=S*H,Z=z*H,Q=K===void 0?1:Math.min(K/D,K/Z);let Y=Math.floor(Number((D*Q).toFixed(2))),re=Math.floor(Number((Z*Q).toFixed(2)));return this.size_divisibility!==void 0&&([Y,re]=p([Y,re],this.size_divisibility)),[Y,re]}else if(x!==void 0&&x.width!==void 0&&x.height!==void 0){let H=x.width,D=x.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Z=D/z,Q=H/S;Math.abs(1-Q)<Math.abs(1-Z)?Z=Q:Q=Z,D=c(Z*z,this.config.ensure_multiple_of),H=c(Q*S,this.config.ensure_multiple_of)}return[H,D]}else{if(this.size_divisibility!==void 0)return p([S,z],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const H=this.config.patch_size*this.config.merge_size;return b(z,S,H,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(x)}`)}}async resize(E){const[x,S]=this.get_resize_output_image_size(E,this.size);return await E.resize(x,S,{resample:this.resample})}async preprocess(E,{do_normalize:x=null,do_pad:S=null,do_convert_rgb:z=null,do_convert_grayscale:O=null,do_flip_channel_order:K=null}={}){this.do_crop_margin&&(E=await this.crop_margin(E));const[H,D]=E.size;if(z??this.do_convert_rgb?E=E.rgb():O&&(E=E.grayscale()),this.do_resize&&(E=await this.resize(E)),this.do_thumbnail&&(E=await this.thumbnail(E,this.size,this.resample)),this.do_center_crop){let te,ce;Number.isInteger(this.crop_size)?(te=this.crop_size,ce=this.crop_size):(te=this.crop_size.width,ce=this.crop_size.height),E=await E.center_crop(te,ce)}const Z=[E.height,E.width];let Q=Float32Array.from(E.data),Y=[E.height,E.width,E.channels];if(this.do_rescale&&this.rescale(Q),x??this.do_normalize){let te=this.image_mean;Array.isArray(this.image_mean)||(te=new Array(E.channels).fill(te));let ce=this.image_std;if(Array.isArray(this.image_std)||(ce=new Array(E.channels).fill(te)),te.length!==E.channels||ce.length!==E.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${te.length}) and \`image_std\` (${ce.length}) must match the number of channels in the image (${E.channels}).`);for(let ue=0;ue<Q.length;ue+=E.channels)for(let B=0;B<E.channels;++B)Q[ue+B]=(Q[ue+B]-te[B])/ce[B]}if(S??this.do_pad){if(this.pad_size)[Q,Y]=this.pad_image(Q,[E.height,E.width,E.channels],this.pad_size);else if(this.size_divisibility){const[te,ce]=p([Y[1],Y[0]],this.size_divisibility);[Q,Y]=this.pad_image(Q,Y,{width:te,height:ce})}}if(K??this.do_flip_channel_order){if(Y[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let te=0;te<Q.length;te+=3){const ce=Q[te];Q[te]=Q[te+2],Q[te+2]=ce}}const re=new n.Tensor("float32",Q,Y).permute(2,0,1);return{original_size:[D,H],reshaped_input_size:Z,pixel_values:re}}async _call(E,...x){Array.isArray(E)||(E=[E]);const S=await Promise.all(E.map(O=>this.preprocess(O)));return{pixel_values:(0,n.stack)(S.map(O=>O.pixel_values),0),original_sizes:S.map(O=>O.original_size),reshaped_input_sizes:S.map(O=>O.reshaped_input_size)}}static async from_pretrained(E,x={}){const S=await(0,i.getModelJSON)(E,l.IMAGE_PROCESSOR_NAME,!0,x);return new this(S)}}},"./src/base/processing_utils.js":(e,r,t)=>{t.r(r),t.d(r,{Processor:()=>a});var s=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),o=t("./src/utils/hub.js");class a extends n.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;static uses_chat_template_file=!1;constructor(l,c,p){super(),this.config=l,this.components=c,this.chat_template=p}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(l,c={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(l,{tokenize:!1,chat_template:this.chat_template??void 0,...c})}batch_decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...l)}decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...l)}async _call(l,...c){for(const p of[this.image_processor,this.feature_extractor,this.tokenizer])if(p)return p(l,...c);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(l,c={}){const[p,d,u]=await Promise.all([this.uses_processor_config?(0,o.getModelJSON)(l,s.PROCESSOR_NAME,!0,c):{},Promise.all(this.classes.filter(f=>f in this).map(async f=>{const _=await this[f].from_pretrained(l,c);return[f.replace(/_class$/,""),_]})).then(Object.fromEntries),this.uses_chat_template_file?(0,o.getModelText)(l,s.CHAT_TEMPLATE_NAME,!0,c):null]);return new this(p,d,u)}}},"./src/configs.js":(e,r,t)=>{t.r(r),t.d(r,{AutoConfig:()=>p,PretrainedConfig:()=>c,getCacheShapes:()=>i});var s=t("./src/utils/core.js"),n=t("./src/utils/hub.js");async function o(d,u){return await(0,n.getModelJSON)(d,"config.json",!0,u)}function a(d){const u={};let f={};switch(d.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"voxtral":case"smolvlm":case"gemma3n":f=a(d.text_config);break;case"moondream1":f=a(d.phi_config);break;case"musicgen":f=a(d.decoder);break;case"multi_modality":f=a(d.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":u.num_heads="n_head",u.num_layers="n_layer",u.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":case"modernbert-decoder":u.num_heads="num_attention_heads",u.num_layers="num_hidden_layers",u.hidden_size="hidden_size";break;case"llama":case"arcee":case"lfm2":case"smollm3":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":case"llava_qwen2":u.num_heads="num_key_value_heads",u.num_layers="num_hidden_layers",u.hidden_size="hidden_size",u.num_attention_heads="num_attention_heads",u.dim_kv="head_dim";break;case"qwen3":case"gemma":case"gemma2":case"gemma3_text":case"gemma3n_text":case"glm":case"helium":case"ernie4_5":u.num_heads="num_key_value_heads",u.num_layers="num_hidden_layers",u.dim_kv="head_dim";break;case"openelm":u.num_heads="num_kv_heads",u.num_layers="num_transformer_layers",u.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":u.num_heads="num_heads",u.num_layers="num_layers",u.hidden_size="hidden_size";break;case"bloom":u.num_heads="n_head",u.num_layers="n_layer",u.hidden_size="hidden_size";break;case"mpt":u.num_heads="n_heads",u.num_layers="n_layers",u.hidden_size="d_model";break;case"exaone":u.num_heads="num_key_value_heads",u.num_layers="num_layers",u.dim_kv="head_dim",u.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":u.num_decoder_layers="num_decoder_layers",u.num_decoder_heads="num_heads",u.decoder_dim_kv="d_kv",u.num_encoder_layers="num_layers",u.num_encoder_heads="num_heads",u.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":u.num_decoder_layers="decoder_layers",u.num_decoder_heads="decoder_attention_heads",u.decoder_hidden_size="d_model",u.num_encoder_layers="encoder_layers",u.num_encoder_heads="encoder_attention_heads",u.encoder_hidden_size="d_model";break;case"speecht5":u.num_decoder_layers="decoder_layers",u.num_decoder_heads="decoder_attention_heads",u.decoder_hidden_size="hidden_size",u.num_encoder_layers="encoder_layers",u.num_encoder_heads="encoder_attention_heads",u.encoder_hidden_size="hidden_size";break;case"trocr":u.num_encoder_layers=u.num_decoder_layers="decoder_layers",u.num_encoder_heads=u.num_decoder_heads="decoder_attention_heads",u.encoder_hidden_size=u.decoder_hidden_size="d_model";break;case"musicgen_decoder":u.num_encoder_layers=u.num_decoder_layers="num_hidden_layers",u.num_encoder_heads=u.num_decoder_heads="num_attention_heads",u.encoder_hidden_size=u.decoder_hidden_size="hidden_size";break;case"moonshine":u.num_decoder_layers="decoder_num_hidden_layers",u.num_decoder_heads="decoder_num_key_value_heads",u.num_encoder_layers="encoder_num_hidden_layers",u.num_encoder_heads="encoder_num_key_value_heads",u.encoder_hidden_size=u.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const v=a(d.decoder),I="num_decoder_layers"in v,b=(0,s.pick)(d,["model_type","is_encoder_decoder"]);return I?(b.num_decoder_layers=v.num_decoder_layers,b.num_decoder_heads=v.num_decoder_heads,b.decoder_hidden_size=v.decoder_hidden_size,b.num_encoder_layers=v.num_encoder_layers,b.num_encoder_heads=v.num_encoder_heads,b.encoder_hidden_size=v.encoder_hidden_size):(b.num_layers=v.num_layers,b.num_heads=v.num_heads,b.hidden_size=v.hidden_size),b}const _={...f,...(0,s.pick)(d,["model_type","multi_query","is_encoder_decoder"])};for(const v in u)_[v]=d[u[v]];return _}function i(d,u){if(d.model_type==="lfm2"){const f=u?.prefix??"past_key_values",_=f==="present"?"present":"past",v={},{layer_types:I,num_attention_heads:b,num_key_value_heads:M,hidden_size:$,conv_L_cache:y}=d,T=$/b,E=u?.batch_size??1;for(let x=0;x<I.length;++x)if(I[x]==="full_attention")for(const S of["key","value"])v[`${f}.${x}.${S}`]=[E,M,0,T];else if(I[x]==="conv")v[`${_}_conv.${x}`]=[E,$,y];else throw new Error(`Unsupported layer type: ${I[x]}`);return v}return l(d,u)}function l(d,{prefix:u="past_key_values",batch_size:f=1}={}){const _={},v=d.normalized_config;if(v.is_encoder_decoder&&"num_encoder_heads"in v&&"num_decoder_heads"in v){const I=v.encoder_dim_kv??v.encoder_hidden_size/v.num_encoder_heads,b=v.decoder_dim_kv??v.decoder_hidden_size/v.num_decoder_heads,M=[f,v.num_encoder_heads,0,I],$=[f,v.num_decoder_heads,0,b];for(let y=0;y<v.num_decoder_layers;++y)_[`${u}.${y}.encoder.key`]=M,_[`${u}.${y}.encoder.value`]=M,_[`${u}.${y}.decoder.key`]=$,_[`${u}.${y}.decoder.value`]=$}else{const I=v.num_heads,b=v.num_layers,M=v.dim_kv??v.hidden_size/(v.num_attention_heads??I);if(v.model_type==="falcon"){const $=[f*I,0,M];for(let y=0;y<b;++y)_[`${u}.${y}.key`]=$,_[`${u}.${y}.value`]=$}else if(v.multi_query){const $=[f*I,0,2*M];for(let y=0;y<b;++y)_[`${u}.${y}.key_value`]=$}else if(v.model_type==="bloom"){const $=[f*I,M,0],y=[f*I,0,M];for(let T=0;T<b;++T)_[`${u}.${T}.key`]=$,_[`${u}.${T}.value`]=y}else if(v.model_type==="openelm")for(let $=0;$<b;++$){const y=[f,I[$],0,M];_[`${u}.${$}.key`]=y,_[`${u}.${$}.value`]=y}else{const $=[f,I,0,M];for(let y=0;y<b;++y)_[`${u}.${y}.key`]=$,_[`${u}.${y}.value`]=$}}return _}class c{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(u){Object.assign(this,u),this.normalized_config=a(this)}static async from_pretrained(u,{progress_callback:f=null,config:_=null,cache_dir:v=null,local_files_only:I=!1,revision:b="main"}={}){_&&!(_ instanceof c)&&(_=new c(_));const M=_??await o(u,{progress_callback:f,config:_,cache_dir:v,local_files_only:I,revision:b});return new this(M)}}class p{static async from_pretrained(...u){return c.from_pretrained(...u)}}},"./src/env.js":(e,r,t)=>{t.r(r),t.d(r,{apis:()=>b,env:()=>x});var s=t("?db59"),n=t("?383f"),o=t("?fa4b");const a="3.7.1",i=typeof window<"u"&&typeof window.document<"u",l=typeof self<"u"&&["DedicatedWorkerGlobalScope","ServiceWorkerGlobalScope","SharedWorkerGlobalScope"].includes(self.constructor?.name),c=typeof self<"u"&&"caches"in self,p=typeof navigator<"u"&&"gpu"in navigator,d=typeof navigator<"u"&&"ml"in navigator,u=typeof process<"u",f=u&&process?.release?.name==="node",_=!S(s),v=!S(n),I=typeof globalThis.Deno<"u",b=Object.freeze({IS_BROWSER_ENV:i,IS_WEBWORKER_ENV:l,IS_WEB_CACHE_AVAILABLE:c,IS_WEBGPU_AVAILABLE:p,IS_WEBNN_AVAILABLE:d,IS_PROCESS_AVAILABLE:u,IS_NODE_ENV:f,IS_FS_AVAILABLE:_,IS_PATH_AVAILABLE:v}),M=_&&v;let $="./";if(M){const z=Object(import.meta).url;z?$=n.dirname(n.dirname(o.fileURLToPath(z))):typeof __dirname<"u"&&($=n.dirname(__dirname))}const y=M?n.join($,"/.cache/"):null,T="/models/",E=M?n.join($,T):T,x={version:a,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(i||l),localModelPath:E,useFS:_,useBrowserCache:c&&!I,useFSCache:_,cacheDir:y,useCustomCache:!1,customCache:null};function S(z){return Object.keys(z).length===0}},"./src/generation/configuration_utils.js":(e,r,t)=>{t.r(r),t.d(r,{GenerationConfig:()=>n});var s=t("./src/utils/core.js");class n{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(a){Object.assign(this,(0,s.pick)(a,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(e,r,t)=>{t.r(r),t.d(r,{ClassifierFreeGuidanceLogitsProcessor:()=>b,ForcedBOSTokenLogitsProcessor:()=>l,ForcedEOSTokenLogitsProcessor:()=>c,LogitsProcessor:()=>o,LogitsProcessorList:()=>i,LogitsWarper:()=>a,MinLengthLogitsProcessor:()=>_,MinNewTokensLengthLogitsProcessor:()=>v,NoBadWordsLogitsProcessor:()=>I,NoRepeatNGramLogitsProcessor:()=>u,RepetitionPenaltyLogitsProcessor:()=>f,SuppressTokensAtBeginLogitsProcessor:()=>p,TemperatureLogitsWarper:()=>M,TopKLogitsWarper:()=>y,TopPLogitsWarper:()=>$,WhisperTimeStampLogitsProcessor:()=>d});var s=t("./src/utils/generic.js");t("./src/utils/tensor.js");var n=t("./src/utils/maths.js");class o extends s.Callable{_call(E,x){throw Error("`_call` should be implemented in a subclass")}}class a extends s.Callable{_call(E,x){throw Error("`_call` should be implemented in a subclass")}}class i extends s.Callable{constructor(){super(),this.processors=[]}push(E){this.processors.push(E)}extend(E){this.processors.push(...E)}_call(E,x){let S=x;for(const z of this.processors)S=z(E,S);return S}[Symbol.iterator](){return this.processors.values()}}class l extends o{constructor(E){super(),this.bos_token_id=E}_call(E,x){for(let S=0;S<E.length;++S)if(E[S].length===1){const z=x[S].data;z.fill(-1/0),z[this.bos_token_id]=0}return x}}class c extends o{constructor(E,x){super(),this.max_length=E,this.eos_token_id=Array.isArray(x)?x:[x]}_call(E,x){for(let S=0;S<E.length;++S)if(E[S].length===this.max_length-1){const z=x[S].data;z.fill(-1/0);for(const O of this.eos_token_id)z[O]=0}return x}}class p extends o{constructor(E,x){super(),this.begin_suppress_tokens=E,this.begin_index=x}_call(E,x){for(let S=0;S<E.length;++S)if(E[S].length===this.begin_index){const z=x[S].data;for(const O of this.begin_suppress_tokens)z[O]=-1/0}return x}}class d extends o{constructor(E,x){super(),this.eos_token_id=Array.isArray(E.eos_token_id)?E.eos_token_id[0]:E.eos_token_id,this.no_timestamps_token_id=E.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=x.length,x.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=E.max_initial_timestamp_index}_call(E,x){for(let S=0;S<E.length;++S){const z=x[S].data;if(z[this.no_timestamps_token_id]=-1/0,E[S].length===this.begin_index-1){z.fill(-1/0),z[this.timestamp_begin]=0;continue}const O=E[S].slice(this.begin_index),K=O.length>=1&&O[O.length-1]>=this.timestamp_begin,H=O.length<2||O[O.length-2]>=this.timestamp_begin;if(K&&(H?z.subarray(this.timestamp_begin).fill(-1/0):z.subarray(0,this.eos_token_id).fill(-1/0)),E[S].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Y=this.timestamp_begin+this.max_initial_timestamp_index;z.subarray(Y+1).fill(-1/0)}const D=(0,n.log_softmax)(z),Z=Math.log(D.subarray(this.timestamp_begin).map(Math.exp).reduce((Y,re)=>Y+re)),Q=(0,n.max)(D.subarray(0,this.timestamp_begin))[0];Z>Q&&z.subarray(0,this.timestamp_begin).fill(-1/0)}return x}}class u extends o{constructor(E){super(),this.no_repeat_ngram_size=E}getNgrams(E){const x=E.length,S=[];for(let O=0;O<x+1-this.no_repeat_ngram_size;++O){const K=[];for(let H=0;H<this.no_repeat_ngram_size;++H)K.push(E[O+H]);S.push(K.map(Number))}const z=new Map;for(const O of S){const K=O.slice(0,O.length-1),H=JSON.stringify(K),D=z.get(H)??[];D.push(O[O.length-1]),z.set(H,D)}return z}getGeneratedNgrams(E,x){const S=x.slice(x.length+1-this.no_repeat_ngram_size,x.length);return E.get(JSON.stringify(S.map(Number)))??[]}calcBannedNgramTokens(E){const x=[];if(E.length+1<this.no_repeat_ngram_size)return x;{const S=this.getNgrams(E);return this.getGeneratedNgrams(S,E)}}_call(E,x){for(let S=0;S<E.length;++S){const z=x[S].data,O=this.calcBannedNgramTokens(E[S]);for(const K of O)z[K]=-1/0}return x}}class f extends o{constructor(E){super(),this.penalty=E}_call(E,x){for(let S=0;S<E.length;++S){const z=x[S].data;for(const O of new Set(E[S])){const K=Number(O);z[K]<0?z[K]*=this.penalty:z[K]/=this.penalty}}return x}}class _ extends o{constructor(E,x){super(),this.min_length=E,this.eos_token_id=Array.isArray(x)?x:[x]}_call(E,x){for(let S=0;S<E.length;++S)if(E[S].length<this.min_length){const z=x[S].data;for(const O of this.eos_token_id)z[O]=-1/0}return x}}class v extends o{constructor(E,x,S){super(),this.prompt_length_to_skip=E,this.min_new_tokens=x,this.eos_token_id=Array.isArray(S)?S:[S]}_call(E,x){for(let S=0;S<E.length;++S)if(E[S].length-this.prompt_length_to_skip<this.min_new_tokens){const O=x[S].data;for(const K of this.eos_token_id)O[K]=-1/0}return x}}class I extends o{constructor(E,x){super(),this.bad_words_ids=E,this.eos_token_id=Array.isArray(x)?x:[x]}_call(E,x){for(let S=0;S<E.length;++S){const z=x[S].data,O=E[S];for(const K of this.bad_words_ids){if(O.length<K.length-1)continue;let H=!0;for(let D=1;D<=K.length-1;++D)if(K.at(-D-1)!=O.at(-D)){H=!1;break}H&&(z[K.at(-1)]=-1/0)}}return x}}class b extends o{constructor(E){if(super(),E<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${E}.`);this.guidance_scale=E}_call(E,x){if(x.dims[0]!==2*E.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${x.dims[0]} for the logits and ${E.length} for the input ids.`);const S=E.length,z=x.slice([0,S],null),O=x.slice([S,x.dims[0]],null);for(let K=0;K<O.data.length;++K)O.data[K]+=(z.data[K]-O.data[K])*this.guidance_scale;return O}}class M extends a{constructor(E){super(),this.temperature=E}_call(E,x){const S=x.data;for(let z=0;z<S.length;++z)S[z]/=this.temperature;return x}}class $ extends a{constructor(E,{filter_value:x=-1/0,min_tokens_to_keep:S=1}={}){if(super(),E<0||E>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${E}`);if(!Number.isInteger(S)||S<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${S}`);this.top_p=E,this.filter_value=x,this.min_tokens_to_keep=S}}class y extends a{constructor(E,{filter_value:x=-1/0,min_tokens_to_keep:S=1}={}){if(super(),!Number.isInteger(E)||E<0)throw new Error(`\`top_k\` must be a positive integer, but is ${E}`);this.top_k=Math.max(E,S),this.filter_value=x}}},"./src/generation/logits_sampler.js":(e,r,t)=>{t.r(r),t.d(r,{LogitsSampler:()=>a});var s=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");t("./src/generation/configuration_utils.js");class a extends s.Callable{constructor(d){super(),this.generation_config=d}async _call(d){return this.sample(d)}async sample(d){throw Error("sample should be implemented in subclasses.")}getLogits(d,u){let f=d.dims.at(-1),_=d.data;if(u===-1)_=_.slice(-f);else{let v=u*f;_=_.slice(v,v+f)}return _}randomSelect(d){let u=0;for(let _=0;_<d.length;++_)u+=d[_];let f=Math.random()*u;for(let _=0;_<d.length;++_)if(f-=d[_],f<=0)return _;return 0}static getSampler(d){if(d.do_sample)return new l(d);if(d.num_beams>1)return new c(d);if(d.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${d.num_return_sequences}.`);return new i(d)}}class i extends a{async sample(d){const u=(0,o.max)(d.data)[1];return[[BigInt(u),0]]}}class l extends a{async sample(d){let u=d.dims.at(-1);this.generation_config.top_k>0&&(u=Math.min(this.generation_config.top_k,u));const[f,_]=await(0,n.topk)(d,u),v=(0,o.softmax)(f.data);return Array.from({length:this.generation_config.num_beams},()=>{const I=this.randomSelect(v);return[_.data[I],Math.log(v[I])]})}}class c extends a{async sample(d){let u=d.dims.at(-1);this.generation_config.top_k>0&&(u=Math.min(this.generation_config.top_k,u));const[f,_]=await(0,n.topk)(d,u),v=(0,o.softmax)(f.data);return Array.from({length:this.generation_config.num_beams},(I,b)=>[_.data[b],Math.log(v[b])])}}},"./src/generation/stopping_criteria.js":(e,r,t)=>{t.r(r),t.d(r,{EosTokenCriteria:()=>i,InterruptableStoppingCriteria:()=>l,MaxLengthCriteria:()=>a,StoppingCriteria:()=>n,StoppingCriteriaList:()=>o});var s=t("./src/utils/generic.js");class n extends s.Callable{_call(p,d){throw Error("StoppingCriteria needs to be subclassed")}}class o extends s.Callable{constructor(){super(),this.criteria=[]}push(p){this.criteria.push(p)}extend(p){p instanceof o?p=p.criteria:p instanceof n&&(p=[p]),this.criteria.push(...p)}_call(p,d){const u=new Array(p.length).fill(!1);for(const f of this.criteria){const _=f(p,d);for(let v=0;v<u.length;++v)u[v]||=_[v]}return u}[Symbol.iterator](){return this.criteria.values()}}class a extends n{constructor(p,d=null){super(),this.max_length=p,this.max_position_embeddings=d}_call(p){return p.map(d=>d.length>=this.max_length)}}class i extends n{constructor(p){super(),Array.isArray(p)||(p=[p]),this.eos_token_id=p}_call(p,d){return p.map(u=>{const f=u.at(-1);return this.eos_token_id.some(_=>f==_)})}}class l extends n{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(p,d){return new Array(p.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(e,r,t)=>{t.r(r),t.d(r,{BaseStreamer:()=>a,TextStreamer:()=>l,WhisperTextStreamer:()=>c});var s=t("./src/utils/core.js"),n=t("./src/tokenizers.js"),o=t("./src/env.js");class a{put(d){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const i=o.apis.IS_PROCESS_AVAILABLE?p=>process.stdout.write(p):p=>console.log(p);class l extends a{constructor(d,{skip_prompt:u=!1,callback_function:f=null,token_callback_function:_=null,skip_special_tokens:v=!0,decode_kwargs:I={},...b}={}){super(),this.tokenizer=d,this.skip_prompt=u,this.callback_function=f??i,this.token_callback_function=_,this.decode_kwargs={skip_special_tokens:v,...I,...b},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(d){if(d.length>1)throw Error("TextStreamer only supports batch size of 1");const u=this.next_tokens_are_prompt;if(u&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const f=d[0];this.token_callback_function?.(f),this.token_cache=(0,s.mergeArrays)(this.token_cache,f);const _=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let v;u||_.endsWith(`
`)?(v=_.slice(this.print_len),this.token_cache=[],this.print_len=0):_.length>0&&(0,n.is_chinese_char)(_.charCodeAt(_.length-1))?(v=_.slice(this.print_len),this.print_len+=v.length):(v=_.slice(this.print_len,_.lastIndexOf(" ")+1),this.print_len+=v.length),this.on_finalized_text(v,!1)}end(){let d;this.token_cache.length>0?(d=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):d="",this.next_tokens_are_prompt=!0,this.on_finalized_text(d,!0)}on_finalized_text(d,u){d.length>0&&this.callback_function?.(d),u&&this.callback_function===i&&o.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class c extends l{constructor(d,{skip_prompt:u=!1,callback_function:f=null,token_callback_function:_=null,on_chunk_start:v=null,on_chunk_end:I=null,on_finalize:b=null,time_precision:M=.02,skip_special_tokens:$=!0,decode_kwargs:y={}}={}){super(d,{skip_prompt:u,skip_special_tokens:$,callback_function:f,token_callback_function:_,decode_kwargs:y}),this.timestamp_begin=d.timestamp_begin,this.on_chunk_start=v,this.on_chunk_end=I,this.on_finalize=b,this.time_precision=M,this.waiting_for_timestamp=!1}put(d){if(d.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const u=d[0];if(u.length===1){const f=Number(u[0])-this.timestamp_begin;if(f>=0){const _=f*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(_):this.on_chunk_start?.(_),this.waiting_for_timestamp=!this.waiting_for_timestamp,this.token_callback_function?.(u);return}}return super.put(d)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(e,r,t)=>{t.r(r),t.d(r,{ASTForAudioClassification:()=>Hs,ASTModel:()=>lo,ASTPreTrainedModel:()=>Fn,AlbertForMaskedLM:()=>St,AlbertForQuestionAnswering:()=>Ue,AlbertForSequenceClassification:()=>Je,AlbertModel:()=>Xe,AlbertPreTrainedModel:()=>Ke,ArceeForCausalLM:()=>Tr,ArceeModel:()=>Rt,ArceePreTrainedModel:()=>At,AutoModel:()=>J0,AutoModelForAudioClassification:()=>fv,AutoModelForAudioFrameClassification:()=>wv,AutoModelForAudioTextToText:()=>Cv,AutoModelForCTC:()=>_v,AutoModelForCausalLM:()=>nv,AutoModelForDepthEstimation:()=>vv,AutoModelForDocumentQuestionAnswering:()=>Mv,AutoModelForImageClassification:()=>lv,AutoModelForImageFeatureExtraction:()=>Ev,AutoModelForImageMatting:()=>bv,AutoModelForImageSegmentation:()=>cv,AutoModelForImageTextToText:()=>Pv,AutoModelForImageToImage:()=>yv,AutoModelForMaskGeneration:()=>hv,AutoModelForMaskedLM:()=>ov,AutoModelForNormalEstimation:()=>xv,AutoModelForObjectDetection:()=>pv,AutoModelForPoseEstimation:()=>Tv,AutoModelForQuestionAnswering:()=>iv,AutoModelForSemanticSegmentation:()=>uv,AutoModelForSeq2SeqLM:()=>ev,AutoModelForSequenceClassification:()=>Y0,AutoModelForSpeechSeq2Seq:()=>tv,AutoModelForTextToSpectrogram:()=>rv,AutoModelForTextToWaveform:()=>sv,AutoModelForTokenClassification:()=>Z0,AutoModelForUniversalSegmentation:()=>dv,AutoModelForVision2Seq:()=>av,AutoModelForXVector:()=>gv,AutoModelForZeroShotObjectDetection:()=>mv,BartForConditionalGeneration:()=>pr,BartForSequenceClassification:()=>zr,BartModel:()=>Zt,BartPretrainedModel:()=>qr,BaseModelOutput:()=>ke,BeitForImageClassification:()=>Gd,BeitModel:()=>Wd,BeitPreTrainedModel:()=>Va,BertForMaskedLM:()=>Ee,BertForQuestionAnswering:()=>Oe,BertForSequenceClassification:()=>we,BertForTokenClassification:()=>Ie,BertModel:()=>ge,BertPreTrainedModel:()=>ye,BlenderbotForConditionalGeneration:()=>ar,BlenderbotModel:()=>mr,BlenderbotPreTrainedModel:()=>Jt,BlenderbotSmallForConditionalGeneration:()=>An,BlenderbotSmallModel:()=>Ws,BlenderbotSmallPreTrainedModel:()=>Rr,BloomForCausalLM:()=>md,BloomModel:()=>pd,BloomPreTrainedModel:()=>ka,CLIPModel:()=>wo,CLIPPreTrainedModel:()=>ks,CLIPSegForImageSegmentation:()=>xo,CLIPSegModel:()=>vo,CLIPSegPreTrainedModel:()=>dn,CLIPTextModel:()=>wi,CLIPTextModelWithProjection:()=>Mo,CLIPVisionModel:()=>Mi,CLIPVisionModelWithProjection:()=>bi,CamembertForMaskedLM:()=>Ge,CamembertForQuestionAnswering:()=>_r,CamembertForSequenceClassification:()=>Ct,CamembertForTokenClassification:()=>$t,CamembertModel:()=>lt,CamembertPreTrainedModel:()=>tt,CausalLMOutput:()=>hn,CausalLMOutputWithPast:()=>$v,ChineseCLIPModel:()=>yo,ChineseCLIPPreTrainedModel:()=>yi,ClapAudioModelWithProjection:()=>Hm,ClapModel:()=>Gm,ClapPreTrainedModel:()=>$i,ClapTextModelWithProjection:()=>Km,CodeGenForCausalLM:()=>De,CodeGenModel:()=>Te,CodeGenPreTrainedModel:()=>ie,CohereForCausalLM:()=>Hu,CohereModel:()=>Ku,CoherePreTrainedModel:()=>ya,ConvBertForMaskedLM:()=>Ut,ConvBertForQuestionAnswering:()=>C,ConvBertForSequenceClassification:()=>Tt,ConvBertForTokenClassification:()=>Ps,ConvBertModel:()=>Es,ConvBertPreTrainedModel:()=>dt,ConvNextForImageClassification:()=>Rp,ConvNextModel:()=>Bp,ConvNextPreTrainedModel:()=>sl,ConvNextV2ForImageClassification:()=>Np,ConvNextV2Model:()=>jp,ConvNextV2PreTrainedModel:()=>nl,DFineForObjectDetection:()=>np,DFineModel:()=>sp,DFinePreTrainedModel:()=>qa,DPTForDepthEstimation:()=>bp,DPTModel:()=>Mp,DPTPreTrainedModel:()=>el,DacDecoderModel:()=>Dh,DacDecoderOutput:()=>Ah,DacEncoderModel:()=>Oh,DacEncoderOutput:()=>Ih,DacModel:()=>Fh,DacPreTrainedModel:()=>Li,DebertaForMaskedLM:()=>Gr,DebertaForQuestionAnswering:()=>es,DebertaForSequenceClassification:()=>Qt,DebertaForTokenClassification:()=>fr,DebertaModel:()=>cr,DebertaPreTrainedModel:()=>Bt,DebertaV2ForMaskedLM:()=>cs,DebertaV2ForQuestionAnswering:()=>us,DebertaV2ForSequenceClassification:()=>Dr,DebertaV2ForTokenClassification:()=>Cs,DebertaV2Model:()=>ls,DebertaV2PreTrainedModel:()=>ur,DecisionTransformerModel:()=>hh,DecisionTransformerPreTrainedModel:()=>mh,DeiTForImageClassification:()=>cp,DeiTModel:()=>lp,DeiTPreTrainedModel:()=>Xa,DepthAnythingForDepthEstimation:()=>vp,DepthAnythingPreTrainedModel:()=>yp,DepthProForDepthEstimation:()=>Cp,DepthProPreTrainedModel:()=>Pp,DetrForObjectDetection:()=>Hd,DetrForSegmentation:()=>Ua,DetrModel:()=>Kd,DetrObjectDetectionOutput:()=>Wa,DetrPreTrainedModel:()=>xi,DetrSegmentationOutput:()=>qd,Dinov2ForImageClassification:()=>Up,Dinov2Model:()=>Vp,Dinov2PreTrainedModel:()=>ol,Dinov2WithRegistersForImageClassification:()=>Gp,Dinov2WithRegistersModel:()=>Wp,Dinov2WithRegistersPreTrainedModel:()=>il,DistilBertForMaskedLM:()=>Ss,DistilBertForQuestionAnswering:()=>ts,DistilBertForSequenceClassification:()=>dr,DistilBertForTokenClassification:()=>yr,DistilBertModel:()=>Kr,DistilBertPreTrainedModel:()=>sr,DonutSwinModel:()=>zp,DonutSwinPreTrainedModel:()=>Lp,EfficientNetForImageClassification:()=>eh,EfficientNetModel:()=>Zm,EfficientNetPreTrainedModel:()=>gl,ElectraForMaskedLM:()=>J,ElectraForQuestionAnswering:()=>Se,ElectraForSequenceClassification:()=>ne,ElectraForTokenClassification:()=>me,ElectraModel:()=>N,ElectraPreTrainedModel:()=>X,Ernie4_5_ForCausalLM:()=>jm,Ernie4_5_Model:()=>Rm,Ernie4_5_PretrainedModel:()=>pl,EsmForMaskedLM:()=>Lr,EsmForSequenceClassification:()=>Le,EsmForTokenClassification:()=>Re,EsmModel:()=>Ds,EsmPreTrainedModel:()=>Hr,ExaoneForCausalLM:()=>zu,ExaoneModel:()=>Lu,ExaonePreTrainedModel:()=>fa,FalconForCausalLM:()=>Wm,FalconModel:()=>Um,FalconPreTrainedModel:()=>hl,FastViTForImageClassification:()=>Fd,FastViTModel:()=>Ad,FastViTPreTrainedModel:()=>za,Florence2ForConditionalGeneration:()=>hi,Florence2PreTrainedModel:()=>mi,GLPNForDepthEstimation:()=>Dp,GLPNModel:()=>Op,GLPNPreTrainedModel:()=>rl,GPT2LMHeadModel:()=>To,GPT2Model:()=>Nn,GPT2PreTrainedModel:()=>jn,GPTBigCodeForCausalLM:()=>V,GPTBigCodeModel:()=>L,GPTBigCodePreTrainedModel:()=>A,GPTJForCausalLM:()=>P,GPTJModel:()=>m,GPTJPreTrainedModel:()=>Gn,GPTNeoForCausalLM:()=>Po,GPTNeoModel:()=>Un,GPTNeoPreTrainedModel:()=>mn,GPTNeoXForCausalLM:()=>So,GPTNeoXModel:()=>Co,GPTNeoXPreTrainedModel:()=>Wn,Gemma2ForCausalLM:()=>Ju,Gemma2Model:()=>Xu,Gemma2PreTrainedModel:()=>xa,Gemma3ForCausalLM:()=>Zu,Gemma3Model:()=>Yu,Gemma3PreTrainedModel:()=>Ta,Gemma3nForConditionalGeneration:()=>Dn,Gemma3nPreTrainedModel:()=>qs,GemmaForCausalLM:()=>Qu,GemmaModel:()=>qu,GemmaPreTrainedModel:()=>va,GlmForCausalLM:()=>Du,GlmModel:()=>Ou,GlmPreTrainedModel:()=>_a,GraniteForCausalLM:()=>Gu,GraniteModel:()=>Wu,GranitePreTrainedModel:()=>ba,GroundingDinoForObjectDetection:()=>Hp,GroundingDinoPreTrainedModel:()=>Kp,GroupViTModel:()=>Id,GroupViTPreTrainedModel:()=>kd,HeliumForCausalLM:()=>Fu,HeliumModel:()=>Au,HeliumPreTrainedModel:()=>ha,HieraForImageClassification:()=>dp,HieraModel:()=>up,HieraPreTrainedModel:()=>Ja,HubertForCTC:()=>xm,HubertForSequenceClassification:()=>Tm,HubertModel:()=>vm,HubertPreTrainedModel:()=>B0,IJepaForImageClassification:()=>yd,IJepaModel:()=>bd,IJepaPreTrainedModel:()=>Oa,Idefics3ForConditionalGeneration:()=>Ln,Idefics3PreTrainedModel:()=>gi,ImageMattingOutput:()=>p_,JAISLMHeadModel:()=>pn,JAISModel:()=>Eo,JAISPreTrainedModel:()=>Vn,JinaCLIPModel:()=>cn,JinaCLIPPreTrainedModel:()=>ln,JinaCLIPTextModel:()=>Qr,JinaCLIPVisionModel:()=>un,Lfm2ForCausalLM:()=>$u,Lfm2Model:()=>vi,Lfm2PreTrainedModel:()=>Is,LiteWhisperForConditionalGeneration:()=>ui,LlamaForCausalLM:()=>wt,LlamaModel:()=>ot,LlamaPreTrainedModel:()=>He,LlavaForConditionalGeneration:()=>On,LlavaOnevisionForConditionalGeneration:()=>di,LlavaPreTrainedModel:()=>go,LlavaQwen2ForCausalLM:()=>nn,LongT5ForConditionalGeneration:()=>Wt,LongT5Model:()=>rr,LongT5PreTrainedModel:()=>Kt,M2M100ForConditionalGeneration:()=>sm,M2M100Model:()=>rm,M2M100PreTrainedModel:()=>cl,MBartForCausalLM:()=>xr,MBartForConditionalGeneration:()=>gr,MBartForSequenceClassification:()=>ss,MBartModel:()=>ps,MBartPreTrainedModel:()=>Br,MPNetForMaskedLM:()=>sn,MPNetForQuestionAnswering:()=>k,MPNetForSequenceClassification:()=>In,MPNetForTokenClassification:()=>le,MPNetModel:()=>rn,MPNetPreTrainedModel:()=>ds,MT5ForConditionalGeneration:()=>Ir,MT5Model:()=>rs,MT5PreTrainedModel:()=>Nr,MarianMTModel:()=>tm,MarianModel:()=>em,MarianPreTrainedModel:()=>ll,MaskFormerForInstanceSegmentation:()=>Fp,MaskFormerModel:()=>Ap,MaskFormerPreTrainedModel:()=>tl,MaskedLMOutput:()=>Cr,Metric3DForDepthEstimation:()=>$p,Metric3DPreTrainedModel:()=>Sp,Metric3Dv2ForDepthEstimation:()=>Ip,Metric3Dv2PreTrainedModel:()=>kp,MgpstrForSceneTextRecognition:()=>Mh,MgpstrModelOutput:()=>gh,MgpstrPreTrainedModel:()=>wh,MimiDecoderModel:()=>kh,MimiDecoderOutput:()=>Ch,MimiEncoderModel:()=>$h,MimiEncoderOutput:()=>Ph,MimiModel:()=>Sh,MimiPreTrainedModel:()=>Di,MistralForCausalLM:()=>Bm,MistralModel:()=>zm,MistralPreTrainedModel:()=>dl,MobileBertForMaskedLM:()=>Ls,MobileBertForQuestionAnswering:()=>zs,MobileBertForSequenceClassification:()=>$s,MobileBertModel:()=>Xt,MobileBertPreTrainedModel:()=>rt,MobileLLMForCausalLM:()=>Ru,MobileLLMModel:()=>Bu,MobileLLMPreTrainedModel:()=>ga,MobileNetV1ForImageClassification:()=>rh,MobileNetV1ForSemanticSegmentation:()=>sh,MobileNetV1Model:()=>th,MobileNetV1PreTrainedModel:()=>Ii,MobileNetV2ForImageClassification:()=>oh,MobileNetV2ForSemanticSegmentation:()=>ih,MobileNetV2Model:()=>nh,MobileNetV2PreTrainedModel:()=>Ai,MobileNetV3ForImageClassification:()=>lh,MobileNetV3ForSemanticSegmentation:()=>ch,MobileNetV3Model:()=>ah,MobileNetV3PreTrainedModel:()=>Fi,MobileNetV4ForImageClassification:()=>dh,MobileNetV4ForSemanticSegmentation:()=>ph,MobileNetV4Model:()=>uh,MobileNetV4PreTrainedModel:()=>Oi,MobileViTForImageClassification:()=>zd,MobileViTModel:()=>Ld,MobileViTPreTrainedModel:()=>Ba,MobileViTV2ForImageClassification:()=>Rd,MobileViTV2Model:()=>Bd,MobileViTV2PreTrainedModel:()=>Ra,ModelOutput:()=>fe,ModernBertDecoderForCausalLM:()=>Wr,ModernBertDecoderModel:()=>br,ModernBertDecoderPreTrainedModel:()=>ht,ModernBertForMaskedLM:()=>Ze,ModernBertForSequenceClassification:()=>Pt,ModernBertForTokenClassification:()=>It,ModernBertModel:()=>Ye,ModernBertPreTrainedModel:()=>qe,Moondream1ForConditionalGeneration:()=>pi,MoonshineForConditionalGeneration:()=>_o,MoonshineModel:()=>ho,MoonshinePreTrainedModel:()=>mo,MptForCausalLM:()=>_d,MptModel:()=>hd,MptPreTrainedModel:()=>Ia,MultiModalityCausalLM:()=>fh,MultiModalityPreTrainedModel:()=>_h,MusicgenForCausalLM:()=>V0,MusicgenForConditionalGeneration:()=>Ml,MusicgenModel:()=>N0,MusicgenPreTrainedModel:()=>wl,NeoBertForMaskedLM:()=>st,NeoBertForQuestionAnswering:()=>et,NeoBertForSequenceClassification:()=>Ne,NeoBertForTokenClassification:()=>je,NeoBertModel:()=>be,NeoBertPreTrainedModel:()=>We,NomicBertModel:()=>Zr,NomicBertPreTrainedModel:()=>Or,OPTForCausalLM:()=>gd,OPTModel:()=>fd,OPTPreTrainedModel:()=>Aa,Olmo2ForCausalLM:()=>Uu,Olmo2Model:()=>Vu,Olmo2PreTrainedModel:()=>Ma,OlmoForCausalLM:()=>Nu,OlmoModel:()=>ju,OlmoPreTrainedModel:()=>wa,OpenELMForCausalLM:()=>td,OpenELMModel:()=>ed,OpenELMPreTrainedModel:()=>Ea,OwlViTForObjectDetection:()=>Nd,OwlViTModel:()=>jd,OwlViTPreTrainedModel:()=>ja,Owlv2ForObjectDetection:()=>Ud,Owlv2Model:()=>Vd,Owlv2PreTrainedModel:()=>Na,PaliGemmaForConditionalGeneration:()=>fi,PaliGemmaPreTrainedModel:()=>_i,PatchTSMixerForPrediction:()=>xh,PatchTSMixerModel:()=>vh,PatchTSMixerPreTrainedModel:()=>yl,PatchTSTForPrediction:()=>yh,PatchTSTModel:()=>bh,PatchTSTPreTrainedModel:()=>bl,Phi3ForCausalLM:()=>dd,Phi3Model:()=>ud,Phi3PreTrainedModel:()=>$a,Phi3VForCausalLM:()=>Bn,Phi3VPreTrainedModel:()=>zn,PhiForCausalLM:()=>cd,PhiModel:()=>ld,PhiPreTrainedModel:()=>Sa,PreTrainedModel:()=>W,PretrainedMixin:()=>jt,PvtForImageClassification:()=>Ed,PvtModel:()=>Td,PvtPreTrainedModel:()=>Da,PyAnnoteForAudioFrameClassification:()=>cm,PyAnnoteModel:()=>lm,PyAnnotePreTrainedModel:()=>ul,QuestionAnsweringModelOutput:()=>Fr,Qwen2ForCausalLM:()=>sd,Qwen2Model:()=>rd,Qwen2PreTrainedModel:()=>Pa,Qwen2VLForConditionalGeneration:()=>ad,Qwen2VLPreTrainedModel:()=>id,Qwen3ForCausalLM:()=>od,Qwen3Model:()=>nd,Qwen3PreTrainedModel:()=>Ca,RFDetrForObjectDetection:()=>tp,RFDetrModel:()=>ep,RFDetrObjectDetectionOutput:()=>rp,RFDetrPreTrainedModel:()=>Ha,RTDetrForObjectDetection:()=>Xd,RTDetrModel:()=>Qd,RTDetrObjectDetectionOutput:()=>$o,RTDetrPreTrainedModel:()=>Ga,RTDetrV2ForObjectDetection:()=>Yd,RTDetrV2Model:()=>Jd,RTDetrV2ObjectDetectionOutput:()=>Zd,RTDetrV2PreTrainedModel:()=>Ka,ResNetForImageClassification:()=>mp,ResNetModel:()=>pp,ResNetPreTrainedModel:()=>Ya,RoFormerForMaskedLM:()=>Vs,RoFormerForQuestionAnswering:()=>Os,RoFormerForSequenceClassification:()=>Us,RoFormerForTokenClassification:()=>Fs,RoFormerModel:()=>kr,RoFormerPreTrainedModel:()=>Gt,RobertaForMaskedLM:()=>Zo,RobertaForQuestionAnswering:()=>ri,RobertaForSequenceClassification:()=>ei,RobertaForTokenClassification:()=>ti,RobertaModel:()=>Yo,RobertaPreTrainedModel:()=>Bs,SamImageSegmentationOutput:()=>Zp,SamModel:()=>Yp,SamPreTrainedModel:()=>Jp,SapiensForDepthEstimation:()=>Tp,SapiensForNormalEstimation:()=>Ep,SapiensForSemanticSegmentation:()=>xp,SapiensPreTrainedModel:()=>Ei,SegformerForImageClassification:()=>Qm,SegformerForSemanticSegmentation:()=>Xm,SegformerModel:()=>j0,SegformerPreTrainedModel:()=>ki,Seq2SeqLMOutput:()=>Sv,SequenceClassifierOutput:()=>Mt,SiglipModel:()=>bo,SiglipPreTrainedModel:()=>Rn,SiglipTextModel:()=>an,SiglipVisionModel:()=>ut,SmolLM3ForCausalLM:()=>Iu,SmolLM3Model:()=>ku,SmolLM3PreTrainedModel:()=>ma,SmolVLMForConditionalGeneration:()=>on,SnacDecoderModel:()=>Bh,SnacEncoderModel:()=>zh,SnacModel:()=>Lh,SnacPreTrainedModel:()=>zi,SpeechT5ForSpeechToText:()=>Am,SpeechT5ForTextToSpeech:()=>Fm,SpeechT5HifiGan:()=>Om,SpeechT5Model:()=>R0,SpeechT5PreTrainedModel:()=>Si,SqueezeBertForMaskedLM:()=>se,SqueezeBertForQuestionAnswering:()=>Ce,SqueezeBertForSequenceClassification:()=>he,SqueezeBertModel:()=>ee,SqueezeBertPreTrainedModel:()=>U,StableLmForCausalLM:()=>Ym,StableLmModel:()=>Jm,StableLmPreTrainedModel:()=>fl,Starcoder2ForCausalLM:()=>Vm,Starcoder2Model:()=>Nm,Starcoder2PreTrainedModel:()=>ml,StyleTextToSpeech2Model:()=>Im,StyleTextToSpeech2PreTrainedModel:()=>km,Swin2SRForImageSuperResolution:()=>wp,Swin2SRModel:()=>gp,Swin2SRPreTrainedModel:()=>Za,SwinForImageClassification:()=>_p,SwinForSemanticSegmentation:()=>fp,SwinModel:()=>hp,SwinPreTrainedModel:()=>Ti,T5ForConditionalGeneration:()=>vr,T5Model:()=>tr,T5PreTrainedModel:()=>gt,TableTransformerForObjectDetection:()=>ip,TableTransformerModel:()=>op,TableTransformerObjectDetectionOutput:()=>ap,TableTransformerPreTrainedModel:()=>Qa,TokenClassifierOutput:()=>Er,TrOCRForCausalLM:()=>Lm,TrOCRPreTrainedModel:()=>Dm,UltravoxModel:()=>vl,UltravoxPreTrainedModel:()=>Th,UniSpeechForCTC:()=>mm,UniSpeechForSequenceClassification:()=>hm,UniSpeechModel:()=>pm,UniSpeechPreTrainedModel:()=>Pi,UniSpeechSatForAudioFrameClassification:()=>wm,UniSpeechSatForCTC:()=>fm,UniSpeechSatForSequenceClassification:()=>gm,UniSpeechSatModel:()=>_m,UniSpeechSatPreTrainedModel:()=>ko,ViTForImageClassification:()=>Md,ViTMAEModel:()=>Cd,ViTMAEPreTrainedModel:()=>Pd,ViTMSNForImageClassification:()=>$d,ViTMSNModel:()=>Sd,ViTMSNPreTrainedModel:()=>La,ViTModel:()=>wd,ViTPreTrainedModel:()=>Fa,VisionEncoderDecoderModel:()=>fo,VitMatteForImageMatting:()=>Dd,VitMattePreTrainedModel:()=>Od,VitPoseForPoseEstimation:()=>xd,VitPosePreTrainedModel:()=>vd,VitsModel:()=>_l,VitsModelOutput:()=>m_,VitsPreTrainedModel:()=>qm,VoxtralForConditionalGeneration:()=>Eh,Wav2Vec2BertForCTC:()=>bm,Wav2Vec2BertForSequenceClassification:()=>ym,Wav2Vec2BertModel:()=>Mm,Wav2Vec2BertPreTrainedModel:()=>Ci,Wav2Vec2ForAudioFrameClassification:()=>am,Wav2Vec2ForCTC:()=>om,Wav2Vec2ForSequenceClassification:()=>im,Wav2Vec2Model:()=>nm,Wav2Vec2PreTrainedModel:()=>Qs,WavLMForAudioFrameClassification:()=>$m,WavLMForCTC:()=>Pm,WavLMForSequenceClassification:()=>Cm,WavLMForXVector:()=>Sm,WavLMModel:()=>Em,WavLMPreTrainedModel:()=>Kn,WeSpeakerResNetModel:()=>dm,WeSpeakerResNetPreTrainedModel:()=>um,WhisperForConditionalGeneration:()=>po,WhisperModel:()=>uo,WhisperPreTrainedModel:()=>co,XLMForQuestionAnswering:()=>ai,XLMForSequenceClassification:()=>oi,XLMForTokenClassification:()=>ii,XLMModel:()=>si,XLMPreTrainedModel:()=>Gs,XLMRobertaForMaskedLM:()=>io,XLMRobertaForQuestionAnswering:()=>ci,XLMRobertaForSequenceClassification:()=>ao,XLMRobertaForTokenClassification:()=>li,XLMRobertaModel:()=>oo,XLMRobertaPreTrainedModel:()=>Ks,XLMWithLMHeadModel:()=>ni,XVectorOutput:()=>d_,YolosForObjectDetection:()=>Qp,YolosModel:()=>qp,YolosObjectDetectionOutput:()=>Xp,YolosPreTrainedModel:()=>al});var s=t("./src/configs.js"),n=t("./src/backends/onnx.js"),o=t("./src/utils/dtypes.js"),a=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),l=t("./src/utils/hub.js"),c=t("./src/utils/constants.js"),p=t("./src/generation/logits_process.js"),d=t("./src/generation/configuration_utils.js"),u=t("./src/utils/tensor.js"),f=t("./src/utils/image.js"),_=t("./src/utils/maths.js"),v=t("./src/generation/stopping_criteria.js"),I=t("./src/generation/logits_sampler.js"),b=t("./src/env.js"),M=t("./src/models/whisper/generation_whisper.js"),$=t("./src/models/whisper/common_whisper.js");const y={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11,ImageAudioTextToText:12},T=new Map,E=new Map,x=new Map;async function S(g,w,R){let oe=R.config?.["transformers.js_config"]??{},pe=R.device??oe.device;pe&&typeof pe!="string"&&(pe.hasOwnProperty(w)?pe=pe[w]:(console.warn(`device not specified for "${w}". Using the default device.`),pe=null));const _e=pe??(b.apis.IS_NODE_ENV?"cpu":"wasm"),$e=(0,n.deviceToExecutionProviders)(_e),ze=oe.device_config??{};ze.hasOwnProperty(_e)&&(oe={...oe,...ze[_e]});let Ve=R.dtype??oe.dtype;if(typeof Ve!="string"&&(Ve&&Ve.hasOwnProperty(w)?Ve=Ve[w]:(Ve=o.DEFAULT_DEVICE_DTYPE_MAPPING[_e]??o.DATA_TYPES.fp32,console.warn(`dtype not specified for "${w}". Using the default dtype (${Ve}) for this device (${_e}).`))),Ve===o.DATA_TYPES.auto){let kt=oe.dtype;typeof kt!="string"&&(kt=kt?.[w]),kt&&kt!==o.DATA_TYPES.auto&&o.DATA_TYPES.hasOwnProperty(kt)?Ve=kt:Ve=o.DEFAULT_DEVICE_DTYPE_MAPPING[_e]??o.DATA_TYPES.fp32}const nt=Ve;if(o.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(nt)){if(nt===o.DATA_TYPES.fp16&&_e==="webgpu"&&!await(0,o.isWebGpuFp16Supported)())throw new Error(`The device (${_e}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${nt}. Should be one of: ${Object.keys(o.DATA_TYPES).join(", ")}`);const bt=oe.kv_cache_dtype,vt=bt?typeof bt=="string"?bt:bt[nt]??"float32":void 0;if(vt&&!["float32","float16"].includes(vt))throw new Error(`Invalid kv_cache_dtype: ${vt}. Should be one of: float32, float16`);const Et={dtype:nt,kv_cache_dtype:vt,device:_e},mt=o.DEFAULT_DTYPE_SUFFIX_MAPPING[nt],Nt=`${w}${mt}.onnx`,_t=`${R.subfolder??""}/${Nt}`,pt={...R.session_options};pt.executionProviders??=$e;const Ot=oe.free_dimension_overrides;Ot?pt.freeDimensionOverrides??=Ot:_e.startsWith("webnn")&&!pt.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${_e}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const Ht=b.apis.IS_NODE_ENV&&b.env.useFSCache,nr=(0,l.getModelFile)(g,_t,!0,R,Ht),wr=R.use_external_data_format??oe.use_external_data_format;let Mr=[];if(wr){let kt;typeof wr=="object"?wr.hasOwnProperty(Nt)?kt=wr[Nt]:wr.hasOwnProperty(w)?kt=wr[w]:kt=!1:kt=wr;const or=+kt;if(or>l.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${or}) exceeds the maximum allowed value (${l.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let Sr=0;Sr<or;++Sr){const _n=`${Nt}_data${Sr===0?"":"_"+Sr}`,Vr=`${R.subfolder??""}/${_n}`;Mr.push(new Promise(async(ms,qn)=>{const Qn=await(0,l.getModelFile)(g,Vr,!0,R,Ht);ms(Qn instanceof Uint8Array?{path:_n,data:Qn}:_n)}))}}else pt.externalData!==void 0&&(Mr=pt.externalData.map(async kt=>{if(typeof kt.data=="string"){const or=await(0,l.getModelFile)(g,kt.data,!0,R);return{...kt,data:or}}return kt}));if(Mr.length>0){const kt=await Promise.all(Mr);b.apis.IS_NODE_ENV||(pt.externalData=kt)}if(_e==="webgpu"){const kt=(0,s.getCacheShapes)(R.config,{prefix:"present"});if(Object.keys(kt).length>0&&!(0,n.isONNXProxy)()){const or={};for(const Sr in kt)or[Sr]="gpu-buffer";pt.preferredOutputLocation=or}}return{buffer_or_path:await nr,session_options:pt,session_config:Et}}async function z(g,w,R){return Object.fromEntries(await Promise.all(Object.keys(w).map(async oe=>{const{buffer_or_path:pe,session_options:_e,session_config:$e}=await S(g,w[oe],R),ze=await(0,n.createInferenceSession)(pe,_e,$e);return[oe,ze]})))}async function O(g,w,R){return Object.fromEntries(await Promise.all(Object.keys(w).map(async oe=>{const pe=await(0,l.getModelJSON)(g,w[oe],!1,R);return[oe,pe]})))}function K(g,w){const R=Object.create(null),oe=[];for(const $e of g.inputNames){const ze=w[$e];if(!(ze instanceof u.Tensor)){oe.push($e);continue}R[$e]=(0,n.isONNXProxy)()?ze.clone():ze}if(oe.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${oe.join(", ")}.`);const pe=Object.keys(w).length,_e=g.inputNames.length;if(pe>_e){let $e=Object.keys(w).filter(ze=>!g.inputNames.includes(ze));console.warn(`WARNING: Too many inputs were provided (${pe} > ${_e}). The following inputs will be ignored: "${$e.join(", ")}".`)}return R}let H=Promise.resolve();async function D(g,w){const R=K(g,w);try{const oe=Object.fromEntries(Object.entries(R).map(([$e,ze])=>[$e,ze.ort_tensor])),pe=()=>g.run(oe),_e=await(b.apis.IS_BROWSER_ENV||b.apis.IS_WEBWORKER_ENV?H=H.then(pe):pe());return Z(_e)}catch(oe){const pe=Object.fromEntries(Object.entries(R).map(([_e,$e])=>{const ze={type:$e.type,dims:$e.dims,location:$e.location};return ze.location!=="gpu-buffer"&&(ze.data=$e.data),[_e,ze]}));throw console.error(`An error occurred during model execution: "${oe}".`),console.error("Inputs given to model:",pe),oe}}function Z(g){for(let w in g)(0,n.isONNXTensor)(g[w])?g[w]=new u.Tensor(g[w]):typeof g[w]=="object"&&Z(g[w]);return g}function Q(g){if(g instanceof u.Tensor)return g;if(g.length===0)throw Error("items must be non-empty");if(Array.isArray(g[0])){if(g.some(w=>w.length!==g[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new u.Tensor("int64",BigInt64Array.from(g.flat().map(w=>BigInt(w))),[g.length,g[0].length])}else return new u.Tensor("int64",BigInt64Array.from(g.map(w=>BigInt(w))),[1,g.length])}function Y(g){return new u.Tensor("bool",[g],[1])}async function re(g,w){let{encoder_outputs:R,input_ids:oe,decoder_input_ids:pe,..._e}=w;if(!R){const ze=(0,i.pick)(w,g.sessions.model.inputNames);R=(await te(g,ze)).last_hidden_state}return _e.input_ids=pe,_e.encoder_hidden_states=R,g.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(_e.encoder_attention_mask=w.attention_mask),await ue(g,_e,!0)}async function te(g,w){const R=g.sessions.model,oe=(0,i.pick)(w,R.inputNames);if(R.inputNames.includes("inputs_embeds")&&!oe.inputs_embeds){if(!w.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");oe.inputs_embeds=await g.encode_text({input_ids:w.input_ids})}if(R.inputNames.includes("token_type_ids")&&!oe.token_type_ids){if(!oe.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");oe.token_type_ids=(0,u.zeros_like)(oe.input_ids)}if(R.inputNames.includes("pixel_mask")&&!oe.pixel_mask){if(!oe.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const pe=oe.pixel_values.dims;oe.pixel_mask=(0,u.ones)([pe[0],pe[2],pe[3]])}return await D(R,oe)}async function ce(g,w){const R=await g.encode(w);return await g.decode(R)}async function ue(g,w,R=!1){const oe=g.sessions[R?"decoder_model_merged":"model"],{past_key_values:pe,..._e}=w;if(oe.inputNames.includes("use_cache_branch")&&(_e.use_cache_branch=Y(!!pe)),oe.inputNames.includes("position_ids")&&_e.attention_mask&&!_e.position_ids){const ze=["paligemma","gemma3_text","gemma3"].includes(g.config.model_type)?1:0;_e.position_ids=Fe(_e,pe,ze)}g.addPastKeyValues(_e,pe);const $e=(0,i.pick)(_e,oe.inputNames);return await D(oe,$e)}function B({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe}){const _e=oe.tolist().map(nt=>nt.reduce((bt,vt,Et)=>(vt==g&&bt.push(Et),bt),[])),$e=_e.reduce((nt,bt)=>nt+bt.length,0),ze=R.dims[0];if($e!==ze)throw new Error(`Number of tokens and features do not match: tokens: ${$e}, features ${ze}`);let Ve=0;for(let nt=0;nt<_e.length;++nt){const bt=_e[nt],vt=w[nt];for(let Et=0;Et<bt.length;++Et)vt[bt[Et]].data.set(R[Ve++].data)}return{inputs_embeds:w,attention_mask:pe}}function F({image_token_id:g,inputs_embeds:w,image_features:R,input_ids:oe,attention_mask:pe}){return B({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe})}function G({audio_token_id:g,inputs_embeds:w,audio_features:R,input_ids:oe,attention_mask:pe}){return B({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe})}async function j(g,{encode_function:w,merge_function:R,modality_input_name:oe,modality_output_name:pe,input_ids:_e=null,attention_mask:$e=null,position_ids:ze=null,inputs_embeds:Ve=null,past_key_values:nt=null,generation_config:bt=null,logits_processor:vt=null,...Et}){const mt=Et[oe];if(!Ve){if(Ve=await g.encode_text({input_ids:_e,...Et}),mt&&_e.dims[1]!==1){const _t=await w({[oe]:mt,...Et});({inputs_embeds:Ve,attention_mask:$e}=R({[pe]:_t,inputs_embeds:Ve,input_ids:_e,attention_mask:$e}))}else if(nt&&mt&&_e.dims[1]===1){const _t=_e.dims[1],pt=Object.values(nt)[0].dims.at(-2);$e=(0,u.cat)([(0,u.ones)([_e.dims[0],pt]),$e.slice(null,[$e.dims[1]-_t,$e.dims[1]])],1)}}if(!ze&&g.config.model_type==="qwen2_vl"){const{image_grid_thw:_t,video_grid_thw:pt}=Et;[ze]=g.get_rope_index(_e,_t,pt,$e)}return await ue(g,{inputs_embeds:Ve,past_key_values:nt,attention_mask:$e,position_ids:ze,generation_config:bt,logits_processor:vt},!0)}async function ae(g,w){return await j(g,{...w,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:g.encode_audio.bind(g),merge_function:g._merge_input_ids_with_audio_features.bind(g)})}async function Ae(g,w){return await j(g,{...w,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:g.encode_image.bind(g),merge_function:g._merge_input_ids_with_image_features.bind(g)})}function ve(g,w=0){const[R,oe]=g.dims,pe=g.data,_e=new BigInt64Array(pe.length);for(let $e=0;$e<R;++$e){const ze=$e*oe;let Ve=BigInt(w);for(let nt=0;nt<oe;++nt){const bt=ze+nt;pe[bt]===0n?_e[bt]=BigInt(1):(_e[bt]=Ve,Ve+=pe[bt])}}return{data:_e,dims:g.dims}}function Fe(g,w=null,R=0){const{input_ids:oe,inputs_embeds:pe,attention_mask:_e}=g,{data:$e,dims:ze}=ve(_e,R);let Ve=new u.Tensor("int64",$e,ze);if(w){const nt=-(oe??pe).dims.at(1);Ve=Ve.slice(null,[nt,null])}return Ve}function Qe(g,w,R,oe){const pe=R.past_key_values?Object.values(R.past_key_values)[0].dims.at(-2):0;if(!R.attention_mask){let _e;for(const $e of["input_ids","inputs_embeds","position_ids"])if(R[$e]){_e=R[$e].dims;break}if(!_e)throw new Error("attention_mask is not provided, and unable to infer its shape from model inputs.");R.attention_mask=(0,u.ones)([_e[0],pe+_e[1]])}if(R.past_key_values){const{input_ids:_e,attention_mask:$e}=R;$e&&$e.dims[1]>_e.dims[1]||pe<_e.dims[1]&&(R.input_ids=_e.slice(null,[pe,null]))}return R}function xe(g,w,R,oe){return R.past_key_values&&(w=w.map(pe=>[pe.at(-1)])),{...R,decoder_input_ids:Q(w)}}function q(g,...w){return g.config.is_encoder_decoder?xe(g,...w):Qe(g,...w)}function de(g,w,R,oe){const pe=!!R.past_key_values;return oe.guidance_scale!==null&&oe.guidance_scale>1&&(pe?R.input_ids=(0,u.cat)([R.input_ids,R.input_ids],0):(R.input_ids=(0,u.cat)([R.input_ids,(0,u.full_like)(R.input_ids,BigInt(oe.pad_token_id))],0),R.attention_mask=(0,u.cat)([R.attention_mask,(0,u.full_like)(R.attention_mask,0n)],0))),(pe||!R.pixel_values)&&(R.pixel_values=(0,u.full)([0,0,3,384,384],1)),pe&&(R.images_seq_mask=new u.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),R.images_emb_mask=new u.Tensor("bool",new Array(0).fill(!1),[1,1,0])),R}class W extends a.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(w,R,oe){super(),this.config=w,this.sessions=R,this.configs=oe;const pe=x.get(this.constructor),_e=T.get(pe);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,_e){case y.DecoderOnly:this.can_generate=!0,this._forward=ue,this._prepare_inputs_for_generation=Qe;break;case y.Seq2Seq:case y.Vision2Seq:case y.Musicgen:this.can_generate=!0,this._forward=re,this._prepare_inputs_for_generation=xe;break;case y.EncoderDecoder:this._forward=re;break;case y.ImageTextToText:this.can_generate=!0,this._forward=Ae,this._prepare_inputs_for_generation=q;break;case y.AudioTextToText:this.can_generate=!0,this._forward=ae,this._prepare_inputs_for_generation=q;break;case y.Phi3V:case y.ImageAudioTextToText:this.can_generate=!0,this._prepare_inputs_for_generation=q;break;case y.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=de;break;case y.AutoEncoder:this._forward=ce;break;default:this._forward=te;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const w=[];for(const R of Object.values(this.sessions))R?.handler?.dispose&&w.push(R.handler.dispose());return await Promise.all(w)}static async from_pretrained(w,{progress_callback:R=null,config:oe=null,cache_dir:pe=null,local_files_only:_e=!1,revision:$e="main",model_file_name:ze=null,subfolder:Ve="onnx",device:nt=null,dtype:bt=null,use_external_data_format:vt=null,session_options:Et={}}={}){let mt={progress_callback:R,config:oe,cache_dir:pe,local_files_only:_e,revision:$e,model_file_name:ze,subfolder:Ve,device:nt,dtype:bt,use_external_data_format:vt,session_options:Et};const Nt=x.get(this),_t=T.get(Nt);oe=mt.config=await s.AutoConfig.from_pretrained(w,mt);let pt;if(_t===y.DecoderOnly)pt=await Promise.all([z(w,{model:mt.model_file_name??"model"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===y.Seq2Seq||_t===y.Vision2Seq)pt=await Promise.all([z(w,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===y.MaskGeneration)pt=await Promise.all([z(w,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},mt)]);else if(_t===y.EncoderDecoder)pt=await Promise.all([z(w,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},mt)]);else if(_t===y.ImageTextToText){const Ot={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};oe.is_encoder_decoder&&(Ot.model="encoder_model"),pt=await Promise.all([z(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===y.AudioTextToText){const Ot={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};pt=await Promise.all([z(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===y.ImageAudioTextToText){const Ot={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};pt=await Promise.all([z(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===y.Musicgen)pt=await Promise.all([z(w,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===y.MultiModality)pt=await Promise.all([z(w,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===y.Phi3V)pt=await Promise.all([z(w,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===y.AutoEncoder)pt=await Promise.all([z(w,{encoder_model:"encoder_model",decoder_model:"decoder_model"},mt)]);else{if(_t!==y.EncoderOnly){const Ot=Nt??oe?.model_type;Ot!=="custom"&&console.warn(`Model type for '${Ot}' not found, assuming encoder-only architecture. Please report this at ${c.GITHUB_ISSUE_URL}.`)}pt=await Promise.all([z(w,{model:mt.model_file_name??"model"},mt)])}return new this(oe,...pt)}async _call(w){return await this.forward(w)}async forward(w){return await this._forward(this,w)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(w){const R=new p.LogitsProcessorList;return w.temperature!==null&&w.temperature!==1&&R.push(new p.TemperatureLogitsWarper(w.temperature)),w.top_k!==null&&w.top_k!==0&&R.push(new p.TopKLogitsWarper(w.top_k)),w.top_p!==null&&w.top_p<1&&R.push(new p.TopPLogitsWarper(w.top_p)),R}_get_logits_processor(w,R,oe=null){const pe=new p.LogitsProcessorList;if(w.repetition_penalty!==null&&w.repetition_penalty!==1&&pe.push(new p.RepetitionPenaltyLogitsProcessor(w.repetition_penalty)),w.no_repeat_ngram_size!==null&&w.no_repeat_ngram_size>0&&pe.push(new p.NoRepeatNGramLogitsProcessor(w.no_repeat_ngram_size)),w.bad_words_ids!==null&&pe.push(new p.NoBadWordsLogitsProcessor(w.bad_words_ids,w.eos_token_id)),w.min_length!==null&&w.eos_token_id!==null&&w.min_length>0&&pe.push(new p.MinLengthLogitsProcessor(w.min_length,w.eos_token_id)),w.min_new_tokens!==null&&w.eos_token_id!==null&&w.min_new_tokens>0&&pe.push(new p.MinNewTokensLengthLogitsProcessor(R,w.min_new_tokens,w.eos_token_id)),w.forced_bos_token_id!==null&&pe.push(new p.ForcedBOSTokenLogitsProcessor(w.forced_bos_token_id)),w.forced_eos_token_id!==null&&pe.push(new p.ForcedEOSTokenLogitsProcessor(w.max_length,w.forced_eos_token_id)),w.begin_suppress_tokens!==null){const _e=R>1||w.forced_bos_token_id===null?R:R+1;pe.push(new p.SuppressTokensAtBeginLogitsProcessor(w.begin_suppress_tokens,_e))}return w.guidance_scale!==null&&w.guidance_scale>1&&pe.push(new p.ClassifierFreeGuidanceLogitsProcessor(w.guidance_scale)),oe!==null&&pe.extend(oe),pe}_prepare_generation_config(w,R,oe=d.GenerationConfig){const pe={...this.config};for(const $e of["decoder","generator","text_config"])$e in pe&&Object.assign(pe,pe[$e]);const _e=new oe(pe);return Object.assign(_e,this.generation_config??{}),w&&Object.assign(_e,w),R&&Object.assign(_e,(0,i.pick)(R,Object.getOwnPropertyNames(_e))),_e}_get_stopping_criteria(w,R=null){const oe=new v.StoppingCriteriaList;return w.max_length!==null&&oe.push(new v.MaxLengthCriteria(w.max_length,this.config.max_position_embeddings??null)),w.eos_token_id!==null&&oe.push(new v.EosTokenCriteria(w.eos_token_id)),R&&oe.extend(R),oe}_validate_model_class(){if(!this.can_generate){const w=[El,Pl,Tl,xl],R=x.get(this.constructor),oe=new Set,pe=this.config.model_type;for(const $e of w){const ze=$e.get(pe);ze&&oe.add(ze[0])}let _e=`The current model class (${R}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw oe.size>0&&(_e+=` Please use the following class instead: ${[...oe].join(", ")}`),Error(_e)}}prepare_inputs_for_generation(...w){return this._prepare_inputs_for_generation(this,...w)}_update_model_kwargs_for_generation({generated_input_ids:w,outputs:R,model_inputs:oe,is_encoder_decoder:pe}){return oe.past_key_values=this.getPastKeyValues(R,oe.past_key_values),oe.input_ids=new u.Tensor("int64",w.flat(),[w.length,1]),pe||(oe.attention_mask=(0,u.cat)([oe.attention_mask,(0,u.ones)([oe.attention_mask.dims[0],1])],1)),oe.position_ids=null,oe}_prepare_model_inputs({inputs:w,bos_token_id:R,model_kwargs:oe}){const pe=(0,i.pick)(oe,this.forward_params),_e=this.main_input_name;if(_e in pe){if(w)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else pe[_e]=w;return{inputs_tensor:pe[_e],model_inputs:pe,model_input_name:_e}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:w,model_inputs:R,model_input_name:oe,generation_config:pe}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!R.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:$e,pixel_values:ze,attention_mask:Ve,...nt}=R,bt=await this._prepare_inputs_embeds(R);R={...nt,...(0,i.pick)(bt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:_e}=await te(this,R);if(pe.guidance_scale!==null&&pe.guidance_scale>1)_e=(0,u.cat)([_e,(0,u.full_like)(_e,0)],0),"attention_mask"in R&&(R.attention_mask=(0,u.cat)([R.attention_mask,(0,u.zeros_like)(R.attention_mask)],0));else if(R.decoder_input_ids){const $e=Q(R.decoder_input_ids).dims[0];if($e!==_e.dims[0]){if(_e.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${_e.dims[0]}) than the decoder inputs (${$e}).`);_e=(0,u.cat)(Array.from({length:$e},()=>_e),0)}}return R.encoder_outputs=_e,R}_prepare_decoder_input_ids_for_generation({batch_size:w,model_input_name:R,model_kwargs:oe,decoder_start_token_id:pe,bos_token_id:_e,generation_config:$e}){let{decoder_input_ids:ze,...Ve}=oe;if(!(ze instanceof u.Tensor)){if(ze)Array.isArray(ze[0])||(ze=Array.from({length:w},()=>ze));else if(pe??=_e,this.config.model_type==="musicgen")ze=Array.from({length:w*this.config.decoder.num_codebooks},()=>[pe]);else if(Array.isArray(pe)){if(pe.length!==w)throw new Error(`\`decoder_start_token_id\` expcted to have length ${w} but got ${pe.length}`);ze=pe}else ze=Array.from({length:w},()=>[pe]);ze=Q(ze)}return oe.decoder_attention_mask=(0,u.ones_like)(ze),{input_ids:ze,model_inputs:Ve}}async generate({inputs:w=null,generation_config:R=null,logits_processor:oe=null,stopping_criteria:pe=null,streamer:_e=null,...$e}){this._validate_model_class(),R=this._prepare_generation_config(R,$e);let{inputs_tensor:ze,model_inputs:Ve,model_input_name:nt}=this._prepare_model_inputs({inputs:w,model_kwargs:$e});const bt=this.config.is_encoder_decoder;bt&&("encoder_outputs"in Ve||(Ve=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:ze,model_inputs:Ve,model_input_name:nt,generation_config:R})));let vt;bt?{input_ids:vt,model_inputs:Ve}=this._prepare_decoder_input_ids_for_generation({batch_size:Ve[nt].dims.at(0),model_input_name:nt,model_kwargs:Ve,decoder_start_token_id:R.decoder_start_token_id,bos_token_id:R.bos_token_id,generation_config:R}):vt=Ve[nt];let Et=vt.dims.at(-1);R.max_new_tokens!==null&&(R.max_length=Et+R.max_new_tokens);const mt=this._get_logits_processor(R,Et,oe),Nt=this._get_stopping_criteria(R,pe),_t=Ve[nt].dims.at(0),pt=I.LogitsSampler.getSampler(R),Ot=new Array(_t).fill(0),Ht=vt.tolist();_e&&_e.put(Ht);let nr,wr={};for(;;){if(Ve=this.prepare_inputs_for_generation(Ht,Ve,R),nr=await this.forward(Ve),R.output_attentions&&R.return_dict_in_generate){const Vr=this.getAttentions(nr);for(const ms in Vr)ms in wr||(wr[ms]=[]),wr[ms].push(Vr[ms])}const kt=nr.logits.slice(null,-1,null),or=mt(Ht,kt),Sr=[];for(let Vr=0;Vr<or.dims.at(0);++Vr){const ms=or[Vr],qn=await pt(ms);for(const[Qn,Bi]of qn){const Io=BigInt(Qn);Ot[Vr]+=Bi,Ht[Vr].push(Io),Sr.push([Io]);break}}if(_e&&_e.put(Sr),Nt(Ht).every(Vr=>Vr))break;Ve=this._update_model_kwargs_for_generation({generated_input_ids:Sr,outputs:nr,model_inputs:Ve,is_encoder_decoder:bt})}_e&&_e.end();const Mr=this.getPastKeyValues(nr,Ve.past_key_values,!0),hr=new u.Tensor("int64",Ht.flat(),[Ht.length,Ht[0].length]);if(R.return_dict_in_generate)return{sequences:hr,past_key_values:Mr,...wr};for(const kt of Object.values(nr))kt.location==="gpu-buffer"&&kt.dispose();return hr}getPastKeyValues(w,R,oe=!1){const pe=Object.create(null);for(const _e in w)if(_e.startsWith("present")){const $e=_e.replace("present_conv","past_conv").replace("present","past_key_values"),ze=_e.includes("encoder");if(ze&&R?pe[$e]=R[$e]:pe[$e]=w[_e],R&&(!ze||oe)){const Ve=R[$e];Ve.location==="gpu-buffer"&&Ve.dispose()}}return pe}getAttentions(w){const R={};for(const oe of["cross_attentions","encoder_attentions","decoder_attentions"])for(const pe in w)pe.startsWith(oe)&&(oe in R||(R[oe]=[]),R[oe].push(w[pe]));return R}addPastKeyValues(w,R){if(R)Object.assign(w,R);else{const oe=this.sessions.decoder_model_merged??this.sessions.model,pe=(w[this.main_input_name]??w.attention_mask)?.dims?.[0]??1,_e=oe?.config?.kv_cache_dtype??"float32",$e=_e==="float16"?u.DataTypeMap.float16:u.DataTypeMap.float32,ze=(0,s.getCacheShapes)(this.config,{batch_size:pe});for(const Ve in ze){const nt=ze[Ve].reduce((bt,vt)=>bt*vt,1);w[Ve]=new u.Tensor(_e,new $e(nt),ze[Ve])}}}async encode_image({pixel_values:w}){return(await D(this.sessions.vision_encoder,{pixel_values:w})).image_features}async encode_text({input_ids:w}){return(await D(this.sessions.embed_tokens,{input_ids:w})).inputs_embeds}async encode_audio({audio_values:w}){return(await D(this.sessions.audio_encoder,{audio_values:w})).audio_features}}class fe{}class ke extends fe{constructor({last_hidden_state:w,hidden_states:R=null,attentions:oe=null}){super(),this.last_hidden_state=w,this.hidden_states=R,this.attentions=oe}}class ye extends W{}class ge extends ye{}class Ee extends ye{async _call(w){return new Cr(await super._call(w))}}class we extends ye{async _call(w){return new Mt(await super._call(w))}}class Ie extends ye{async _call(w){return new Er(await super._call(w))}}class Oe extends ye{async _call(w){return new Fr(await super._call(w))}}class We extends W{}class be extends We{}class st extends We{async _call(w){return new Cr(await super._call(w))}}class Ne extends We{async _call(w){return new Mt(await super._call(w))}}class je extends We{async _call(w){return new Er(await super._call(w))}}class et extends We{async _call(w){return new Fr(await super._call(w))}}class qe extends W{}class Ye extends qe{}class Ze extends qe{async _call(w){return new Cr(await super._call(w))}}class Pt extends qe{async _call(w){return new Mt(await super._call(w))}}class It extends qe{async _call(w){return new Er(await super._call(w))}}class ht extends W{}class br extends ht{}class Wr extends ht{}class Or extends W{}class Zr extends Or{}class Gt extends W{}class kr extends Gt{}class Vs extends Gt{async _call(w){return new Cr(await super._call(w))}}class Us extends Gt{async _call(w){return new Mt(await super._call(w))}}class Fs extends Gt{async _call(w){return new Er(await super._call(w))}}class Os extends Gt{async _call(w){return new Fr(await super._call(w))}}class dt extends W{}class Es extends dt{}class Ut extends dt{async _call(w){return new Cr(await super._call(w))}}class Tt extends dt{async _call(w){return new Mt(await super._call(w))}}class Ps extends dt{async _call(w){return new Er(await super._call(w))}}class C extends dt{async _call(w){return new Fr(await super._call(w))}}class X extends W{}class N extends X{}class J extends X{async _call(w){return new Cr(await super._call(w))}}class ne extends X{async _call(w){return new Mt(await super._call(w))}}class me extends X{async _call(w){return new Er(await super._call(w))}}class Se extends X{async _call(w){return new Fr(await super._call(w))}}class tt extends W{}class lt extends tt{}class Ge extends tt{async _call(w){return new Cr(await super._call(w))}}class Ct extends tt{async _call(w){return new Mt(await super._call(w))}}class $t extends tt{async _call(w){return new Er(await super._call(w))}}class _r extends tt{async _call(w){return new Fr(await super._call(w))}}class Bt extends W{}class cr extends Bt{}class Gr extends Bt{async _call(w){return new Cr(await super._call(w))}}class Qt extends Bt{async _call(w){return new Mt(await super._call(w))}}class fr extends Bt{async _call(w){return new Er(await super._call(w))}}class es extends Bt{async _call(w){return new Fr(await super._call(w))}}class ur extends W{}class ls extends ur{}class cs extends ur{async _call(w){return new Cr(await super._call(w))}}class Dr extends ur{async _call(w){return new Mt(await super._call(w))}}class Cs extends ur{async _call(w){return new Er(await super._call(w))}}class us extends ur{async _call(w){return new Fr(await super._call(w))}}class sr extends W{}class Kr extends sr{}class dr extends sr{async _call(w){return new Mt(await super._call(w))}}class yr extends sr{async _call(w){return new Er(await super._call(w))}}class ts extends sr{async _call(w){return new Fr(await super._call(w))}}class Ss extends sr{async _call(w){return new Cr(await super._call(w))}}class Hr extends W{}class Ds extends Hr{}class Lr extends Hr{async _call(w){return new Cr(await super._call(w))}}class Le extends Hr{async _call(w){return new Mt(await super._call(w))}}class Re extends Hr{async _call(w){return new Er(await super._call(w))}}class rt extends W{}class Xt extends rt{}class Ls extends rt{async _call(w){return new Cr(await super._call(w))}}class $s extends rt{async _call(w){return new Mt(await super._call(w))}}class zs extends rt{async _call(w){return new Fr(await super._call(w))}}class ds extends W{}class rn extends ds{}class sn extends ds{async _call(w){return new Cr(await super._call(w))}}class In extends ds{async _call(w){return new Mt(await super._call(w))}}class le extends ds{async _call(w){return new Er(await super._call(w))}}class k extends ds{async _call(w){return new Fr(await super._call(w))}}class U extends W{}class ee extends U{}class se extends U{async _call(w){return new Cr(await super._call(w))}}class he extends U{async _call(w){return new Mt(await super._call(w))}}class Ce extends U{async _call(w){return new Fr(await super._call(w))}}class Ke extends W{}class Xe extends Ke{}class Je extends Ke{async _call(w){return new Mt(await super._call(w))}}class Ue extends Ke{async _call(w){return new Fr(await super._call(w))}}class St extends Ke{async _call(w){return new Cr(await super._call(w))}}class gt extends W{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class tr extends gt{}class vr extends gt{}class Kt extends W{}class rr extends Kt{}class Wt extends Kt{}class Nr extends W{}class rs extends Nr{}class Ir extends Nr{}class qr extends W{}class Zt extends qr{}class pr extends qr{}class zr extends qr{async _call(w){return new Mt(await super._call(w))}}class Br extends W{}class ps extends Br{}class gr extends Br{}class ss extends Br{async _call(w){return new Mt(await super._call(w))}}class xr extends Br{}class Jt extends W{}class mr extends Jt{}class ar extends Jt{}class Rr extends W{}class Ws extends Rr{}class An extends Rr{}class Bs extends W{}class Yo extends Bs{}class Zo extends Bs{async _call(w){return new Cr(await super._call(w))}}class ei extends Bs{async _call(w){return new Mt(await super._call(w))}}class ti extends Bs{async _call(w){return new Er(await super._call(w))}}class ri extends Bs{async _call(w){return new Fr(await super._call(w))}}class Gs extends W{}class si extends Gs{}class ni extends Gs{async _call(w){return new Cr(await super._call(w))}}class oi extends Gs{async _call(w){return new Mt(await super._call(w))}}class ii extends Gs{async _call(w){return new Er(await super._call(w))}}class ai extends Gs{async _call(w){return new Fr(await super._call(w))}}class Ks extends W{}class oo extends Ks{}class io extends Ks{async _call(w){return new Cr(await super._call(w))}}class ao extends Ks{async _call(w){return new Mt(await super._call(w))}}class li extends Ks{async _call(w){return new Er(await super._call(w))}}class ci extends Ks{async _call(w){return new Fr(await super._call(w))}}class Fn extends W{}class lo extends Fn{}class Hs extends Fn{}class co extends W{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class uo extends co{}class po extends co{_prepare_generation_config(w,R){return super._prepare_generation_config(w,R,M.WhisperGenerationConfig)}_retrieve_init_tokens(w){const R=[w.decoder_start_token_id];let oe=w.language;const pe=w.task;if(w.is_multilingual){oe||(console.warn("No language specified - defaulting to English (en)."),oe="en");const $e=`<|${(0,$.whisper_language_to_code)(oe)}|>`;R.push(w.lang_to_id[$e]),R.push(w.task_to_id[pe??"transcribe"])}else if(oe||pe)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!w.return_timestamps&&w.no_timestamps_token_id&&R.at(-1)!==w.no_timestamps_token_id?R.push(w.no_timestamps_token_id):w.return_timestamps&&R.at(-1)===w.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),R.pop()),R.filter(_e=>_e!=null)}async generate({inputs:w=null,generation_config:R=null,logits_processor:oe=null,stopping_criteria:pe=null,..._e}){R=this._prepare_generation_config(R,_e);const $e=_e.decoder_input_ids??this._retrieve_init_tokens(R);if(R.return_timestamps&&(oe??=new p.LogitsProcessorList,oe.push(new p.WhisperTimeStampLogitsProcessor(R,$e))),R.begin_suppress_tokens&&(oe??=new p.LogitsProcessorList,oe.push(new p.SuppressTokensAtBeginLogitsProcessor(R.begin_suppress_tokens,$e.length))),R.return_token_timestamps){if(!R.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");R.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),R.output_attentions=!0,R.return_dict_in_generate=!0}const ze=await super.generate({inputs:w,generation_config:R,logits_processor:oe,decoder_input_ids:$e,..._e});return R.return_token_timestamps&&(ze.token_timestamps=this._extract_token_timestamps(ze,R.alignment_heads,R.num_frames)),ze}_extract_token_timestamps(w,R,oe=null,pe=.02){if(!w.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");oe==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let _e=this.config.median_filter_width;_e===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),_e=7);const $e=w.cross_attentions,ze=Array.from({length:this.config.decoder_layers},(_t,pt)=>(0,u.cat)($e.map(Ot=>Ot[pt]),2)),Ve=(0,u.stack)(R.map(([_t,pt])=>{if(_t>=ze.length)throw new Error(`Layer index ${_t} is out of bounds for cross attentions (length ${ze.length}).`);return oe?ze[_t].slice(null,pt,null,[0,oe]):ze[_t].slice(null,pt)})).transpose(1,0,2,3),[nt,bt]=(0,u.std_mean)(Ve,-2,0,!0),vt=Ve.clone();for(let _t=0;_t<vt.dims[0];++_t){const pt=vt[_t];for(let Ot=0;Ot<pt.dims[0];++Ot){const Ht=pt[Ot],nr=nt[_t][Ot][0].data,wr=bt[_t][Ot][0].data;for(let Mr=0;Mr<Ht.dims[0];++Mr){let hr=Ht[Mr].data;for(let kt=0;kt<hr.length;++kt)hr[kt]=(hr[kt]-wr[kt])/nr[kt];hr.set((0,_.medianFilter)(hr,_e))}}}const Et=[(0,u.mean)(vt,1)],mt=w.sequences.dims,Nt=new u.Tensor("float32",new Float32Array(mt[0]*mt[1]),mt);for(let _t=0;_t<mt[0];++_t){const pt=Et[_t].neg().squeeze_(0),[Ot,Ht]=(0,_.dynamic_time_warping)(pt.tolist()),nr=Array.from({length:Ot.length-1},(hr,kt)=>Ot[kt+1]-Ot[kt]),wr=(0,i.mergeArrays)([1],nr).map(hr=>!!hr),Mr=[];for(let hr=0;hr<wr.length;++hr)wr[hr]&&Mr.push(Ht[hr]*pe);Nt[_t].data.set(Mr,1)}return Nt}}class ui extends po{}class mo extends W{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class ho extends mo{}class _o extends mo{}class fo extends W{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class go extends W{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class On extends go{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return F({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class di extends On{}class pi extends On{}class mi extends W{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class hi extends mi{_merge_input_ids_with_image_features({inputs_embeds:w,image_features:R,input_ids:oe,attention_mask:pe}){return{inputs_embeds:(0,u.cat)([R,w],1),attention_mask:(0,u.cat)([(0,u.ones)(R.dims.slice(0,2)),pe],1)}}async _prepare_inputs_embeds({input_ids:w,pixel_values:R,inputs_embeds:oe,attention_mask:pe}){if(!w&&!R)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let _e,$e;return w&&(_e=await this.encode_text({input_ids:w})),R&&($e=await this.encode_image({pixel_values:R})),_e&&$e?{inputs_embeds:oe,attention_mask:pe}=this._merge_input_ids_with_image_features({inputs_embeds:_e,image_features:$e,input_ids:w,attention_mask:pe}):oe=_e||$e,{inputs_embeds:oe,attention_mask:pe}}async forward({input_ids:w,pixel_values:R,attention_mask:oe,decoder_input_ids:pe,decoder_attention_mask:_e,encoder_outputs:$e,past_key_values:ze,inputs_embeds:Ve,decoder_inputs_embeds:nt}){if(Ve||({inputs_embeds:Ve,attention_mask:oe}=await this._prepare_inputs_embeds({input_ids:w,pixel_values:R,inputs_embeds:Ve,attention_mask:oe})),!$e){let{last_hidden_state:Et}=await te(this,{inputs_embeds:Ve,attention_mask:oe});$e=Et}if(!nt){if(!pe)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");nt=await this.encode_text({input_ids:pe})}return await ue(this,{inputs_embeds:nt,attention_mask:_e,encoder_attention_mask:oe,encoder_hidden_states:$e,past_key_values:ze},!0)}}class _i extends W{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class fi extends _i{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return F({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class nn extends go{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return F({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class qs extends W{forward_params=["input_ids","attention_mask","inputs_embeds","per_layer_inputs","position_ids","pixel_values","input_features","input_features_mask","past_key_values"]}class Dn extends qs{async forward({input_ids:w=null,attention_mask:R=null,pixel_values:oe=null,input_features:pe=null,input_features_mask:_e=null,position_ids:$e=null,inputs_embeds:ze=null,per_layer_inputs:Ve=null,past_key_values:nt=null,generation_config:bt=null,logits_processor:vt=null,...Et}){if((!ze||!Ve)&&({inputs_embeds:ze,per_layer_inputs:Ve}=await D(this.sessions.embed_tokens,{input_ids:w}),w.dims[1]!==1)){if(oe){const{image_features:Nt}=await D(this.sessions.vision_encoder,{pixel_values:oe});({inputs_embeds:ze,attention_mask:R}=this._merge_input_ids_with_image_features({image_features:Nt,inputs_embeds:ze,input_ids:w,attention_mask:R}))}if(pe){const{audio_features:Nt}=await D(this.sessions.audio_encoder,{input_features:pe,input_features_mask:_e});({inputs_embeds:ze,attention_mask:R}=this._merge_input_ids_with_audio_features({audio_features:Nt,inputs_embeds:ze,input_ids:w,attention_mask:R}))}}return await ue(this,{inputs_embeds:ze,per_layer_inputs:Ve,past_key_values:nt,attention_mask:R,position_ids:$e,generation_config:bt,logits_processor:vt},!0)}_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return F({image_token_id:this.config.image_token_id,...w,image_features:oe})}_merge_input_ids_with_audio_features(w){const R=w.audio_features.dims.at(-1),oe=w.audio_features.view(-1,R);return G({audio_token_id:this.config.audio_token_id,...w,audio_features:oe})}}class gi extends W{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class Ln extends gi{async encode_image({pixel_values:w,pixel_attention_mask:R}){return(await D(this.sessions.vision_encoder,{pixel_values:w,pixel_attention_mask:R})).image_features}_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return F({image_token_id:this.config.image_token_id,...w,image_features:oe})}}class on extends Ln{}class zn extends W{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class Bn extends zn{async forward({input_ids:w=null,attention_mask:R=null,pixel_values:oe=null,image_sizes:pe=null,position_ids:_e=null,inputs_embeds:$e=null,past_key_values:ze=null,generation_config:Ve=null,logits_processor:nt=null,...bt}){if(!$e){let Et;if(oe&&w.dims[1]!==1){if(!pe)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:Et}=await D(this.sessions.vision_encoder,{pixel_values:oe,image_sizes:pe}))}else{const mt=this.config.normalized_config.hidden_size;Et=new u.Tensor("float32",[],[0,mt])}({inputs_embeds:$e}=await D(this.sessions.prepare_inputs_embeds,{input_ids:w,image_features:Et}))}return await ue(this,{inputs_embeds:$e,past_key_values:ze,attention_mask:R,position_ids:_e,generation_config:Ve,logits_processor:nt},!1)}}class ks extends W{}class wo extends ks{}class wi extends ks{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class Mo extends ks{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class Mi extends ks{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class bi extends ks{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class Rn extends W{}class bo extends Rn{}class an extends Rn{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class ut extends ks{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class yi extends W{}class yo extends yi{}class ln extends W{}class cn extends ln{async forward(w){const R=!w.input_ids,oe=!w.pixel_values;if(R&&oe)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(R&&(w.input_ids=(0,u.ones)([w.pixel_values.dims[0],1])),oe){const{image_size:nt}=this.config.vision_config;w.pixel_values=(0,u.full)([0,3,nt,nt],0)}const{text_embeddings:pe,image_embeddings:_e,l2norm_text_embeddings:$e,l2norm_image_embeddings:ze}=await super.forward(w),Ve={};return R||(Ve.text_embeddings=pe,Ve.l2norm_text_embeddings=$e),oe||(Ve.image_embeddings=_e,Ve.l2norm_image_embeddings=ze),Ve}}class Qr extends ln{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class un extends ln{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class dn extends W{}class vo extends dn{}class xo extends dn{}class jn extends W{}class Nn extends jn{}class To extends jn{}class Vn extends W{}class Eo extends Vn{}class pn extends Vn{}class mn extends W{}class Un extends mn{}class Po extends mn{}class Wn extends W{}class Co extends Wn{}class So extends Wn{}class Gn extends W{}class m extends Gn{}class P extends Gn{}class A extends W{}class L extends A{}class V extends A{}class ie extends W{}class Te extends ie{}class De extends ie{}class He extends W{}class ot extends He{}class wt extends He{}class At extends W{}class Rt extends At{}class Tr extends At{}class Is extends W{}class vi extends Is{}class $u extends Is{}class ma extends W{}class ku extends ma{}class Iu extends ma{}class ha extends W{}class Au extends ha{}class Fu extends ha{}class _a extends W{}class Ou extends _a{}class Du extends _a{}class fa extends W{}class Lu extends fa{}class zu extends fa{}class ga extends W{}class Bu extends ga{}class Ru extends ga{}class wa extends W{}class ju extends wa{}class Nu extends wa{}class Ma extends W{}class Vu extends Ma{}class Uu extends Ma{}class ba extends W{}class Wu extends ba{}class Gu extends ba{}class ya extends W{}class Ku extends ya{}class Hu extends ya{}class va extends W{}class qu extends va{}class Qu extends va{}class xa extends W{}class Xu extends xa{}class Ju extends xa{}class Ta extends W{}class Yu extends Ta{}class Zu extends Ta{}class Ea extends W{}class ed extends Ea{}class td extends Ea{}class Pa extends W{}class rd extends Pa{}class sd extends Pa{}class Ca extends W{}class nd extends Ca{}class od extends Ca{}class id extends W{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class ad extends id{get_rope_index(w,R,oe,pe){const{vision_config:_e,image_token_id:$e,video_token_id:ze,vision_start_token_id:Ve}=this.config,nt=_e.spatial_merge_size??2,bt=[];if(R||oe){let vt=w.tolist();pe||(pe=(0,u.ones_like)(w));const Et=pe.tolist(),mt=Array.from({length:3},Ht=>Array.from({length:w.dims[0]},nr=>Array.from({length:w.dims[1]},wr=>1))),Nt=R?R.tolist():[],_t=oe?oe.tolist():[];let pt=0,Ot=0;for(let Ht=0;Ht<vt.length;++Ht){const nr=vt[Ht].filter((er,Pr)=>Et[Ht][Pr]==1),Mr=nr.reduce((er,Pr,Xs)=>(Pr==Ve&&er.push(Xs),er),[]).map(er=>nr[er+1]),hr=Mr.filter(er=>er==$e).length,kt=Mr.filter(er=>er==ze).length;let or=[],Sr=0,_n=hr,Vr=kt;for(let er=0;er<Mr.length;++er){const Pr=nr.findIndex((gn,hs)=>hs>Sr&&gn==$e),Xs=nr.findIndex((gn,hs)=>hs>Sr&&gn==ze),fn=_n>0&&Pr!==-1?Pr:nr.length+1,Xn=Vr>0&&Xs!==-1?Xs:nr.length+1;let Ri,Cl,Sl,$l;fn<Xn?([Cl,Sl,$l]=Nt[pt],++pt,--_n,Ri=fn):([Cl,Sl,$l]=_t[Ot],++Ot,--Vr,Ri=Xn);const[Iv,kl,ji]=[Number(Cl),Math.floor(Number(Sl)/nt),Math.floor(Number($l)/nt)],Il=Ri-Sr,h_=or.length>0?(0,_.max)(or.at(-1))[0]+1:0;or.push(Array.from({length:3*Il},(gn,hs)=>h_+hs%Il));const Al=Il+h_,Ni=Iv*kl*ji,Av=Array.from({length:Ni},(gn,hs)=>Al+Math.floor(hs/(kl*ji))),Fv=Array.from({length:Ni},(gn,hs)=>Al+Math.floor(hs/ji)%kl),Ov=Array.from({length:Ni},(gn,hs)=>Al+hs%ji);or.push([Av,Fv,Ov].flat()),Sr=Ri+Ni}if(Sr<nr.length){const er=or.length>0?(0,_.max)(or.at(-1))[0]+1:0,Pr=nr.length-Sr;or.push(Array.from({length:3*Pr},(Xs,fn)=>er+fn%Pr))}const ms=or.reduce((er,Pr)=>er+Pr.length,0),qn=new Array(ms);let Qn=0;for(let er=0;er<3;++er)for(let Pr=0;Pr<or.length;++Pr){const Xs=or[Pr],fn=Xs.length/3;for(let Xn=er*fn;Xn<(er+1)*fn;++Xn)qn[Qn++]=Xs[Xn]}let Bi=0;const Io=Et[Ht];for(let er=0;er<Io.length;++er)if(Io[er]==1){for(let Pr=0;Pr<3;++Pr)mt[Pr][Ht][er]=qn[Pr*ms/3+Bi];++Bi}const kv=(0,_.max)(qn)[0];bt.push(kv+1-vt[Ht].length)}return[new u.Tensor("int64",mt.flat(1/0),[3,w.dims[0],w.dims[1]]),new u.Tensor("int64",bt,[bt.length,1])]}else if(pe){const{data:vt,dims:Et}=ve(pe),mt=BigInt64Array.from({length:3*vt.length},(_t,pt)=>vt[pt%vt.length]),Nt=Array.from({length:Et[0]},(_t,pt)=>(0,_.max)(vt.subarray(Et[1]*pt,Et[1]*(pt+1)))[0]+1n+BigInt(Et[1]));return[new u.Tensor("int64",mt,[3,...Et]),new u.Tensor("int64",Nt,[Nt.length,1])]}else{const[vt,Et]=w.dims,mt=BigInt64Array.from({length:3*vt*Et},(Nt,_t)=>BigInt(Math.floor(_t%Et/vt)));return[new u.Tensor("int64",mt,[3,...w.dims]),(0,u.zeros)([vt,1])]}}async encode_image({pixel_values:w,image_grid_thw:R}){return(await D(this.sessions.vision_encoder,{pixel_values:w,grid_thw:R})).image_features}_merge_input_ids_with_image_features(w){return F({image_token_id:this.config.image_token_id,...w})}prepare_inputs_for_generation(w,R,oe){if(R.attention_mask&&!R.position_ids)if(!R.past_key_values)[R.position_ids,R.rope_deltas]=this.get_rope_index(R.input_ids,R.image_grid_thw,R.video_grid_thw,R.attention_mask);else{R.pixel_values=null;const pe=BigInt(Object.values(R.past_key_values)[0].dims.at(-2)),_e=R.rope_deltas.map($e=>pe+$e);R.position_ids=(0,u.stack)([_e,_e,_e],0)}return R}}class Sa extends W{}class ld extends Sa{}class cd extends Sa{}class $a extends W{}class ud extends $a{}class dd extends $a{}class ka extends W{}class pd extends ka{}class md extends ka{}class Ia extends W{}class hd extends Ia{}class _d extends Ia{}class Aa extends W{}class fd extends Aa{}class gd extends Aa{}class Fa extends W{}class wd extends Fa{}class Md extends Fa{async _call(w){return new Mt(await super._call(w))}}class Oa extends W{}class bd extends Oa{}class yd extends Oa{async _call(w){return new Mt(await super._call(w))}}class vd extends W{}class xd extends vd{}class Da extends W{}class Td extends Da{}class Ed extends Da{async _call(w){return new Mt(await super._call(w))}}class Pd extends W{}class Cd extends Pd{}class La extends W{}class Sd extends La{}class $d extends La{async _call(w){return new Mt(await super._call(w))}}class kd extends W{}class Id extends kd{}class za extends W{}class Ad extends za{}class Fd extends za{async _call(w){return new Mt(await super._call(w))}}class Od extends W{}class Dd extends Od{async _call(w){return new p_(await super._call(w))}}class Ba extends W{}class Ld extends Ba{}class zd extends Ba{async _call(w){return new Mt(await super._call(w))}}class Ra extends W{}class Bd extends Ra{}class Rd extends Ra{async _call(w){return new Mt(await super._call(w))}}class ja extends W{}class jd extends ja{}class Nd extends ja{}class Na extends W{}class Vd extends Na{}class Ud extends Na{}class Va extends W{}class Wd extends Va{}class Gd extends Va{async _call(w){return new Mt(await super._call(w))}}class xi extends W{}class Kd extends xi{}class Hd extends xi{async _call(w){return new Wa(await super._call(w))}}class Ua extends xi{async _call(w){return new qd(await super._call(w))}}class Wa extends fe{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class qd extends fe{constructor({logits:w,pred_boxes:R,pred_masks:oe}){super(),this.logits=w,this.pred_boxes=R,this.pred_masks=oe}}class Ga extends W{}class Qd extends Ga{}class Xd extends Ga{async _call(w){return new $o(await super._call(w))}}class $o extends fe{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class Ka extends W{}class Jd extends Ka{}class Yd extends Ka{async _call(w){return new Zd(await super._call(w))}}class Zd extends $o{}class Ha extends W{}class ep extends Ha{}class tp extends Ha{async _call(w){return new rp(await super._call(w))}}class rp extends $o{}class qa extends W{}class sp extends qa{}class np extends qa{async _call(w){return new $o(await super._call(w))}}class Qa extends W{}class op extends Qa{}class ip extends Qa{async _call(w){return new ap(await super._call(w))}}class ap extends Wa{}class Xa extends W{}class lp extends Xa{}class cp extends Xa{async _call(w){return new Mt(await super._call(w))}}class Ja extends W{}class up extends Ja{}class dp extends Ja{async _call(w){return new Mt(await super._call(w))}}class Ya extends W{}class pp extends Ya{}class mp extends Ya{async _call(w){return new Mt(await super._call(w))}}class Ti extends W{}class hp extends Ti{}class _p extends Ti{async _call(w){return new Mt(await super._call(w))}}class fp extends Ti{}class Za extends W{}class gp extends Za{}class wp extends Za{}class el extends W{}class Mp extends el{}class bp extends el{}class yp extends W{}class vp extends yp{}class Ei extends W{}class xp extends Ei{}class Tp extends Ei{}class Ep extends Ei{}class Pp extends W{}class Cp extends Pp{}class Sp extends W{}class $p extends Sp{}class kp extends W{}class Ip extends kp{}class tl extends W{}class Ap extends tl{}class Fp extends tl{}class rl extends W{}class Op extends rl{}class Dp extends rl{}class Lp extends W{}class zp extends Lp{}class sl extends W{}class Bp extends sl{}class Rp extends sl{async _call(w){return new Mt(await super._call(w))}}class nl extends W{}class jp extends nl{}class Np extends nl{async _call(w){return new Mt(await super._call(w))}}class ol extends W{}class Vp extends ol{}class Up extends ol{async _call(w){return new Mt(await super._call(w))}}class il extends W{}class Wp extends il{}class Gp extends il{async _call(w){return new Mt(await super._call(w))}}class Kp extends W{}class Hp extends Kp{}class al extends W{}class qp extends al{}class Qp extends al{async _call(w){return new Xp(await super._call(w))}}class Xp extends fe{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class Jp extends W{}class Yp extends Jp{async get_image_embeddings({pixel_values:w}){return await te(this,{pixel_values:w})}async forward(w){if((!w.image_embeddings||!w.image_positional_embeddings)&&(w={...w,...await this.get_image_embeddings(w)}),!w.input_labels&&w.input_points){const oe=w.input_points.dims.slice(0,-1),pe=oe.reduce((_e,$e)=>_e*$e,1);w.input_labels=new u.Tensor("int64",new BigInt64Array(pe).fill(1n),oe)}const R={image_embeddings:w.image_embeddings,image_positional_embeddings:w.image_positional_embeddings};return w.input_points&&(R.input_points=w.input_points),w.input_labels&&(R.input_labels=w.input_labels),w.input_boxes&&(R.input_boxes=w.input_boxes),await D(this.sessions.prompt_encoder_mask_decoder,R)}async _call(w){return new Zp(await super._call(w))}}class Zp extends fe{constructor({iou_scores:w,pred_masks:R}){super(),this.iou_scores=w,this.pred_masks=R}}class ll extends W{}class em extends ll{}class tm extends ll{}class cl extends W{}class rm extends cl{}class sm extends cl{}class Qs extends W{}class nm extends Qs{}class om extends Qs{async _call(w){return new hn(await super._call(w))}}class im extends Qs{async _call(w){return new Mt(await super._call(w))}}class am extends Qs{async _call(w){return new Er(await super._call(w))}}class ul extends W{}class lm extends ul{}class cm extends ul{async _call(w){return new Er(await super._call(w))}}class um extends W{}class dm extends um{}class Pi extends W{}class pm extends Pi{}class mm extends Pi{async _call(w){return new hn(await super._call(w))}}class hm extends Pi{async _call(w){return new Mt(await super._call(w))}}class ko extends W{}class _m extends ko{}class fm extends ko{async _call(w){return new hn(await super._call(w))}}class gm extends ko{async _call(w){return new Mt(await super._call(w))}}class wm extends ko{async _call(w){return new Er(await super._call(w))}}class Ci extends W{}class Mm extends Ci{}class bm extends Ci{async _call(w){return new hn(await super._call(w))}}class ym extends Ci{async _call(w){return new Mt(await super._call(w))}}class B0 extends W{}class vm extends Qs{}class xm extends Qs{async _call(w){return new hn(await super._call(w))}}class Tm extends Qs{async _call(w){return new Mt(await super._call(w))}}class Kn extends W{}class Em extends Kn{}class Pm extends Kn{async _call(w){return new hn(await super._call(w))}}class Cm extends Kn{async _call(w){return new Mt(await super._call(w))}}class Sm extends Kn{async _call(w){return new d_(await super._call(w))}}class $m extends Kn{async _call(w){return new Er(await super._call(w))}}class km extends W{}class Im extends km{}class Si extends W{}class R0 extends Si{}class Am extends Si{}class Fm extends Si{async generate_speech(w,R,{threshold:oe=.5,minlenratio:pe=0,maxlenratio:_e=20,vocoder:$e=null}={}){const ze={input_ids:w},{encoder_outputs:Ve,encoder_attention_mask:nt}=await te(this,ze),bt=Ve.dims[1]/this.config.reduction_factor,vt=Math.floor(bt*_e),Et=Math.floor(bt*pe),mt=this.config.num_mel_bins;let Nt=[],_t=null,pt=null,Ot=0;for(;;){++Ot;const wr=Y(!!pt);let Mr;pt?Mr=pt.output_sequence_out:Mr=new u.Tensor("float32",new Float32Array(mt),[1,1,mt]);let hr={use_cache_branch:wr,output_sequence:Mr,encoder_attention_mask:nt,speaker_embeddings:R,encoder_hidden_states:Ve};this.addPastKeyValues(hr,_t),pt=await D(this.sessions.decoder_model_merged,hr),_t=this.getPastKeyValues(pt,_t);const{prob:kt,spectrum:or}=pt;if(Nt.push(or),Ot>=Et&&(Array.from(kt.data).filter(Sr=>Sr>=oe).length>0||Ot>=vt))break}const Ht=(0,u.cat)(Nt),{waveform:nr}=await D($e.sessions.model,{spectrogram:Ht});return{spectrogram:Ht,waveform:nr}}}class Om extends W{main_input_name="spectrogram"}class Dm extends W{}class Lm extends Dm{}class dl extends W{}class zm extends dl{}class Bm extends dl{}class pl extends W{}class Rm extends pl{}class jm extends pl{}class ml extends W{}class Nm extends ml{}class Vm extends ml{}class hl extends W{}class Um extends hl{}class Wm extends hl{}class $i extends W{}class Gm extends $i{}class Km extends $i{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class Hm extends $i{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"audio_model"})}}class qm extends W{}class _l extends qm{async _call(w){return new m_(await super._call(w))}}class ki extends W{}class j0 extends ki{}class Qm extends ki{}class Xm extends ki{}class fl extends W{}class Jm extends fl{}class Ym extends fl{}class gl extends W{}class Zm extends gl{}class eh extends gl{async _call(w){return new Mt(await super._call(w))}}class wl extends W{}class N0 extends wl{}class V0 extends wl{}class Ml extends W{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(w){const[R,oe]=w.dims,pe=this.config.decoder.num_codebooks,_e=oe-pe;let $e=0;for(let nt=0;nt<w.size;++nt){if(w.data[nt]===this.config.decoder.pad_token_id)continue;const bt=nt%oe,vt=Math.floor(nt/oe)%pe,Et=bt-vt;Et>0&&Et<=_e&&(w.data[$e++]=w.data[nt])}const ze=Math.floor(R/pe),Ve=$e/(ze*pe);return new u.Tensor(w.type,w.data.slice(0,$e),[ze,pe,Ve])}prepare_inputs_for_generation(w,R,oe){let pe=structuredClone(w);for(let $e=0;$e<pe.length;++$e)for(let ze=0;ze<pe[$e].length;++ze)$e%this.config.decoder.num_codebooks>=ze&&(pe[$e][ze]=BigInt(this.config.decoder.pad_token_id));return oe.guidance_scale!==null&&oe.guidance_scale>1&&(pe=pe.concat(pe)),super.prepare_inputs_for_generation(pe,R,oe)}async generate(w){const R=await super.generate(w),oe=this._apply_and_filter_by_delay_pattern_mask(R).unsqueeze_(0),{audio_values:pe}=await D(this.sessions.encodec_decode,{audio_codes:oe});return pe}}class Ii extends W{}class th extends Ii{}class rh extends Ii{async _call(w){return new Mt(await super._call(w))}}class sh extends Ii{}class Ai extends W{}class nh extends Ai{}class oh extends Ai{async _call(w){return new Mt(await super._call(w))}}class ih extends Ai{}class Fi extends W{}class ah extends Fi{}class lh extends Fi{async _call(w){return new Mt(await super._call(w))}}class ch extends Fi{}class Oi extends W{}class uh extends Oi{}class dh extends Oi{async _call(w){return new Mt(await super._call(w))}}class ph extends Oi{}class mh extends W{}class hh extends mh{}class _h extends W{}class fh extends _h{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...w){super(...w),this._generation_mode="text"}async forward(w){const R=this._generation_mode??"text";let oe;if(R==="text"||!w.past_key_values){const Ve=this.sessions.prepare_inputs_embeds,nt=(0,i.pick)(w,Ve.inputNames);oe=await D(Ve,nt)}else{const Ve=this.sessions.gen_img_embeds,nt=(0,i.pick)({image_ids:w.input_ids},Ve.inputNames);oe=await D(Ve,nt)}const pe={...w,...oe},_e=await ue(this,pe),$e=this.sessions[R==="text"?"lm_head":"gen_head"];if(!$e)throw new Error(`Unable to find "${$e}" generation head`);const ze=await D($e,(0,i.pick)(_e,$e.inputNames));return{...oe,..._e,...ze}}async generate(w){return this._generation_mode="text",super.generate(w)}async generate_images(w){this._generation_mode="image";const R=(w.inputs??w[this.main_input_name]).dims[1],pe=(await super.generate(w)).slice(null,[R,null]),_e=this.sessions.image_decode,{decoded_image:$e}=await D(_e,{generated_tokens:pe}),ze=$e.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),Ve=[];for(const nt of ze){const bt=f.RawImage.fromTensor(nt);Ve.push(bt)}return Ve}}class gh extends fe{constructor({char_logits:w,bpe_logits:R,wp_logits:oe}){super(),this.char_logits=w,this.bpe_logits=R,this.wp_logits=oe}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class wh extends W{}class Mh extends wh{async _call(w){return new gh(await super._call(w))}}class bl extends W{}class bh extends bl{}class yh extends bl{}class yl extends W{}class vh extends yl{}class xh extends yl{}class Th extends W{forward_params=["input_ids","attention_mask","position_ids","audio_values","past_key_values"]}class vl extends Th{_merge_input_ids_with_audio_features(w){const R=w.audio_features.dims.at(-1),oe=w.audio_features.view(-1,R);return G({audio_token_id:this.config.ignore_index??this.config.audio_token_id,...w,audio_features:oe})}}class Eh extends vl{}class Di extends W{main_input_name="input_values";forward_params=["input_values"]}class Ph extends fe{constructor({audio_codes:w}){super(),this.audio_codes=w}}class Ch extends fe{constructor({audio_values:w}){super(),this.audio_values=w}}class Sh extends Di{async encode(w){return new Ph(await D(this.sessions.encoder_model,w))}async decode(w){return new Ch(await D(this.sessions.decoder_model,w))}}class $h extends Di{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class kh extends Di{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class Li extends W{main_input_name="input_values";forward_params=["input_values"]}class Ih extends fe{constructor({audio_codes:w}){super(),this.audio_codes=w}}class Ah extends fe{constructor({audio_values:w}){super(),this.audio_values=w}}class Fh extends Li{async encode(w){return new Ih(await D(this.sessions.encoder_model,w))}async decode(w){return new Ah(await D(this.sessions.decoder_model,w))}}class Oh extends Li{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class Dh extends Li{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class zi extends W{main_input_name="input_values";forward_params=["input_values"]}class Lh extends zi{async encode(w){return await D(this.sessions.encoder_model,w)}async decode(w){return await D(this.sessions.decoder_model,w)}}class zh extends zi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class Bh extends zi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class jt{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(w,{progress_callback:R=null,config:oe=null,cache_dir:pe=null,local_files_only:_e=!1,revision:$e="main",model_file_name:ze=null,subfolder:Ve="onnx",device:nt=null,dtype:bt=null,use_external_data_format:vt=null,session_options:Et={}}={}){const mt={progress_callback:R,config:oe,cache_dir:pe,local_files_only:_e,revision:$e,model_file_name:ze,subfolder:Ve,device:nt,dtype:bt,use_external_data_format:vt,session_options:Et};if(mt.config=await s.AutoConfig.from_pretrained(w,mt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const Nt=mt.config.model_type;for(const _t of this.MODEL_CLASS_MAPPINGS){let pt=_t.get(Nt);if(!pt){for(const Ot of _t.values())if(Ot[0]===Nt){pt=Ot;break}if(!pt)continue}return await pt[1].from_pretrained(w,mt)}if(this.BASE_IF_FAIL)return u_.has(Nt)||console.warn(`Unknown model class "${Nt}", attempting to construct from base class.`),await W.from_pretrained(w,mt);throw Error(`Unsupported model type: ${Nt}`)}}const U0=new Map([["bert",["BertModel",ge]],["neobert",["NeoBertModel",be]],["modernbert",["ModernBertModel",Ye]],["nomic_bert",["NomicBertModel",Zr]],["roformer",["RoFormerModel",kr]],["electra",["ElectraModel",N]],["esm",["EsmModel",Ds]],["convbert",["ConvBertModel",Es]],["camembert",["CamembertModel",lt]],["deberta",["DebertaModel",cr]],["deberta-v2",["DebertaV2Model",ls]],["mpnet",["MPNetModel",rn]],["albert",["AlbertModel",Xe]],["distilbert",["DistilBertModel",Kr]],["roberta",["RobertaModel",Yo]],["xlm",["XLMModel",si]],["xlm-roberta",["XLMRobertaModel",oo]],["clap",["ClapModel",Gm]],["clip",["CLIPModel",wo]],["clipseg",["CLIPSegModel",vo]],["chinese_clip",["ChineseCLIPModel",yo]],["siglip",["SiglipModel",bo]],["jina_clip",["JinaCLIPModel",cn]],["mobilebert",["MobileBertModel",Xt]],["squeezebert",["SqueezeBertModel",ee]],["wav2vec2",["Wav2Vec2Model",nm]],["wav2vec2-bert",["Wav2Vec2BertModel",Mm]],["unispeech",["UniSpeechModel",pm]],["unispeech-sat",["UniSpeechSatModel",_m]],["hubert",["HubertModel",vm]],["wavlm",["WavLMModel",Em]],["audio-spectrogram-transformer",["ASTModel",lo]],["vits",["VitsModel",_l]],["pyannote",["PyAnnoteModel",lm]],["wespeaker-resnet",["WeSpeakerResNetModel",dm]],["detr",["DetrModel",Kd]],["rt_detr",["RTDetrModel",Qd]],["rt_detr_v2",["RTDetrV2Model",Jd]],["rf_detr",["RFDetrModel",ep]],["d_fine",["DFineModel",sp]],["table-transformer",["TableTransformerModel",op]],["vit",["ViTModel",wd]],["ijepa",["IJepaModel",bd]],["pvt",["PvtModel",Td]],["vit_msn",["ViTMSNModel",Sd]],["vit_mae",["ViTMAEModel",Cd]],["groupvit",["GroupViTModel",Id]],["fastvit",["FastViTModel",Ad]],["mobilevit",["MobileViTModel",Ld]],["mobilevitv2",["MobileViTV2Model",Bd]],["owlvit",["OwlViTModel",jd]],["owlv2",["Owlv2Model",Vd]],["beit",["BeitModel",Wd]],["deit",["DeiTModel",lp]],["hiera",["HieraModel",up]],["convnext",["ConvNextModel",Bp]],["convnextv2",["ConvNextV2Model",jp]],["dinov2",["Dinov2Model",Vp]],["dinov2_with_registers",["Dinov2WithRegistersModel",Wp]],["resnet",["ResNetModel",pp]],["swin",["SwinModel",hp]],["swin2sr",["Swin2SRModel",gp]],["donut-swin",["DonutSwinModel",zp]],["yolos",["YolosModel",qp]],["dpt",["DPTModel",Mp]],["glpn",["GLPNModel",Op]],["hifigan",["SpeechT5HifiGan",Om]],["efficientnet",["EfficientNetModel",Zm]],["decision_transformer",["DecisionTransformerModel",hh]],["patchtst",["PatchTSTForPrediction",bh]],["patchtsmixer",["PatchTSMixerForPrediction",vh]],["mobilenet_v1",["MobileNetV1Model",th]],["mobilenet_v2",["MobileNetV2Model",nh]],["mobilenet_v3",["MobileNetV3Model",ah]],["mobilenet_v4",["MobileNetV4Model",uh]],["maskformer",["MaskFormerModel",Ap]],["mgp-str",["MgpstrForSceneTextRecognition",Mh]],["style_text_to_speech_2",["StyleTextToSpeech2Model",Im]]]),W0=new Map([["t5",["T5Model",tr]],["longt5",["LongT5Model",rr]],["mt5",["MT5Model",rs]],["bart",["BartModel",Zt]],["mbart",["MBartModel",ps]],["marian",["MarianModel",em]],["whisper",["WhisperModel",uo]],["m2m_100",["M2M100Model",rm]],["blenderbot",["BlenderbotModel",mr]],["blenderbot-small",["BlenderbotSmallModel",Ws]]]),G0=new Map([["mimi",["MimiModel",Sh]],["dac",["DacModel",Fh]],["snac",["SnacModel",Lh]]]),K0=new Map([["bloom",["BloomModel",pd]],["jais",["JAISModel",Eo]],["gpt2",["GPT2Model",Nn]],["gptj",["GPTJModel",m]],["gpt_bigcode",["GPTBigCodeModel",L]],["gpt_neo",["GPTNeoModel",Un]],["gpt_neox",["GPTNeoXModel",Co]],["codegen",["CodeGenModel",Te]],["llama",["LlamaModel",ot]],["arcee",["ArceeModel",Rt]],["lfm2",["Lfm2Model",vi]],["smollm3",["SmolLM3Model",ku]],["exaone",["ExaoneModel",Lu]],["olmo",["OlmoModel",ju]],["olmo2",["Olmo2Model",Vu]],["mobilellm",["MobileLLMModel",Bu]],["granite",["GraniteModel",Wu]],["cohere",["CohereModel",Ku]],["gemma",["GemmaModel",qu]],["gemma2",["Gemma2Model",Xu]],["gemma3_text",["Gemma3Model",Yu]],["helium",["HeliumModel",Au]],["glm",["GlmModel",Ou]],["openelm",["OpenELMModel",ed]],["qwen2",["Qwen2Model",rd]],["qwen3",["Qwen3Model",nd]],["phi",["PhiModel",ld]],["phi3",["Phi3Model",ud]],["mpt",["MptModel",hd]],["opt",["OPTModel",fd]],["mistral",["MistralModel",zm]],["ernie4_5",["Ernie4_5_Model",Rm]],["starcoder2",["Starcoder2Model",Nm]],["falcon",["FalconModel",Um]],["stablelm",["StableLmModel",Jm]],["modernbert-decoder",["ModernBertDecoderModel",br]]]),xl=new Map([["speecht5",["SpeechT5ForSpeechToText",Am]],["whisper",["WhisperForConditionalGeneration",po]],["lite-whisper",["LiteWhisperForConditionalGeneration",ui]],["moonshine",["MoonshineForConditionalGeneration",_o]]]),Rh=new Map([["speecht5",["SpeechT5ForTextToSpeech",Fm]]]),jh=new Map([["vits",["VitsModel",_l]],["musicgen",["MusicgenForConditionalGeneration",Ml]]]),Nh=new Map([["bert",["BertForSequenceClassification",we]],["neobert",["NeoBertForSequenceClassification",Ne]],["modernbert",["ModernBertForSequenceClassification",Pt]],["roformer",["RoFormerForSequenceClassification",Us]],["electra",["ElectraForSequenceClassification",ne]],["esm",["EsmForSequenceClassification",Le]],["convbert",["ConvBertForSequenceClassification",Tt]],["camembert",["CamembertForSequenceClassification",Ct]],["deberta",["DebertaForSequenceClassification",Qt]],["deberta-v2",["DebertaV2ForSequenceClassification",Dr]],["mpnet",["MPNetForSequenceClassification",In]],["albert",["AlbertForSequenceClassification",Je]],["distilbert",["DistilBertForSequenceClassification",dr]],["roberta",["RobertaForSequenceClassification",ei]],["xlm",["XLMForSequenceClassification",oi]],["xlm-roberta",["XLMRobertaForSequenceClassification",ao]],["bart",["BartForSequenceClassification",zr]],["mbart",["MBartForSequenceClassification",ss]],["mobilebert",["MobileBertForSequenceClassification",$s]],["squeezebert",["SqueezeBertForSequenceClassification",he]]]),Vh=new Map([["bert",["BertForTokenClassification",Ie]],["neobert",["NeoBertForTokenClassification",je]],["modernbert",["ModernBertForTokenClassification",It]],["roformer",["RoFormerForTokenClassification",Fs]],["electra",["ElectraForTokenClassification",me]],["esm",["EsmForTokenClassification",Re]],["convbert",["ConvBertForTokenClassification",Ps]],["camembert",["CamembertForTokenClassification",$t]],["deberta",["DebertaForTokenClassification",fr]],["deberta-v2",["DebertaV2ForTokenClassification",Cs]],["mpnet",["MPNetForTokenClassification",le]],["distilbert",["DistilBertForTokenClassification",yr]],["roberta",["RobertaForTokenClassification",ti]],["xlm",["XLMForTokenClassification",ii]],["xlm-roberta",["XLMRobertaForTokenClassification",li]]]),Tl=new Map([["t5",["T5ForConditionalGeneration",vr]],["longt5",["LongT5ForConditionalGeneration",Wt]],["mt5",["MT5ForConditionalGeneration",Ir]],["bart",["BartForConditionalGeneration",pr]],["mbart",["MBartForConditionalGeneration",gr]],["marian",["MarianMTModel",tm]],["m2m_100",["M2M100ForConditionalGeneration",sm]],["blenderbot",["BlenderbotForConditionalGeneration",ar]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",An]]]),El=new Map([["bloom",["BloomForCausalLM",md]],["gpt2",["GPT2LMHeadModel",To]],["jais",["JAISLMHeadModel",pn]],["gptj",["GPTJForCausalLM",P]],["gpt_bigcode",["GPTBigCodeForCausalLM",V]],["gpt_neo",["GPTNeoForCausalLM",Po]],["gpt_neox",["GPTNeoXForCausalLM",So]],["codegen",["CodeGenForCausalLM",De]],["llama",["LlamaForCausalLM",wt]],["arcee",["ArceeForCausalLM",Tr]],["lfm2",["Lfm2ForCausalLM",$u]],["smollm3",["SmolLM3ForCausalLM",Iu]],["exaone",["ExaoneForCausalLM",zu]],["olmo",["OlmoForCausalLM",Nu]],["olmo2",["Olmo2ForCausalLM",Uu]],["mobilellm",["MobileLLMForCausalLM",Ru]],["granite",["GraniteForCausalLM",Gu]],["cohere",["CohereForCausalLM",Hu]],["gemma",["GemmaForCausalLM",Qu]],["gemma2",["Gemma2ForCausalLM",Ju]],["gemma3_text",["Gemma3ForCausalLM",Zu]],["helium",["HeliumForCausalLM",Fu]],["glm",["GlmForCausalLM",Du]],["openelm",["OpenELMForCausalLM",td]],["qwen2",["Qwen2ForCausalLM",sd]],["qwen3",["Qwen3ForCausalLM",od]],["phi",["PhiForCausalLM",cd]],["phi3",["Phi3ForCausalLM",dd]],["mpt",["MptForCausalLM",_d]],["opt",["OPTForCausalLM",gd]],["mbart",["MBartForCausalLM",xr]],["mistral",["MistralForCausalLM",Bm]],["ernie4_5",["Ernie4_5_ForCausalLM",jm]],["starcoder2",["Starcoder2ForCausalLM",Vm]],["falcon",["FalconForCausalLM",Wm]],["trocr",["TrOCRForCausalLM",Lm]],["stablelm",["StableLmForCausalLM",Ym]],["modernbert-decoder",["ModernBertDecoderForCausalLM",Wr]],["phi3_v",["Phi3VForCausalLM",Bn]]]),H0=new Map([["multi_modality",["MultiModalityCausalLM",fh]]]),Uh=new Map([["bert",["BertForMaskedLM",Ee]],["neobert",["NeoBertForMaskedLM",st]],["modernbert",["ModernBertForMaskedLM",Ze]],["roformer",["RoFormerForMaskedLM",Vs]],["electra",["ElectraForMaskedLM",J]],["esm",["EsmForMaskedLM",Lr]],["convbert",["ConvBertForMaskedLM",Ut]],["camembert",["CamembertForMaskedLM",Ge]],["deberta",["DebertaForMaskedLM",Gr]],["deberta-v2",["DebertaV2ForMaskedLM",cs]],["mpnet",["MPNetForMaskedLM",sn]],["albert",["AlbertForMaskedLM",St]],["distilbert",["DistilBertForMaskedLM",Ss]],["roberta",["RobertaForMaskedLM",Zo]],["xlm",["XLMWithLMHeadModel",ni]],["xlm-roberta",["XLMRobertaForMaskedLM",io]],["mobilebert",["MobileBertForMaskedLM",Ls]],["squeezebert",["SqueezeBertForMaskedLM",se]]]),Wh=new Map([["bert",["BertForQuestionAnswering",Oe]],["neobert",["NeoBertForQuestionAnswering",et]],["roformer",["RoFormerForQuestionAnswering",Os]],["electra",["ElectraForQuestionAnswering",Se]],["convbert",["ConvBertForQuestionAnswering",C]],["camembert",["CamembertForQuestionAnswering",_r]],["deberta",["DebertaForQuestionAnswering",es]],["deberta-v2",["DebertaV2ForQuestionAnswering",us]],["mpnet",["MPNetForQuestionAnswering",k]],["albert",["AlbertForQuestionAnswering",Ue]],["distilbert",["DistilBertForQuestionAnswering",ts]],["roberta",["RobertaForQuestionAnswering",ri]],["xlm",["XLMForQuestionAnswering",ai]],["xlm-roberta",["XLMRobertaForQuestionAnswering",ci]],["mobilebert",["MobileBertForQuestionAnswering",zs]],["squeezebert",["SqueezeBertForQuestionAnswering",Ce]]]),Pl=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fo]],["idefics3",["Idefics3ForConditionalGeneration",Ln]],["smolvlm",["SmolVLMForConditionalGeneration",on]]]),Gh=new Map([["llava",["LlavaForConditionalGeneration",On]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",di]],["moondream1",["Moondream1ForConditionalGeneration",pi]],["florence2",["Florence2ForConditionalGeneration",hi]],["qwen2-vl",["Qwen2VLForConditionalGeneration",ad]],["idefics3",["Idefics3ForConditionalGeneration",Ln]],["smolvlm",["SmolVLMForConditionalGeneration",on]],["paligemma",["PaliGemmaForConditionalGeneration",fi]],["llava_qwen2",["LlavaQwen2ForCausalLM",nn]],["gemma3n",["Gemma3nForConditionalGeneration",Dn]]]),Kh=new Map([["ultravox",["UltravoxModel",vl]],["voxtral",["VoxtralForConditionalGeneration",Eh]]]),q0=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fo]]]),Hh=new Map([["vit",["ViTForImageClassification",Md]],["ijepa",["IJepaForImageClassification",yd]],["pvt",["PvtForImageClassification",Ed]],["vit_msn",["ViTMSNForImageClassification",$d]],["fastvit",["FastViTForImageClassification",Fd]],["mobilevit",["MobileViTForImageClassification",zd]],["mobilevitv2",["MobileViTV2ForImageClassification",Rd]],["beit",["BeitForImageClassification",Gd]],["deit",["DeiTForImageClassification",cp]],["hiera",["HieraForImageClassification",dp]],["convnext",["ConvNextForImageClassification",Rp]],["convnextv2",["ConvNextV2ForImageClassification",Np]],["dinov2",["Dinov2ForImageClassification",Up]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",Gp]],["resnet",["ResNetForImageClassification",mp]],["swin",["SwinForImageClassification",_p]],["segformer",["SegformerForImageClassification",Qm]],["efficientnet",["EfficientNetForImageClassification",eh]],["mobilenet_v1",["MobileNetV1ForImageClassification",rh]],["mobilenet_v2",["MobileNetV2ForImageClassification",oh]],["mobilenet_v3",["MobileNetV3ForImageClassification",lh]],["mobilenet_v4",["MobileNetV4ForImageClassification",dh]]]),qh=new Map([["detr",["DetrForObjectDetection",Hd]],["rt_detr",["RTDetrForObjectDetection",Xd]],["rt_detr_v2",["RTDetrV2ForObjectDetection",Yd]],["rf_detr",["RFDetrForObjectDetection",tp]],["d_fine",["DFineForObjectDetection",np]],["table-transformer",["TableTransformerForObjectDetection",ip]],["yolos",["YolosForObjectDetection",Qp]]]),Qh=new Map([["owlvit",["OwlViTForObjectDetection",Nd]],["owlv2",["Owlv2ForObjectDetection",Ud]],["grounding-dino",["GroundingDinoForObjectDetection",Hp]]]),Hn=new Map([["detr",["DetrForSegmentation",Ua]],["clipseg",["CLIPSegForImageSegmentation",xo]]]),Xh=new Map([["segformer",["SegformerForSemanticSegmentation",Xm]],["sapiens",["SapiensForSemanticSegmentation",xp]],["swin",["SwinForSemanticSegmentation",fp]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",sh]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",ih]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",ch]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",ph]]]),Jh=new Map([["detr",["DetrForSegmentation",Ua]],["maskformer",["MaskFormerForInstanceSegmentation",Fp]]]),Yh=new Map([["sam",["SamModel",Yp]]]),Zh=new Map([["wav2vec2",["Wav2Vec2ForCTC",om]],["wav2vec2-bert",["Wav2Vec2BertForCTC",bm]],["unispeech",["UniSpeechForCTC",mm]],["unispeech-sat",["UniSpeechSatForCTC",fm]],["wavlm",["WavLMForCTC",Pm]],["hubert",["HubertForCTC",xm]]]),e_=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",im]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",ym]],["unispeech",["UniSpeechForSequenceClassification",hm]],["unispeech-sat",["UniSpeechSatForSequenceClassification",gm]],["wavlm",["WavLMForSequenceClassification",Cm]],["hubert",["HubertForSequenceClassification",Tm]],["audio-spectrogram-transformer",["ASTForAudioClassification",Hs]]]),t_=new Map([["wavlm",["WavLMForXVector",Sm]]]),r_=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",wm]],["wavlm",["WavLMForAudioFrameClassification",$m]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",am]],["pyannote",["PyAnnoteForAudioFrameClassification",cm]]]),s_=new Map([["vitmatte",["VitMatteForImageMatting",Dd]]]),Q0=new Map([["patchtst",["PatchTSTForPrediction",yh]],["patchtsmixer",["PatchTSMixerForPrediction",xh]]]),n_=new Map([["swin2sr",["Swin2SRForImageSuperResolution",wp]]]),o_=new Map([["dpt",["DPTForDepthEstimation",bp]],["depth_anything",["DepthAnythingForDepthEstimation",vp]],["glpn",["GLPNForDepthEstimation",Dp]],["sapiens",["SapiensForDepthEstimation",Tp]],["depth_pro",["DepthProForDepthEstimation",Cp]],["metric3d",["Metric3DForDepthEstimation",$p]],["metric3dv2",["Metric3Dv2ForDepthEstimation",Ip]]]),i_=new Map([["sapiens",["SapiensForNormalEstimation",Ep]]]),a_=new Map([["vitpose",["VitPoseForPoseEstimation",xd]]]),l_=new Map([["clip",["CLIPVisionModelWithProjection",bi]],["siglip",["SiglipVisionModel",ut]],["jina_clip",["JinaCLIPVisionModel",un]]]),c_=[[U0,y.EncoderOnly],[W0,y.EncoderDecoder],[K0,y.DecoderOnly],[G0,y.AutoEncoder],[Nh,y.EncoderOnly],[Vh,y.EncoderOnly],[Tl,y.Seq2Seq],[xl,y.Seq2Seq],[El,y.DecoderOnly],[H0,y.MultiModality],[Uh,y.EncoderOnly],[Wh,y.EncoderOnly],[Pl,y.Vision2Seq],[Gh,y.ImageTextToText],[Kh,y.AudioTextToText],[Hh,y.EncoderOnly],[Hn,y.EncoderOnly],[Jh,y.EncoderOnly],[Xh,y.EncoderOnly],[s_,y.EncoderOnly],[Q0,y.EncoderOnly],[n_,y.EncoderOnly],[o_,y.EncoderOnly],[i_,y.EncoderOnly],[a_,y.EncoderOnly],[qh,y.EncoderOnly],[Qh,y.EncoderOnly],[Yh,y.MaskGeneration],[Zh,y.EncoderOnly],[e_,y.EncoderOnly],[Rh,y.Seq2Seq],[jh,y.EncoderOnly],[t_,y.EncoderOnly],[r_,y.EncoderOnly],[l_,y.EncoderOnly]];for(const[g,w]of c_)for(const[R,oe]of g.values())T.set(R,w),x.set(oe,R),E.set(R,oe);const X0=[["MusicgenForConditionalGeneration",Ml,y.Musicgen],["Phi3VForCausalLM",Bn,y.Phi3V],["CLIPTextModelWithProjection",Mo,y.EncoderOnly],["SiglipTextModel",an,y.EncoderOnly],["JinaCLIPTextModel",Qr,y.EncoderOnly],["ClapTextModelWithProjection",Km,y.EncoderOnly],["ClapAudioModelWithProjection",Hm,y.EncoderOnly],["DacEncoderModel",Oh,y.EncoderOnly],["DacDecoderModel",Dh,y.EncoderOnly],["MimiEncoderModel",$h,y.EncoderOnly],["MimiDecoderModel",kh,y.EncoderOnly],["SnacEncoderModel",zh,y.EncoderOnly],["SnacDecoderModel",Bh,y.EncoderOnly],["Gemma3nForConditionalGeneration",Dn,y.ImageAudioTextToText]];for(const[g,w,R]of X0)T.set(g,R),x.set(w,g),E.set(g,w);const u_=new Map([["modnet",Hn],["birefnet",Hn],["isnet",Hn],["ben",Hn]]);for(const[g,w]of u_.entries())w.set(g,["PreTrainedModel",W]),T.set(g,y.EncoderOnly),x.set(W,g),E.set(g,W);class J0 extends jt{static MODEL_CLASS_MAPPINGS=c_.map(w=>w[0]);static BASE_IF_FAIL=!0}class Y0 extends jt{static MODEL_CLASS_MAPPINGS=[Nh]}class Z0 extends jt{static MODEL_CLASS_MAPPINGS=[Vh]}class ev extends jt{static MODEL_CLASS_MAPPINGS=[Tl]}class tv extends jt{static MODEL_CLASS_MAPPINGS=[xl]}class rv extends jt{static MODEL_CLASS_MAPPINGS=[Rh]}class sv extends jt{static MODEL_CLASS_MAPPINGS=[jh]}class nv extends jt{static MODEL_CLASS_MAPPINGS=[El]}class ov extends jt{static MODEL_CLASS_MAPPINGS=[Uh]}class iv extends jt{static MODEL_CLASS_MAPPINGS=[Wh]}class av extends jt{static MODEL_CLASS_MAPPINGS=[Pl]}class lv extends jt{static MODEL_CLASS_MAPPINGS=[Hh]}class cv extends jt{static MODEL_CLASS_MAPPINGS=[Hn]}class uv extends jt{static MODEL_CLASS_MAPPINGS=[Xh]}class dv extends jt{static MODEL_CLASS_MAPPINGS=[Jh]}class pv extends jt{static MODEL_CLASS_MAPPINGS=[qh]}class mv extends jt{static MODEL_CLASS_MAPPINGS=[Qh]}class hv extends jt{static MODEL_CLASS_MAPPINGS=[Yh]}class _v extends jt{static MODEL_CLASS_MAPPINGS=[Zh]}class fv extends jt{static MODEL_CLASS_MAPPINGS=[e_]}class gv extends jt{static MODEL_CLASS_MAPPINGS=[t_]}class wv extends jt{static MODEL_CLASS_MAPPINGS=[r_]}class Mv extends jt{static MODEL_CLASS_MAPPINGS=[q0]}class bv extends jt{static MODEL_CLASS_MAPPINGS=[s_]}class yv extends jt{static MODEL_CLASS_MAPPINGS=[n_]}class vv extends jt{static MODEL_CLASS_MAPPINGS=[o_]}class xv extends jt{static MODEL_CLASS_MAPPINGS=[i_]}class Tv extends jt{static MODEL_CLASS_MAPPINGS=[a_]}class Ev extends jt{static MODEL_CLASS_MAPPINGS=[l_]}class Pv extends jt{static MODEL_CLASS_MAPPINGS=[Gh]}class Cv extends jt{static MODEL_CLASS_MAPPINGS=[Kh]}class Sv extends fe{constructor({logits:w,past_key_values:R,encoder_outputs:oe,decoder_attentions:pe=null,cross_attentions:_e=null}){super(),this.logits=w,this.past_key_values=R,this.encoder_outputs=oe,this.decoder_attentions=pe,this.cross_attentions=_e}}class Mt extends fe{constructor({logits:w,...R}){super(),this.logits=w;const oe=Object.values(R);oe.length>0&&(this.attentions=oe)}}class d_ extends fe{constructor({logits:w,embeddings:R}){super(),this.logits=w,this.embeddings=R}}class Er extends fe{constructor({logits:w}){super(),this.logits=w}}class Cr extends fe{constructor({logits:w}){super(),this.logits=w}}class Fr extends fe{constructor({start_logits:w,end_logits:R}){super(),this.start_logits=w,this.end_logits=R}}class hn extends fe{constructor({logits:w}){super(),this.logits=w}}class $v extends fe{constructor({logits:w,past_key_values:R}){super(),this.logits=w,this.past_key_values=R}}class p_ extends fe{constructor({alphas:w}){super(),this.alphas=w}}class m_ extends fe{constructor({waveform:w,spectrogram:R}){super(),this.waveform=w,this.spectrogram=R}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i);const l=this.config.sampling_rate,c=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=c,this.window=(0,n.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(i,l){return(0,n.spectrogram)(i,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:l,transpose:!0})}async _call(i){(0,s.validate_audio_inputs)(i,"ASTFeatureExtractor");const l=await this._extract_fbank_features(i,this.config.max_length);if(this.config.do_normalize){const c=this.std*2,p=l.data;for(let d=0;d<p.length;++d)p[d]=(p[d]-this.mean)/c}return{input_values:l.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoFeatureExtractor:()=>a});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js");t("./src/base/feature_extraction_utils.js");var o=t("./src/models/feature_extractors.js");class a{static async from_pretrained(l,c={}){const p=await(0,n.getModelJSON)(l,s.FEATURE_EXTRACTOR_NAME,!0,c),d=p.feature_extractor_type,u=o[d];if(!u)throw new Error(`Unknown feature_extractor_type: '${d}'. Please report this at ${s.GITHUB_ISSUE_URL}.`);return new u(p)}}},"./src/models/auto/image_processing_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoImageProcessor:()=>i});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),o=t("./src/base/image_processors_utils.js"),a=t("./src/models/image_processors.js");class i{static async from_pretrained(c,p={}){const d=await(0,n.getModelJSON)(c,s.IMAGE_PROCESSOR_NAME,!0,p),u=d.image_processor_type??d.feature_extractor_type;let f=a[u?.replace(/Fast$/,"")];return f||(u!==void 0&&console.warn(`Image processor type '${u}' not found, assuming base ImageProcessor. Please report this at ${s.GITHUB_ISSUE_URL}.`),f=o.ImageProcessor),new f(d)}}},"./src/models/auto/processing_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoProcessor:()=>c});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),o=t("./src/base/processing_utils.js"),a=t("./src/models/processors.js"),i=t("./src/models/image_processors.js"),l=t("./src/models/feature_extractors.js");class c{static async from_pretrained(d,u={}){const f=await(0,n.getModelJSON)(d,s.IMAGE_PROCESSOR_NAME,!0,u),{image_processor_type:_,feature_extractor_type:v,processor_class:I}=f;if(I&&a[I])return a[I].from_pretrained(d,u);if(!_&&!v)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const b={};if(_){const $=i[_.replace(/Fast$/,"")];if(!$)throw new Error(`Unknown image_processor_type: '${_}'.`);b.image_processor=new $(f)}if(v){const $=i[v];if($)b.image_processor=new $(f);else{const y=l[v];if(!y)throw new Error(`Unknown feature_extractor_type: '${v}'.`);b.feature_extractor=new y(f)}}const M={};return new o.Processor(M,b,null)}}},"./src/models/beit/image_processing_beit.js":(e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(e,r,t)=>{t.r(r),t.d(r,{BitImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(e,r,t)=>{t.r(r),t.d(r,{ChineseCLIPFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(e,r,t)=>{t.r(r),t.d(r,{ClapFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i),this.mel_filters=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(i,l,c,p){let d;const u=i.length-l;if(u>0)if(c==="rand_trunc"){const f=Math.floor(Math.random()*(u+1));i=i.subarray(f,f+l),d=await this._extract_fbank_features(i,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${c}" not implemented`);else{if(u<0){let f=new Float64Array(l);if(f.set(i),p==="repeat")for(let _=i.length;_<l;_+=i.length)f.set(i.subarray(0,Math.min(i.length,l-_)),_);else if(p==="repeatpad")for(let _=i.length;_<-u;_+=i.length)f.set(i,_);i=f}if(c==="fusion")throw new Error(`Truncation strategy "${c}" not implemented`);d=await this._extract_fbank_features(i,this.mel_filters_slaney,this.config.nb_max_samples)}return d.unsqueeze_(0)}async _extract_fbank_features(i,l,c=null){return(0,n.spectrogram)(i,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:l,log_mel:"dB",max_num_frames:c,do_pad:!1,transpose:!0})}async _call(i,{max_length:l=null}={}){return(0,s.validate_audio_inputs)(i,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(i,l??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(e,r,t)=>{t.r(r),t.d(r,{CLIPFeatureExtractor:()=>o,CLIPImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/convnext/image_processing_convnext.js":(e,r,t)=>{t.r(r),t.d(r,{ConvNextFeatureExtractor:()=>o,ConvNextImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(i){super(i),this.crop_pct=this.config.crop_pct??224/256}async resize(i){const l=this.size?.shortest_edge;if(l===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(l<384){const c=Math.floor(l/this.crop_pct),[p,d]=this.get_resize_output_image_size(i,{shortest_edge:c});i=await i.resize(p,d,{resample:this.resample}),i=await i.center_crop(l,l)}else i=await i.resize(l,l,{resample:this.resample});return i}}class o extends n{}},"./src/models/dac/feature_extraction_dac.js":(e,r,t)=>{t.r(r),t.d(r,{DacFeatureExtractor:()=>n});var s=t("./src/models/encodec/feature_extraction_encodec.js");class n extends s.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(e,r,t)=>{t.r(r),t.d(r,{DeiTFeatureExtractor:()=>o,DeiTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/detr/image_processing_detr.js":(e,r,t)=>{t.r(r),t.d(r,{DetrFeatureExtractor:()=>a,DetrImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(l){const c=await super._call(l),p=[c.pixel_values.dims[0],64,64],d=(0,n.full)(p,1n);return{...c,pixel_mask:d}}post_process_object_detection(...l){return(0,s.post_process_object_detection)(...l)}post_process_panoptic_segmentation(...l){return(0,s.post_process_panoptic_segmentation)(...l)}post_process_instance_segmentation(...l){return(0,s.post_process_instance_segmentation)(...l)}}class a extends o{}},"./src/models/donut/image_processing_donut.js":(e,r,t)=>{t.r(r),t.d(r,{DonutFeatureExtractor:()=>o,DonutImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{pad_image(i,l,c,p={}){const[d,u,f]=l;let _=this.image_mean;Array.isArray(this.image_mean)||(_=new Array(f).fill(_));let v=this.image_std;Array.isArray(v)||(v=new Array(f).fill(_));const I=_.map((b,M)=>-b/v[M]);return super.pad_image(i,l,c,{center:!0,constant_values:I,...p})}}class o extends n{}},"./src/models/dpt/image_processing_dpt.js":(e,r,t)=>{t.r(r),t.d(r,{DPTFeatureExtractor:()=>o,DPTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/efficientnet/image_processing_efficientnet.js":(e,r,t)=>{t.r(r),t.d(r,{EfficientNetImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){super(a),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(i=>i*i))}}},"./src/models/encodec/feature_extraction_encodec.js":(e,r,t)=>{t.r(r),t.d(r,{EncodecFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{async _call(i){(0,s.validate_audio_inputs)(i,"EncodecFeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));const l=this.config.feature_size;if(i.length%l!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${l}).`);const c=[1,l,i.length/l];return{input_values:new n.Tensor("float32",i,c)}}}},"./src/models/feature_extractors.js":(e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>s.ASTFeatureExtractor,ClapFeatureExtractor:()=>o.ClapFeatureExtractor,DacFeatureExtractor:()=>a.DacFeatureExtractor,EncodecFeatureExtractor:()=>n.EncodecFeatureExtractor,Gemma3nAudioFeatureExtractor:()=>i.Gemma3nAudioFeatureExtractor,ImageFeatureExtractor:()=>I.ImageProcessor,MoonshineFeatureExtractor:()=>l.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>c.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>p.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>d.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>u.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>f.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>_.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>v.WhisperFeatureExtractor});var s=t("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),n=t("./src/models/encodec/feature_extraction_encodec.js"),o=t("./src/models/clap/feature_extraction_clap.js"),a=t("./src/models/dac/feature_extraction_dac.js"),i=t("./src/models/gemma3n/feature_extraction_gemma3n.js"),l=t("./src/models/moonshine/feature_extraction_moonshine.js"),c=t("./src/models/pyannote/feature_extraction_pyannote.js"),p=t("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),d=t("./src/models/snac/feature_extraction_snac.js"),u=t("./src/models/speecht5/feature_extraction_speecht5.js"),f=t("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),_=t("./src/models/wespeaker/feature_extraction_wespeaker.js"),v=t("./src/models/whisper/feature_extraction_whisper.js"),I=t("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;constructor(l,c,p){super(l,c,p);const{tasks_answer_post_processing_type:d,task_prompts_without_inputs:u,task_prompts_with_input:f}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(d??{})),this.task_prompts_without_inputs=new Map(Object.entries(u??{})),this.task_prompts_with_input=new Map(Object.entries(f??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(l){typeof l=="string"&&(l=[l]);const c=[];for(const p of l)if(this.task_prompts_without_inputs.has(p))c.push(this.task_prompts_without_inputs.get(p));else{for(const[d,u]of this.task_prompts_with_input)if(p.includes(d)){c.push(u.replaceAll("{input}",p).replaceAll(d,""));break}c.length!==l.length&&c.push(p)}return c}post_process_generation(l,c,p){const d=this.tasks_answer_post_processing_type.get(c)??"pure_text";l=l.replaceAll("<s>","").replaceAll("</s>","");let u;switch(d){case"pure_text":u=l;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const f=d==="ocr"?"quad_boxes":"bboxes",_=l.matchAll(this.regexes[f]),v=[],I=[];for(const[b,M,...$]of _)v.push(M?M.trim():v.at(-1)??""),I.push($.map((y,T)=>(Number(y)+.5)/this.size_per_bin*p[T%2]));u={labels:v,[f]:I};break;default:throw new Error(`Task "${c}" (of type "${d}") not yet implemented.`)}return{[c]:u}}async _call(l,c=null,p={}){if(!l&&!c)throw new Error("Either text or images must be provided");const d=await this.image_processor(l,p),u=c?this.tokenizer(this.construct_prompts(c),p):{};return{...d,...u}}}},"./src/models/gemma3n/feature_extraction_gemma3n.js":(e,r,t)=>{t.r(r),t.d(r,{Gemma3nAudioFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/audio.js");class a extends s.FeatureExtractor{constructor(l){super(l);const{fft_length:c,feature_size:p,min_frequency:d,max_frequency:u,sampling_rate:f,frame_length:_}=this.config,v=(0,o.mel_filter_bank)(Math.floor(1+c/2),p,d,u,f,null,"htk",!1);this.mel_filters=v,this.window=(0,o.window_function)(_,"hann")}async _extract_fbank_features(l,c){return(0,o.spectrogram)(l,this.window,this.config.frame_length,this.config.hop_length,{fft_length:this.config.fft_length,center:!1,onesided:!0,preemphasis:this.config.preemphasis,preemphasis_htk_flavor:this.config.preemphasis_htk_flavor,mel_filters:this.mel_filters,log_mel:"log",mel_floor:this.config.mel_floor,remove_dc_offset:!1,transpose:!0})}async _call(l,{max_length:c=48e4,truncation:p=!0,padding:d=!0,pad_to_multiple_of:u=128}={}){if((0,s.validate_audio_inputs)(l,"Gemma3nAudioFeatureExtractor"),p&&l.length>c&&(l=l.slice(0,c)),d&&l.length%u!==0){const v=u-l.length%u,I=new Float64Array(l.length+v);I.set(l),this.config.padding_value!==0&&I.fill(this.config.padding_value,l.length),l=I}const f=await this._extract_fbank_features(l,this.config.max_length),_=(0,n.full)([1,f.dims[0]],!0);return{input_features:f.unsqueeze_(0),input_features_mask:_}}}},"./src/models/gemma3n/processing_gemma3n.js":(e,r,t)=>{t.r(r),t.d(r,{Gemma3nProcessor:()=>i});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/models/auto/feature_extraction_auto.js"),a=t("./src/tokenizers.js");t("./src/utils/image.js"),t("./src/utils/audio.js");class i extends s.Processor{static image_processor_class=n.AutoImageProcessor;static feature_extractor_class=o.AutoFeatureExtractor;static tokenizer_class=a.AutoTokenizer;static uses_processor_config=!0;static uses_chat_template_file=!0;constructor(c,p,d){super(c,p,d),this.audio_seq_length=this.config.audio_seq_length,this.image_seq_length=this.config.image_seq_length;const{audio_token_id:u,boa_token:f,audio_token:_,eoa_token:v,image_token_id:I,boi_token:b,image_token:M,eoi_token:$}=this.tokenizer.config;this.audio_token_id=u,this.boa_token=f,this.audio_token=_;const y=_.repeat(this.audio_seq_length);this.full_audio_sequence=`

${f}${y}${v}

`,this.image_token_id=I,this.boi_token=b,this.image_token=M;const T=M.repeat(this.image_seq_length);this.full_image_sequence=`

${b}${T}${$}

`}async _call(c,p=null,d=null,u={}){typeof c=="string"&&(c=[c]);let f;d&&(f=await this.feature_extractor(d,u),c=c.map(I=>I.replaceAll(this.audio_token,this.full_audio_sequence)));let _;return p&&(_=await this.image_processor(p,u),c=c.map(I=>I.replaceAll(this.image_token,this.full_image_sequence))),{...this.tokenizer(c,u),..._,...f}}}},"./src/models/glpn/image_processing_glpn.js":(e,r,t)=>{t.r(r),t.d(r,{GLPNFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(e,r,t)=>{t.r(r),t.d(r,{GroundingDinoImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i){const l=await super._call(i),c=l.pixel_values.dims,p=(0,n.ones)([c[0],c[2],c[3]]);return{...l,pixel_mask:p}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(e,r,t)=>{t.r(r),t.d(r,{GroundingDinoProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/base/image_processors_utils.js");function i(c,p){const u=c.dims.at(-1)-1,f=c.tolist();f.fill(!1,0,1),f.fill(!1,u);const _=p.tolist();return f.map((v,I)=>v?I:null).filter(v=>v!==null).map(v=>_[v])}class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(p,d,u={}){const f=p?await this.image_processor(p,u):{};return{...d?this.tokenizer(d,u):{},...f}}post_process_grounded_object_detection(p,d,{box_threshold:u=.25,text_threshold:f=.25,target_sizes:_=null}={}){const{logits:v,pred_boxes:I}=p,b=v.dims[0];if(_!==null&&_.length!==b)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const M=v.dims.at(1),$=v.sigmoid(),y=$.max(-1).tolist(),T=I.tolist().map(x=>x.map(S=>(0,a.center_to_corners_format)(S))),E=[];for(let x=0;x<b;++x){const S=_!==null?_[x]:null;S!==null&&(T[x]=T[x].map(D=>D.map((Z,Q)=>Z*S[(Q+1)%2])));const z=y[x],O=[],K=[],H=[];for(let D=0;D<M;++D){const Z=z[D];if(Z<=u)continue;const Q=T[x][D],Y=$[x][D];O.push(Z),H.push(Q);const re=i(Y.gt(f),d[x]);K.push(re)}E.push({scores:O,boxes:H,labels:this.batch_decode(K)})}return E}}},"./src/models/idefics3/image_processing_idefics3.js":(e,r,t)=>{t.r(r),t.d(r,{Idefics3ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{constructor(i){super(i),this.do_image_splitting=i.do_image_splitting??!0,this.max_image_size=i.max_image_size}get_resize_for_vision_encoder(i,l){let[c,p]=i.dims.slice(-2);const d=p/c;return p>=c?(p=Math.ceil(p/l)*l,c=Math.floor(p/d),c=Math.ceil(c/l)*l):(c=Math.ceil(c/l)*l,p=Math.floor(c*d),p=Math.ceil(p/l)*l),{height:c,width:p}}async _call(i,{do_image_splitting:l=null,return_row_col_info:c=!1}={}){let p;if(!Array.isArray(i))p=[[i]];else{if(i.length===0||!i[0])throw new Error("No images provided.");Array.isArray(i[0])?p=i:p=[i]}let d=[],u=[],f=[];const _=[],v=[];for(const x of p){let S=await Promise.all(x.map(K=>this.preprocess(K)));_.push(...S.map(K=>K.original_size)),v.push(...S.map(K=>K.reshaped_input_size)),S.forEach(K=>K.pixel_values.unsqueeze_(0));const{longest_edge:z}=this.max_image_size;let O;if(l??this.do_image_splitting){let K=new Array(S.length),H=new Array(S.length);O=await Promise.all(S.map(async(D,Z)=>{const Q=this.get_resize_for_vision_encoder(D.pixel_values,z),Y=await(0,n.interpolate_4d)(D.pixel_values,{size:[Q.height,Q.width]}),{frames:re,num_splits_h:te,num_splits_w:ce}=await this.split_image(Y,this.max_image_size);return K[Z]=te,H[Z]=ce,(0,n.cat)(re,0)})),u.push(K),f.push(H)}else{const K=[z,z];O=await Promise.all(S.map(H=>(0,n.interpolate_4d)(H.pixel_values,{size:K}))),u.push(new Array(S.length).fill(0)),f.push(new Array(S.length).fill(0))}d.push((0,n.cat)(O,0))}const I=d.length,[b,M,$,y]=d[0].dims;let T,E;if(I===1)T=d[0].unsqueeze_(0),E=(0,n.full)([I,b,$,y],!0);else{const x=Math.max(...d.map(O=>O.dims.at(0)));E=(0,n.full)([I,x,$,y],!0);const S=E.data,z=x*$*y;for(let O=0;O<I;++O){const K=d[O].dims[0];if(K<x){d[O]=(0,n.cat)([d[O],(0,n.full)([x-K,M,$,y],0)],0);const H=O*z+K*$*y,D=(O+1)*z;S.fill(!1,H,D)}}T=(0,n.stack)(d,0)}return{pixel_values:T,pixel_attention_mask:E,original_sizes:_,reshaped_input_sizes:v,...c?{rows:u,cols:f}:{}}}async split_image(i,{longest_edge:l}){const c=l,p=l,d=[],[u,f]=i.dims.slice(-2);let _=0,v=0;if(u>c||f>p){_=Math.ceil(u/c),v=Math.ceil(f/p);const I=Math.ceil(u/_),b=Math.ceil(f/v);for(let y=0;y<_;++y)for(let T=0;T<v;++T){let E,x,S,z;y===_-1?(x=u-I,z=u):(x=y*I,z=(y+1)*I),T===v-1?(E=f-b,S=f):(E=T*b,S=(T+1)*b);const O=[x,E],K=[z,S],H=await(0,n.slice)(i,O,K,[2,3]);d.push(H)}const M=c,$=p;(u!==M||f!==$)&&(i=await(0,n.interpolate_4d)(i,{size:[M,$]}))}return d.push(i),{frames:d,num_splits_h:_,num_splits_w:v}}}},"./src/models/idefics3/processing_idefics3.js":(e,r,t)=>{t.r(r),t.d(r,{Idefics3Processor:()=>p});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");var a=t("./src/utils/core.js");function i(d,u,f,_,v,I){let b="";for(let M=0;M<u;++M){for(let $=0;$<f;++$)b+=_+`<row_${M+1}_col_${$+1}>`+v.repeat(d);b+=`
`}return b+=`
${_}${I}`+v.repeat(d)+`${_}`,b}function l(d,u,f,_){return`${u}${_}`+f.repeat(d)+`${u}`}function c(d,u,f,_,v,I){return d===0&&u===0?l(f,_,v,I):i(f,d,u,_,v,I)}class p extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(u,f=null,_={}){_.return_row_col_info??=!0;let v;f&&(v=await this.image_processor(f,_)),Array.isArray(u)||(u=[u]);const I=v.rows??[new Array(u.length).fill(0)],b=v.cols??[new Array(u.length).fill(0)],M=this.config.image_seq_len,$=[],y=[];for(let E=0;E<u.length;++E){const x=u[E],S=I[E],z=b[E];$.push((0,a.count)(x,this.image_token));const O=S.map((D,Z)=>c(D,z[Z],M,this.fake_image_token,this.image_token,this.global_img_token)),K=x.split(this.image_token);if(K.length===0)throw new Error("The image token should be present in the text.");let H=K[0];for(let D=0;D<O.length;++D)H+=O[D]+K[D+1];y.push(H)}return{...this.tokenizer(y),...v}}}},"./src/models/image_processors.js":(e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>s.BeitFeatureExtractor,BitImageProcessor:()=>n.BitImageProcessor,CLIPFeatureExtractor:()=>a.CLIPFeatureExtractor,CLIPImageProcessor:()=>a.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>o.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>i.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>i.ConvNextImageProcessor,DPTFeatureExtractor:()=>d.DPTFeatureExtractor,DPTImageProcessor:()=>d.DPTImageProcessor,DeiTFeatureExtractor:()=>l.DeiTFeatureExtractor,DeiTImageProcessor:()=>l.DeiTImageProcessor,DetrFeatureExtractor:()=>c.DetrFeatureExtractor,DetrImageProcessor:()=>c.DetrImageProcessor,DonutFeatureExtractor:()=>p.DonutFeatureExtractor,DonutImageProcessor:()=>p.DonutImageProcessor,EfficientNetImageProcessor:()=>u.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>f.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>_.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>v.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>b.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>M.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>$.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>y.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>y.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>T.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>T.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>E.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>E.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>x.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>x.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>S.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>S.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>z.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>z.MobileViTImageProcessor,NougatImageProcessor:()=>O.NougatImageProcessor,OwlViTFeatureExtractor:()=>H.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>H.OwlViTImageProcessor,Owlv2ImageProcessor:()=>K.Owlv2ImageProcessor,Phi3VImageProcessor:()=>D.Phi3VImageProcessor,PvtImageProcessor:()=>Z.PvtImageProcessor,Qwen2VLImageProcessor:()=>Q.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>Y.RTDetrImageProcessor,SamImageProcessor:()=>re.SamImageProcessor,SegformerFeatureExtractor:()=>te.SegformerFeatureExtractor,SegformerImageProcessor:()=>te.SegformerImageProcessor,SiglipImageProcessor:()=>ce.SiglipImageProcessor,SmolVLMImageProcessor:()=>ue.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>B.Swin2SRImageProcessor,VLMImageProcessor:()=>I.VLMImageProcessor,ViTFeatureExtractor:()=>F.ViTFeatureExtractor,ViTImageProcessor:()=>F.ViTImageProcessor,VitMatteImageProcessor:()=>G.VitMatteImageProcessor,VitPoseImageProcessor:()=>j.VitPoseImageProcessor,YolosFeatureExtractor:()=>ae.YolosFeatureExtractor,YolosImageProcessor:()=>ae.YolosImageProcessor});var s=t("./src/models/beit/image_processing_beit.js"),n=t("./src/models/bit/image_processing_bit.js"),o=t("./src/models/chinese_clip/image_processing_chinese_clip.js"),a=t("./src/models/clip/image_processing_clip.js"),i=t("./src/models/convnext/image_processing_convnext.js"),l=t("./src/models/deit/image_processing_deit.js"),c=t("./src/models/detr/image_processing_detr.js"),p=t("./src/models/donut/image_processing_donut.js"),d=t("./src/models/dpt/image_processing_dpt.js"),u=t("./src/models/efficientnet/image_processing_efficientnet.js"),f=t("./src/models/glpn/image_processing_glpn.js"),_=t("./src/models/grounding_dino/image_processing_grounding_dino.js"),v=t("./src/models/idefics3/image_processing_idefics3.js"),I=t("./src/models/janus/image_processing_janus.js"),b=t("./src/models/jina_clip/image_processing_jina_clip.js"),M=t("./src/models/llava_onevision/image_processing_llava_onevision.js"),$=t("./src/models/mask2former/image_processing_mask2former.js"),y=t("./src/models/maskformer/image_processing_maskformer.js"),T=t("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),E=t("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),x=t("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),S=t("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),z=t("./src/models/mobilevit/image_processing_mobilevit.js"),O=t("./src/models/nougat/image_processing_nougat.js"),K=t("./src/models/owlv2/image_processing_owlv2.js"),H=t("./src/models/owlvit/image_processing_owlvit.js"),D=t("./src/models/phi3_v/image_processing_phi3_v.js"),Z=t("./src/models/pvt/image_processing_pvt.js"),Q=t("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),Y=t("./src/models/rt_detr/image_processing_rt_detr.js"),re=t("./src/models/sam/image_processing_sam.js"),te=t("./src/models/segformer/image_processing_segformer.js"),ce=t("./src/models/siglip/image_processing_siglip.js"),ue=t("./src/models/smolvlm/image_processing_smolvlm.js"),B=t("./src/models/swin2sr/image_processing_swin2sr.js"),F=t("./src/models/vit/image_processing_vit.js"),G=t("./src/models/vitmatte/image_processing_vitmatte.js"),j=t("./src/models/vitpose/image_processing_vitpose.js"),ae=t("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(e,r,t)=>{t.r(r),t.d(r,{VLMImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){super({do_pad:!0,pad_size:{width:a.image_size,height:a.image_size},...a}),this.constant_values=this.config.background_color.map(i=>i*this.rescale_factor)}pad_image(a,i,l,c){return super.pad_image(a,i,l,{constant_values:this.constant_values,center:!0,...c})}}},"./src/models/janus/processing_janus.js":(e,r,t)=>{t.r(r),t.d(r,{VLChatProcessor:()=>c});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/utils/core.js"),i=t("./src/utils/tensor.js"),l=t("./src/utils/image.js");class c extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;static uses_processor_config=!0;constructor(d,u,f){super(d,u,f),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(d,{images:u=null,chat_template:f="default"}={}){u?Array.isArray(u)||(u=[u]):u=await Promise.all(d.filter(O=>O.images).flatMap(O=>O.images).map(O=>l.RawImage.read(O)));const _=this.tokenizer,v=_.apply_chat_template(d,{tokenize:!1,add_generation_prompt:!0,chat_template:f}),I=O=>_.encode(O,{add_special_tokens:!1}),b=v.split(this.image_tag),M=b.length-1;if(u.length!==M)throw new Error(`Number of images provided (${u.length}) does not match number of "${this.image_tag}" image tags (${M})`);const[$,y,T]=_.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let E=I(b[0]),x=new Array(E.length).fill(!1);for(let O=1;O<b.length;++O){const K=new Array(this.num_image_tokens).fill($),H=I(b[O]);E=(0,a.mergeArrays)(E,[y],K,[T],H);const D=new Array(this.num_image_tokens).fill(!0);x=(0,a.mergeArrays)(x,[!1],D,[!1],new Array(H.length).fill(!1))}const S=[1,E.length],z={input_ids:new i.Tensor("int64",E,S),attention_mask:new i.Tensor("int64",new Array(E.length).fill(1),S),images_seq_mask:new i.Tensor("bool",x,S),images_emb_mask:new i.Tensor("bool",new Array(M*this.num_image_tokens).fill(!0),[1,M,this.num_image_tokens])};if(u&&u.length>0){const O=await this.image_processor(u);return O.pixel_values.unsqueeze_(0),{...z,...O}}return z}}},"./src/models/jina_clip/image_processing_jina_clip.js":(e,r,t)=>{t.r(r),t.d(r,{JinaCLIPImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){const{resize_mode:i,fill_color:l,interpolation:c,size:p,...d}=a,u=i==="squash"?{width:p,height:p}:i==="shortest"?{shortest_edge:p}:{longest_edge:p},f=c==="bicubic"?3:2;super({...d,size:u,resample:f,do_center_crop:!0,crop_size:p,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(e,r,t)=>{t.r(r),t.d(r,{JinaCLIPProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(l=null,c=null,p={}){if(!l&&!c)throw new Error("Either text or images must be provided");const d=l?this.tokenizer(l,p):{},u=c?await this.image_processor(c,p):{};return{...d,...u}}}},"./src/models/llava/processing_llava.js":(e,r,t)=>{t.r(r),t.d(r,{LlavaProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;static uses_processor_config=!0;async _call(l,c=null,p={}){const d=await this.image_processor(l,p);if(c){const[f,_]=d.pixel_values.dims.slice(-2),{image_token:v,patch_size:I,num_additional_image_tokens:b}=this.config,M=Math.floor(f/I)*Math.floor(_/I)+b;c=structuredClone(c),Array.isArray(c)||(c=[c]);for(let $=0;$<c.length;++$)c[$]=c[$].replace(v,v.repeat(M))}const u=c?this.tokenizer(c,p):{};return{...d,...u}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(e,r,t)=>{t.r(r),t.d(r,{LlavaOnevisionImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(e,r,t)=>{t.r(r),t.d(r,{Mask2FormerImageProcessor:()=>n});var s=t("./src/models/maskformer/image_processing_maskformer.js");class n extends s.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(e,r,t)=>{t.r(r),t.d(r,{MaskFormerFeatureExtractor:()=>o,MaskFormerImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_panoptic_segmentation(...i){return(0,s.post_process_panoptic_segmentation)(...i)}post_process_instance_segmentation(...i){return(0,s.post_process_instance_segmentation)(...i)}}class o extends n{}},"./src/models/mgp_str/processing_mgp_str.js":(e,r,t)=>{t.r(r),t.d(r,{MgpstrProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/utils/maths.js");const i={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(p,d){if(!i.hasOwnProperty(d))throw new Error(`Format ${d} is not supported.`);const[u,f]=i[d],_=this[u].bind(this),[v,I]=p.dims,b=[],M=[],$=p.tolist();for(let T=0;T<v;++T){const E=$[T],x=[],S=[];for(let O=1;O<I;++O){const[K,H]=(0,a.max)((0,a.softmax)(E[O]));if(S.push(K),H==f)break;x.push(H)}const z=S.length>0?S.reduce((O,K)=>O*K,1):0;M.push(x),b.push(z)}return[_(M),b]}char_decode(p){return this.char_tokenizer.batch_decode(p).map(d=>d.replaceAll(" ",""))}bpe_decode(p){return this.bpe_tokenizer.batch_decode(p)}wp_decode(p){return this.wp_tokenizer.batch_decode(p).map(d=>d.replaceAll(" ",""))}batch_decode([p,d,u]){const[f,_]=this._decode_helper(p,"char"),[v,I]=this._decode_helper(d,"bpe"),[b,M]=this._decode_helper(u,"wp"),$=[],y=[];for(let T=0;T<f.length;++T){const[E,x]=(0,a.max)([_[T],I[T],M[T]]);$.push([f[T],v[T],b[T]][x]),y.push(E)}return{generated_text:$,scores:y,char_preds:f,bpe_preds:v,wp_preds:b}}static async from_pretrained(...p){const d=await super.from_pretrained(...p),u=await o.AutoTokenizer.from_pretrained("Xenova/gpt2"),f=await o.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return d.components={image_processor:d.image_processor,char_tokenizer:d.tokenizer,bpe_tokenizer:u,wp_tokenizer:f},d}async _call(p,d=null){const u=await this.image_processor(p);return d&&(u.labels=this.tokenizer(d).input_ids),u}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV1FeatureExtractor:()=>o,MobileNetV1ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV2FeatureExtractor:()=>o,MobileNetV2ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV3FeatureExtractor:()=>o,MobileNetV3ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV4FeatureExtractor:()=>o,MobileNetV4ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/mobilevit/image_processing_mobilevit.js":(e,r,t)=>{t.r(r),t.d(r,{MobileViTFeatureExtractor:()=>o,MobileViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/moonshine/feature_extraction_moonshine.js":(e,r,t)=>{t.r(r),t.d(r,{MoonshineFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{async _call(i){(0,s.validate_audio_inputs)(i,"MoonshineFeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));const l=[1,i.length];return{input_values:new n.Tensor("float32",i,l)}}}},"./src/models/moonshine/processing_moonshine.js":(e,r,t)=>{t.r(r),t.d(r,{MoonshineProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}},"./src/models/nougat/image_processing_nougat.js":(e,r,t)=>{t.r(r),t.d(r,{NougatImageProcessor:()=>n});var s=t("./src/models/donut/image_processing_donut.js");class n extends s.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(e,r,t)=>{t.r(r),t.d(r,{Owlv2ImageProcessor:()=>n});var s=t("./src/models/owlvit/image_processing_owlvit.js");class n extends s.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(e,r,t)=>{t.r(r),t.d(r,{OwlViTFeatureExtractor:()=>o,OwlViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...i){return(0,s.post_process_object_detection)(...i)}}class o extends n{}},"./src/models/owlvit/processing_owlvit.js":(e,r,t)=>{t.r(r),t.d(r,{OwlViTProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(e,r,t)=>{t.r(r),t.d(r,{PaliGemmaProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");const a="<image>";function i(c,p,d,u,f){return`${u.repeat(d*f)}${p}${c}
`}class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;static uses_processor_config=!1;async _call(p,d=null,u={}){d||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),d=""),Array.isArray(p)||(p=[p]),Array.isArray(d)||(d=[d]);const f=this.tokenizer.bos_token,_=this.image_processor.config.image_seq_length;let v;d.some(M=>M.includes(a))?v=d.map(M=>{const $=M.replaceAll(a,a.repeat(_)),y=$.lastIndexOf(a),T=y===-1?0:y+a.length;return $.slice(0,T)+f+$.slice(T)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),v=d.map(M=>i(M,f,_,a,p.length)));const I=this.tokenizer(v,u);return{...await this.image_processor(p,u),...I}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(e,r,t)=>{t.r(r),t.d(r,{Phi3VImageProcessor:()=>p});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");const o=336,a=[2,3],{ceil:i,floor:l,sqrt:c}=Math;class p extends s.ImageProcessor{constructor(u){super({...u,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=u.num_crops}calc_num_image_tokens_from_image_size(u,f){const{num_img_tokens:_}=this.config;return l((l(f/o)*l(u/o)+1)*_+1+(l(f/o)+1)*c(_))}get_resize_output_image_size(u,f){const _=this._num_crops,[v,I]=u.size;let b=v/I,M=1;for(;M*Math.ceil(M/b)<=_;)M+=1;M-=1;const $=Math.floor(M*336),y=Math.floor($/b);return[$,y]}pad_image(u,f,_,v={}){const[I,b]=f,M=o*i(I/o),$=o*i(b/o),y=[1,1,1].map((T,E)=>(T-this.image_mean[E])/this.image_std[E]);return super.pad_image(u,f,{width:$,height:M},{center:!0,constant_values:y,...v})}async _call(u,{num_crops:f=null}={}){if(this._num_crops=f??=this.config.num_crops,f<4||c(f)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(u)||(u=[u]);const _=u.length,v=await Promise.all(u.map(x=>this.preprocess(x))),I=v.map(x=>x.original_size),b=v.map(x=>x.reshaped_input_size),M=[];for(const{pixel_values:x}of v){x.unsqueeze_(0);const[S,z]=x.dims.slice(-2),O=await(0,n.interpolate_4d)(x,{size:[o,o],mode:"bicubic"});if(f>0){const K=[],H=c(f),D=l(z/H),Z=l(S/H);for(let Y=0;Y<H;++Y)for(let re=0;re<H;++re){let te,ce,ue,B;Y===H-1?(ce=S-Z,B=S):(ce=Y*Z,B=(Y+1)*Z),re===H-1?(te=z-D,ue=z):(te=re*D,ue=(re+1)*D);const F=[ce,te],G=[B,ue],j=await(0,n.slice)(x,F,G,a);K.push(j)}const Q=await(0,n.interpolate_4d)((0,n.cat)(K,0),{size:[o,o],mode:"bicubic"});M.push((0,n.cat)([O,Q],0))}else M.push(O)}const $=(0,n.stack)(M,0),y=b.map(x=>x.map(S=>o*i(S/o))),T=new n.Tensor("int64",y.flat(),[_,2]),E=y.map(([x,S])=>this.calc_num_image_tokens_from_image_size(S,x));return{pixel_values:$,original_sizes:I,reshaped_input_sizes:b,image_sizes:T,num_img_tokens:E}}}},"./src/models/phi3_v/processing_phi3_v.js":(e,r,t)=>{t.r(r),t.d(r,{Phi3VProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");const a="<|image|>",i=/<\|image_\d+\|>/g;class l extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;async _call(p,d=null,{padding:u=!0,truncation:f=!0,num_crops:_=null}={}){Array.isArray(p)||(p=[p]);let v,I;if(d){I=await this.image_processor(d,{num_crops:_});const{num_img_tokens:b}=I,M=p.map((y,T)=>y.split(i).join(a.repeat(b[T])));v=this.tokenizer(M,{padding:u,truncation:f});const $=this.tokenizer.model.convert_tokens_to_ids([a])[0];v.input_ids.map_(y=>y==$?-y:y)}else v=this.tokenizer(p);return{...v,...I}}}},"./src/models/processors.js":(e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>s.Florence2Processor,Gemma3nProcessor:()=>n.Gemma3nProcessor,GroundingDinoProcessor:()=>o.GroundingDinoProcessor,Idefics3Processor:()=>a.Idefics3Processor,JinaCLIPProcessor:()=>l.JinaCLIPProcessor,LlavaProcessor:()=>c.LlavaProcessor,MgpstrProcessor:()=>p.MgpstrProcessor,MoonshineProcessor:()=>d.MoonshineProcessor,OwlViTProcessor:()=>u.OwlViTProcessor,PaliGemmaProcessor:()=>_.PaliGemmaProcessor,Phi3VProcessor:()=>f.Phi3VProcessor,PyAnnoteProcessor:()=>v.PyAnnoteProcessor,Qwen2VLProcessor:()=>I.Qwen2VLProcessor,SamProcessor:()=>b.SamProcessor,SmolVLMProcessor:()=>M.SmolVLMProcessor,SpeechT5Processor:()=>$.SpeechT5Processor,UltravoxProcessor:()=>y.UltravoxProcessor,VLChatProcessor:()=>i.VLChatProcessor,VoxtralProcessor:()=>T.VoxtralProcessor,Wav2Vec2Processor:()=>E.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>x.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>S.WhisperProcessor});var s=t("./src/models/florence2/processing_florence2.js"),n=t("./src/models/gemma3n/processing_gemma3n.js"),o=t("./src/models/grounding_dino/processing_grounding_dino.js"),a=t("./src/models/idefics3/processing_idefics3.js"),i=t("./src/models/janus/processing_janus.js"),l=t("./src/models/jina_clip/processing_jina_clip.js"),c=t("./src/models/llava/processing_llava.js"),p=t("./src/models/mgp_str/processing_mgp_str.js"),d=t("./src/models/moonshine/processing_moonshine.js"),u=t("./src/models/owlvit/processing_owlvit.js"),f=t("./src/models/phi3_v/processing_phi3_v.js"),_=t("./src/models/paligemma/processing_paligemma.js"),v=t("./src/models/pyannote/processing_pyannote.js"),I=t("./src/models/qwen2_vl/processing_qwen2_vl.js"),b=t("./src/models/sam/processing_sam.js"),M=t("./src/models/smolvlm/processing_smolvlm.js"),$=t("./src/models/speecht5/processing_speecht5.js"),y=t("./src/models/ultravox/processing_ultravox.js"),T=t("./src/models/voxtral/processing_voxtral.js"),E=t("./src/models/wav2vec2/processing_wav2vec2.js"),x=t("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),S=t("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(e,r,t)=>{t.r(r),t.d(r,{PvtImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(e,r,t)=>{t.r(r),t.d(r,{PyAnnoteFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");class a extends s.FeatureExtractor{async _call(l){(0,s.validate_audio_inputs)(l,"PyAnnoteFeatureExtractor"),l instanceof Float64Array&&(l=new Float32Array(l));const c=[1,1,l.length];return{input_values:new n.Tensor("float32",l,c)}}samples_to_frames(l){return(l-this.config.offset)/this.config.step}post_process_speaker_diarization(l,c){const p=c/this.samples_to_frames(c)/this.config.sampling_rate,d=[];for(const u of l.tolist()){const f=[];let _=-1;for(let v=0;v<u.length;++v){const I=(0,o.softmax)(u[v]),[b,M]=(0,o.max)(I),[$,y]=[v,v+1];M!==_?(_=M,f.push({id:M,start:$,end:y,score:b})):(f.at(-1).end=y,f.at(-1).score+=b)}d.push(f.map(({id:v,start:I,end:b,score:M})=>({id:v,start:I*p,end:b*p,confidence:M/(b-I)})))}return d}}},"./src/models/pyannote/processing_pyannote.js":(e,r,t)=>{t.r(r),t.d(r,{PyAnnoteProcessor:()=>o});var s=t("./src/base/processing_utils.js"),n=t("./src/models/pyannote/feature_extraction_pyannote.js");class o extends s.Processor{static feature_extractor_class=n.PyAnnoteFeatureExtractor;async _call(i){return await this.feature_extractor(i)}post_process_speaker_diarization(...i){return this.feature_extractor.post_process_speaker_diarization(...i)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(e,r,t)=>{t.r(r),t.d(r,{Qwen2VLImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i,...l){const{pixel_values:c,original_sizes:p,reshaped_input_sizes:d}=await super._call(i,...l);let u=c;const{temporal_patch_size:f,merge_size:_,patch_size:v}=this.config;u.dims[0]===1&&(u=(0,n.cat)(Array.from({length:f},()=>u),0));const I=u.dims[0]/f,b=u.dims[1],M=Math.floor(u.dims[2]/v),$=Math.floor(u.dims[3]/v),y=u.view(I,f,b,Math.floor(M/_),_,v,Math.floor($/_),_,v).permute(0,3,6,4,7,2,1,5,8).view(I*M*$,b*f*v*v),T=new n.Tensor("int64",[I,M,$],[1,3]);return{pixel_values:y,image_grid_thw:T,original_sizes:p,reshaped_input_sizes:d}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(e,r,t)=>{t.r(r),t.d(r,{Qwen2VLProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");class a extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;async _call(l,c=null,...p){Array.isArray(l)||(l=[l]);let d,u;if(c&&(d=await this.image_processor(c),u=d.image_grid_thw),u){let _=this.image_processor.config.merge_size**2,v=0;const I=u.tolist();l=l.map(b=>{for(;b.includes("<|image_pad|>");){const M=Number(I[v++].reduce(($,y)=>$*y,1n));b=b.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(M/_)))}return b.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(l),...d}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(e,r,t)=>{t.r(r),t.d(r,{RTDetrImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...a){return(0,s.post_process_object_detection)(...a)}}},"./src/models/sam/image_processing_sam.js":(e,r,t)=>{t.r(r),t.d(r,{SamImageProcessor:()=>a});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/core.js"),o=t("./src/utils/tensor.js");class a extends s.ImageProcessor{reshape_input_points(l,c,p,d=!1){l=structuredClone(l);let u=(0,n.calculateDimensions)(l);if(u.length===3)d||(u=[1,...u]),l=[l];else if(u.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let f=0;f<l.length;++f){let _=c[f],v=p[f],I=[v[0]/_[0],v[1]/_[1]];for(let b=0;b<l[f].length;++b)for(let M=0;M<l[f][b].length;++M)for(let $=0;$<l[f][b][M].length;++$)l[f][b][M][$]*=I[$%2]}return new o.Tensor("float32",Float32Array.from(l.flat(1/0)),u)}add_input_labels(l,c){let p=(0,n.calculateDimensions)(l);if(p.length===2)p=[1,...p],l=[l];else if(p.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(p.some((d,u)=>d!==c.dims[u]))throw Error(`The first ${p.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new o.Tensor("int64",l.flat(1/0).map(BigInt),p)}async _call(l,{input_points:c=null,input_labels:p=null,input_boxes:d=null}={}){const u=await super._call(l);if(c&&(u.input_points=this.reshape_input_points(c,u.original_sizes,u.reshaped_input_sizes)),p){if(!u.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");u.input_labels=this.add_input_labels(p,u.input_points)}return d&&(u.input_boxes=this.reshape_input_points(d,u.original_sizes,u.reshaped_input_sizes,!0)),u}async post_process_masks(l,c,p,{mask_threshold:d=0,binarize:u=!0,pad_size:f=null}={}){const _=[];f=f??this.pad_size;const v=[f.height,f.width];for(let I=0;I<c.length;++I){const b=c[I],M=p[I];let $=await(0,o.interpolate_4d)(l[I],{mode:"bilinear",size:v});if($=$.slice(null,null,[0,M[0]],[0,M[1]]),$=await(0,o.interpolate_4d)($,{mode:"bilinear",size:b}),u){const y=$.data,T=new Uint8Array(y.length);for(let E=0;E<y.length;++E)y[E]>d&&(T[E]=1);$=new o.Tensor("bool",T,$.dims)}_.push($)}return _}generate_crop_boxes(l,c,{crop_n_layers:p=0,overlap_ratio:d=512/1500,points_per_crop:u=32,crop_n_points_downscale_factor:f=1}={}){}}},"./src/models/sam/processing_sam.js":(e,r,t)=>{t.r(r),t.d(r,{SamProcessor:()=>o});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js");class o extends s.Processor{static image_processor_class=n.AutoImageProcessor;async _call(...i){return await this.image_processor(...i)}post_process_masks(...i){return this.image_processor.post_process_masks(...i)}reshape_input_points(...i){return this.image_processor.reshape_input_points(...i)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(e,r,t)=>{t.r(r),t.d(r,{SeamlessM4TFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/audio.js");class a extends s.FeatureExtractor{constructor(l){super(l);const c=this.config.sampling_rate,p=(0,o.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(c/2),c,null,"kaldi",!0);this.mel_filters=p,this.window=(0,o.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(l,c){return l=l.map(p=>p*32768),(0,o.spectrogram)(l,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:c,transpose:!0})}async _call(l,{padding:c=!0,pad_to_multiple_of:p=2,do_normalize_per_mel_bins:d=!0,return_attention_mask:u=!0}={}){(0,s.validate_audio_inputs)(l,"SeamlessM4TFeatureExtractor");let f=await this._extract_fbank_features(l,this.config.max_length);if(d){const[T,E]=f.dims,x=f.data;for(let S=0;S<E;++S){let z=0;for(let D=0;D<T;++D)z+=x[D*E+S];const O=z/T;let K=0;for(let D=0;D<T;++D)K+=(x[D*E+S]-O)**2;K/=T-1;const H=Math.sqrt(K+1e-7);for(let D=0;D<T;++D){const Z=D*E+S;x[Z]=(x[Z]-O)/H}}}let _;if(c){const[T,E]=f.dims,x=f.data,S=T%p;if(S>0){const z=new Float32Array(E*(T+S));z.set(x),z.fill(this.config.padding_value,x.length);const O=T+S;f=new n.Tensor(f.type,z,[O,E]),u&&(_=new n.Tensor("int64",new BigInt64Array(O),[1,O]),_.data.fill(1n,0,T))}}const[v,I]=f.dims,b=this.config.stride;if(v%b!==0)throw new Error(`The number of frames (${v}) must be a multiple of the stride (${b}).`);const $=f.view(1,Math.floor(v/b),I*b),y={input_features:$};if(u){const T=$.dims[1],E=new BigInt64Array(T);if(_){const x=_.data;for(let S=1,z=0;S<v;S+=b,++z)E[z]=x[S]}else E.fill(1n);y.attention_mask=new n.Tensor("int64",E,[1,T])}return y}}},"./src/models/segformer/image_processing_segformer.js":(e,r,t)=>{t.r(r),t.d(r,{SegformerFeatureExtractor:()=>o,SegformerImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_semantic_segmentation(...i){return(0,s.post_process_semantic_segmentation)(...i)}}class o extends n{}},"./src/models/siglip/image_processing_siglip.js":(e,r,t)=>{t.r(r),t.d(r,{SiglipImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(e,r,t)=>{t.r(r),t.d(r,{SmolVLMImageProcessor:()=>s.Idefics3ImageProcessor});var s=t("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(e,r,t)=>{t.r(r),t.d(r,{SmolVLMProcessor:()=>s.Idefics3Processor});var s=t("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(e,r,t)=>{t.r(r),t.d(r,{SnacFeatureExtractor:()=>n});var s=t("./src/models/dac/feature_extraction_dac.js");class n extends s.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(e,r,t)=>{t.r(r),t.d(r,{SpeechT5FeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js");class n extends s.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(e,r,t)=>{t.r(r),t.d(r,{SpeechT5Processor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/tokenizers.js"),o=t("./src/models/auto/feature_extraction_auto.js");class a extends s.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=o.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(e,r,t)=>{t.r(r),t.d(r,{Swin2SRImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{pad_image(a,i,l,c={}){const[p,d,u]=i;return super.pad_image(a,i,{width:d+(l-d%l)%l,height:p+(l-p%l)%l},{mode:"symmetric",center:!1,constant_values:-1,...c})}}},"./src/models/ultravox/processing_ultravox.js":(e,r,t)=>{t.r(r),t.d(r,{UltravoxProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;static uses_processor_config=!0;async _call(l,c=null,p={}){if(Array.isArray(l))throw new Error("Batched inputs are not supported yet.");let d={};if(c){const f=c.length,{input_features:_}=await this.feature_extractor(c,{...p,max_length:f}),v=Math.round(f/this.config.encoder_ds_factor+1e-4),I=1+Math.ceil(v/this.config.stack_factor);d.audio_token_len=[I],d.audio_values=_;const b=this.config.audio_placeholder;if(!l.includes(b))throw new Error(`The input text does not contain the image token ${b}.`);l=l.replaceAll(b,b.repeat(I))}return{...this.tokenizer(l,{add_special_tokens:!1,...p}),...d}}}},"./src/models/vit/image_processing_vit.js":(e,r,t)=>{t.r(r),t.d(r,{ViTFeatureExtractor:()=>o,ViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}},"./src/models/vitmatte/image_processing_vitmatte.js":(e,r,t)=>{t.r(r),t.d(r,{VitMatteImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i,l){Array.isArray(i)||(i=[i]),Array.isArray(l)||(l=[l]);const c=await Promise.all(i.map(u=>this.preprocess(u))),p=await Promise.all(l.map(u=>this.preprocess(u,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,n.stack)(c.map((u,f)=>(0,n.cat)([u.pixel_values,p[f].pixel_values],0)),0),original_sizes:c.map(u=>u.original_size),reshaped_input_sizes:c.map(u=>u.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(e,r,t)=>{t.r(r),t.d(r,{VitPoseImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_pose_estimation(a,i,{threshold:l=null}={}){const c=a.tolist(),[p,d,u,f]=a.dims,_=[];for(let v=0;v<p;++v){const I=c[v],b=i[v],M=[];for(let $=0;$<b.length;++$){const y=b[$],T=[],E=[],x=[],S=y.at(-2)/f,z=y.at(-1)/u;for(let O=0;O<I.length;++O){let[K,H]=[0,0],D=0,Z=-1/0;const Q=I[O];for(let re=0;re<Q.length;++re){const te=Q[re];for(let ce=0;ce<te.length;++ce){const ue=te[ce];D+=ue,Z=Math.max(Z,ue),K+=(ce+.5)*ue,H+=re*ue}}if(l!=null&&Z<l)continue;const Y=[S*K/D,z*H/D];T.push(Y),x.push(O),E.push(Z)}M.push({bbox:y,scores:E,labels:x,keypoints:T})}_.push(M)}return _}}},"./src/models/voxtral/processing_voxtral.js":(e,r,t)=>{t.r(r),t.d(r,{VoxtralProcessor:()=>d});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js"),a=t("./src/utils/tensor.js");const i="[AUDIO]",l="[BEGIN_AUDIO]",c=375;function p(u,f){const _=[];for(let v=0;v<u.length;v+=f)_.push(u.subarray(v,Math.min(v+f,u.length)));return _}class d extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;static uses_processor_config=!1;async _call(f,_=null,v={}){if(Array.isArray(f))throw new Error("Batched inputs are not supported yet.");const I={};if(_){if(!f.includes(i))throw new Error(`The input text does not contain the audio token ${i}.`);Array.isArray(_)||(_=[_]);const M=f.split(i),$=M.length-1;if($!==_.length)throw new Error(`The number of audio inputs (${_.length}) does not match the number of audio tokens in the text (${$}).`);const y=this.feature_extractor.config.n_samples,T=_.map(O=>p(O,y)),E=T.map(O=>O.length),x=T.flat(),S=(await Promise.all(x.map(O=>this.feature_extractor(O,v)))).map(O=>O.input_features);I.audio_values=S.length>1?(0,a.cat)(S,0):S[0];let z=M[0];for(let O=0;O<E.length;++O){z+=l;for(let K=0;K<E[O];++K)z+=i.repeat(c);z+=M[O+1]}f=z}return{...this.tokenizer(f,{add_special_tokens:!1,...v}),...I}}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2FeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{_zero_mean_unit_var_norm(i){const c=i.reduce((d,u)=>d+u,0)/i.length,p=i.reduce((d,u)=>d+(u-c)**2,0)/i.length;return i.map(d=>(d-c)/Math.sqrt(p+1e-7))}async _call(i){(0,s.validate_audio_inputs)(i,"Wav2Vec2FeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));let l=i;this.config.do_normalize&&(l=this._zero_mean_unit_var_norm(l));const c=[1,l.length];return{input_values:new n.Tensor("float32",l,c),attention_mask:new n.Tensor("int64",new BigInt64Array(l.length).fill(1n),c)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2Processor:()=>a});var s=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=s.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2ProcessorWithLM:()=>a});var s=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=s.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(e,r,t)=>{t.r(r),t.d(r,{WeSpeakerFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i);const l=this.config.sampling_rate,c=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=c,this.window=(0,n.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(i){return i=i.map(l=>l*32768),(0,n.spectrogram)(i,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(i){(0,s.validate_audio_inputs)(i,"WeSpeakerFeatureExtractor");const l=(await this._extract_fbank_features(i)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const c=l.mean(1).data,p=l.data,[d,u,f]=l.dims;for(let _=0;_<d;++_){const v=_*u*f,I=_*f;for(let b=0;b<u;++b){const M=v+b*f;for(let $=0;$<f;++$)p[M+$]-=c[I+$]}}}return{input_features:l}}}},"./src/models/whisper/common_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WHISPER_LANGUAGE_MAPPING:()=>n,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>o,whisper_language_to_code:()=>a});const s=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],n=new Map(s),o=new Map([...s.map(([i,l])=>[l,i]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function a(i){i=i.toLowerCase();let l=o.get(i);if(l===void 0){const c=i.match(/^<\|([a-z]{2})\|>$/);if(c&&(i=c[1]),n.has(i))l=i;else{const d=i.length===2?n.keys():n.values();throw new Error(`Language "${i}" is not supported. Must be one of: ${JSON.stringify(Array.from(d))}`)}}return l}},"./src/models/whisper/feature_extraction_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js"),o=t("./src/utils/maths.js");class a extends s.FeatureExtractor{constructor(l){super(l),this.config.mel_filters??=(0,n.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(l){const c=await(0,n.spectrogram)(l,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(l.length/this.config.hop_length),this.config.nb_max_frames)}),p=c.data,d=(0,o.max)(p)[0];for(let u=0;u<p.length;++u)p[u]=(Math.max(p[u],d-8)+4)/4;return c}async _call(l,{max_length:c=null}={}){(0,s.validate_audio_inputs)(l,"WhisperFeatureExtractor");let p;const d=c??this.config.n_samples;return l.length>d?(l.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),p=l.slice(0,d)):(p=new Float32Array(d),p.set(l)),{input_features:(await this._extract_fbank_features(p)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperGenerationConfig:()=>n});var s=t("./src/generation/configuration_utils.js");class n extends s.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}},"./src/models/yolos/image_processing_yolos.js":(e,r,t)=>{t.r(r),t.d(r,{YolosFeatureExtractor:()=>o,YolosImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...i){return(0,s.post_process_object_detection)(...i)}}class o extends n{}},"./src/ops/registry.js":(e,r,t)=>{t.r(r),t.d(r,{TensorOpRegistry:()=>l});var s=t("./src/backends/onnx.js"),n=t("./src/utils/tensor.js"),o=t("./src/env.js");const a=o.apis.IS_BROWSER_ENV||o.apis.IS_WEBWORKER_ENV,i=async(c,p,d)=>{const u=await(0,s.createInferenceSession)(new Uint8Array(c),p);let f=Promise.resolve();return async _=>{const v=(0,s.isONNXProxy)(),I=Object.fromEntries(Object.entries(_).map(([M,$])=>[M,(v?$.clone():$).ort_tensor])),b=await(f=a?f.then(()=>u.run(I)):u.run(I));return Array.isArray(d)?d.map(M=>new n.Tensor(b[M])):new n.Tensor(b[d])}};class l{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=i([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=i([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=i([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=i([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=i([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=i([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=i([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=i([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(e,r,t)=>{t.r(r),t.d(r,{AudioClassificationPipeline:()=>H,AutomaticSpeechRecognitionPipeline:()=>Z,BackgroundRemovalPipeline:()=>te,DepthEstimationPipeline:()=>ae,DocumentQuestionAnsweringPipeline:()=>F,FeatureExtractionPipeline:()=>O,FillMaskPipeline:()=>$,ImageClassificationPipeline:()=>Y,ImageFeatureExtractionPipeline:()=>K,ImageSegmentationPipeline:()=>re,ImageToImagePipeline:()=>j,ImageToTextPipeline:()=>Q,ObjectDetectionPipeline:()=>ue,Pipeline:()=>v,QuestionAnsweringPipeline:()=>M,SummarizationPipeline:()=>T,Text2TextGenerationPipeline:()=>y,TextClassificationPipeline:()=>I,TextGenerationPipeline:()=>S,TextToAudioPipeline:()=>G,TokenClassificationPipeline:()=>b,TranslationPipeline:()=>E,ZeroShotAudioClassificationPipeline:()=>D,ZeroShotClassificationPipeline:()=>z,ZeroShotImageClassificationPipeline:()=>ce,ZeroShotObjectDetectionPipeline:()=>B,pipeline:()=>Fe});var s=t("./src/tokenizers.js"),n=t("./src/models.js"),o=t("./src/models/auto/processing_auto.js");t("./src/base/processing_utils.js");var a=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),l=t("./src/utils/maths.js"),c=t("./src/utils/audio.js"),p=t("./src/utils/tensor.js"),d=t("./src/utils/image.js");async function u(xe){return Array.isArray(xe)||(xe=[xe]),await Promise.all(xe.map(q=>d.RawImage.read(q)))}async function f(xe,q){return Array.isArray(xe)||(xe=[xe]),await Promise.all(xe.map(de=>typeof de=="string"||de instanceof URL?(0,c.read_audio)(de,q):de instanceof Float64Array?new Float32Array(de):de))}function _(xe,q){q&&(xe=xe.map(ye=>ye|0));const[de,W,fe,ke]=xe;return{xmin:de,ymin:W,xmax:fe,ymax:ke}}class v extends a.Callable{constructor({task:q,model:de,tokenizer:W=null,processor:fe=null}){super(),this.task=q,this.model=de,this.tokenizer=W,this.processor=fe}async dispose(){await this.model.dispose()}}class I extends v{constructor(q){super(q)}async _call(q,{top_k:de=1}={}){const W=this.tokenizer(q,{padding:!0,truncation:!0}),fe=await this.model(W),ke=this.model.config.problem_type==="multi_label_classification"?Ee=>Ee.sigmoid():Ee=>new p.Tensor("float32",(0,l.softmax)(Ee.data),Ee.dims),ye=this.model.config.id2label,ge=[];for(const Ee of fe.logits){const we=ke(Ee),Ie=await(0,p.topk)(we,de),Oe=Ie[0].tolist(),be=Ie[1].tolist().map((st,Ne)=>({label:ye?ye[st]:`LABEL_${st}`,score:Oe[Ne]}));de===1?ge.push(...be):ge.push(be)}return Array.isArray(q)||de===1?ge:ge[0]}}class b extends v{constructor(q){super(q)}async _call(q,{ignore_labels:de=["O"]}={}){const W=Array.isArray(q),fe=this.tokenizer(W?q:[q],{padding:!0,truncation:!0}),ye=(await this.model(fe)).logits,ge=this.model.config.id2label,Ee=[];for(let we=0;we<ye.dims[0];++we){const Ie=fe.input_ids[we],Oe=ye[we],We=[];for(let be=0;be<Oe.dims[0];++be){const st=Oe[be],Ne=(0,l.max)(st.data)[1],je=ge?ge[Ne]:`LABEL_${Ne}`;if(de.includes(je))continue;const et=this.tokenizer.decode([Ie[be].item()],{skip_special_tokens:!0});if(et==="")continue;const qe=(0,l.softmax)(st.data);We.push({entity:je,score:qe[Ne],index:be,word:et})}Ee.push(We)}return W?Ee:Ee[0]}}class M extends v{constructor(q){super(q)}async _call(q,de,{top_k:W=1}={}){const fe=this.tokenizer(q,{text_pair:de,padding:!0,truncation:!0}),{start_logits:ke,end_logits:ye}=await this.model(fe),ge=fe.input_ids.tolist(),Ee=fe.attention_mask.tolist(),we=this.tokenizer.all_special_ids,Ie=[];for(let Oe=0;Oe<ke.dims[0];++Oe){const We=ge[Oe],be=We.findIndex(Ye=>Ye==this.tokenizer.sep_token_id);Ee[Oe].map((Ye,Ze)=>Ye==1&&(Ze===0||Ze>be&&we.findIndex(Pt=>Pt==We[Ze])===-1));const st=ke[Oe].tolist(),Ne=ye[Oe].tolist();for(let Ye=1;Ye<st.length;++Ye)(Ee[Oe]==0||Ye<=be||we.findIndex(Ze=>Ze==We[Ye])!==-1)&&(st[Ye]=-1/0,Ne[Ye]=-1/0);const je=(0,l.softmax)(st).map((Ye,Ze)=>[Ye,Ze]),et=(0,l.softmax)(Ne).map((Ye,Ze)=>[Ye,Ze]);je[0][0]=0,et[0][0]=0;const qe=(0,i.product)(je,et).filter(Ye=>Ye[0][1]<=Ye[1][1]).map(Ye=>[Ye[0][1],Ye[1][1],Ye[0][0]*Ye[1][0]]).sort((Ye,Ze)=>Ze[2]-Ye[2]);for(let Ye=0;Ye<Math.min(qe.length,W);++Ye){const[Ze,Pt,It]=qe[Ye],ht=We.slice(Ze,Pt+1),br=this.tokenizer.decode(ht,{skip_special_tokens:!0});Ie.push({answer:br,score:It})}}return W===1?Ie[0]:Ie}}class $ extends v{constructor(q){super(q)}async _call(q,{top_k:de=5}={}){const W=this.tokenizer(q,{padding:!0,truncation:!0}),{logits:fe}=await this.model(W),ke=[],ye=W.input_ids.tolist();for(let ge=0;ge<ye.length;++ge){const Ee=ye[ge],we=Ee.findIndex(st=>st==this.tokenizer.mask_token_id);if(we===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Ie=fe[ge][we],Oe=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ie.data),Ie.dims),de),We=Oe[0].tolist(),be=Oe[1].tolist();ke.push(be.map((st,Ne)=>{const je=Ee.slice();return je[we]=st,{score:We[Ne],token:Number(st),token_str:this.tokenizer.decode([st]),sequence:this.tokenizer.decode(je,{skip_special_tokens:!0})}}))}return Array.isArray(q)?ke:ke[0]}}class y extends v{_key="generated_text";constructor(q){super(q)}async _call(q,de={}){Array.isArray(q)||(q=[q]),this.model.config.prefix&&(q=q.map(Ee=>this.model.config.prefix+Ee));const W=this.model.config.task_specific_params;W&&W[this.task]&&W[this.task].prefix&&(q=q.map(Ee=>W[this.task].prefix+Ee));const fe=this.tokenizer,ke={padding:!0,truncation:!0};let ye;this instanceof E&&"_build_translation_inputs"in fe?ye=fe._build_translation_inputs(q,ke,de):ye=fe(q,ke);const ge=await this.model.generate({...ye,...de});return fe.batch_decode(ge,{skip_special_tokens:!0}).map(Ee=>({[this._key]:Ee}))}}class T extends y{_key="summary_text";constructor(q){super(q)}}class E extends y{_key="translation_text";constructor(q){super(q)}}function x(xe){return Array.isArray(xe)&&xe.every(q=>"role"in q&&"content"in q)}class S extends v{constructor(q){super(q)}async _call(q,de={}){let W=!1,fe=!1,ke=de.add_special_tokens??(this.tokenizer.add_bos_token||this.tokenizer.add_eos_token)??!1,ye;if(typeof q=="string")ye=q=[q];else if(Array.isArray(q)&&q.every(be=>typeof be=="string"))W=!0,ye=q;else{if(x(q))q=[q];else if(Array.isArray(q)&&q.every(x))W=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");fe=!0,ye=q.map(be=>this.tokenizer.apply_chat_template(be,{tokenize:!1,add_generation_prompt:!0})),ke=!1}const ge=fe?!1:de.return_full_text??!0;this.tokenizer.padding_side="left";const Ee=this.tokenizer(ye,{add_special_tokens:ke,padding:!0,truncation:!0}),we=await this.model.generate({...Ee,...de}),Ie=this.tokenizer.batch_decode(we,{skip_special_tokens:!0});let Oe;!ge&&Ee.input_ids.dims.at(-1)>0&&(Oe=this.tokenizer.batch_decode(Ee.input_ids,{skip_special_tokens:!0}).map(be=>be.length));const We=Array.from({length:q.length},be=>[]);for(let be=0;be<Ie.length;++be){const st=Math.floor(be/we.dims[0]*q.length);Oe&&(Ie[be]=Ie[be].slice(Oe[st])),We[st].push({generated_text:fe?[...q[st],{role:"assistant",content:Ie[be]}]:Ie[be]})}return!W&&We.length===1?We[0]:We}}class z extends v{constructor(q){super(q),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([de,W])=>[de.toLowerCase(),W])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(q,de,{hypothesis_template:W="This example is {}.",multi_label:fe=!1}={}){const ke=Array.isArray(q);ke||(q=[q]),Array.isArray(de)||(de=[de]);const ye=de.map(we=>W.replace("{}",we)),ge=fe||de.length===1,Ee=[];for(const we of q){const Ie=[];for(const be of ye){const st=this.tokenizer(we,{text_pair:be,padding:!0,truncation:!0}),Ne=await this.model(st);ge?Ie.push([Ne.logits.data[this.contradiction_id],Ne.logits.data[this.entailment_id]]):Ie.push(Ne.logits.data[this.entailment_id])}const We=(ge?Ie.map(be=>(0,l.softmax)(be)[1]):(0,l.softmax)(Ie)).map((be,st)=>[be,st]).sort((be,st)=>st[0]-be[0]);Ee.push({sequence:we,labels:We.map(be=>de[be[1]]),scores:We.map(be=>be[0])})}return ke?Ee:Ee[0]}}class O extends v{constructor(q){super(q)}async _call(q,{pooling:de="none",normalize:W=!1,quantize:fe=!1,precision:ke="binary"}={}){const ye=this.tokenizer(q,{padding:!0,truncation:!0}),ge=await this.model(ye);let Ee=ge.last_hidden_state??ge.logits??ge.token_embeddings;switch(de){case"none":break;case"mean":Ee=(0,p.mean_pooling)(Ee,ye.attention_mask);break;case"first_token":case"cls":Ee=Ee.slice(null,0);break;case"last_token":case"eos":Ee=Ee.slice(null,-1);break;default:throw Error(`Pooling method '${de}' not supported.`)}return W&&(Ee=Ee.normalize(2,-1)),fe&&(Ee=(0,p.quantize_embeddings)(Ee,ke)),Ee}}class K extends v{constructor(q){super(q)}async _call(q,{pool:de=null}={}){const W=await u(q),{pixel_values:fe}=await this.processor(W),ke=await this.model({pixel_values:fe});let ye;if(de){if(!("pooler_output"in ke))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");ye=ke.pooler_output}else ye=ke.last_hidden_state??ke.logits??ke.image_embeds;return ye}}class H extends v{constructor(q){super(q)}async _call(q,{top_k:de=5}={}){const W=this.processor.feature_extractor.config.sampling_rate,fe=await f(q,W),ke=this.model.config.id2label,ye=[];for(const ge of fe){const Ee=await this.processor(ge),Ie=(await this.model(Ee)).logits[0],Oe=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ie.data),Ie.dims),de),We=Oe[0].tolist(),st=Oe[1].tolist().map((Ne,je)=>({label:ke?ke[Ne]:`LABEL_${Ne}`,score:We[je]}));ye.push(st)}return Array.isArray(q)?ye:ye[0]}}class D extends v{constructor(q){super(q)}async _call(q,de,{hypothesis_template:W="This is a sound of {}."}={}){const fe=!Array.isArray(q);fe&&(q=[q]);const ke=de.map(Ie=>W.replace("{}",Ie)),ye=this.tokenizer(ke,{padding:!0,truncation:!0}),ge=this.processor.feature_extractor.config.sampling_rate,Ee=await f(q,ge),we=[];for(const Ie of Ee){const Oe=await this.processor(Ie),We=await this.model({...ye,...Oe}),be=(0,l.softmax)(We.logits_per_audio.data);we.push([...be].map((st,Ne)=>({score:st,label:de[Ne]})))}return fe?we[0]:we}}class Z extends v{constructor(q){super(q)}async _call(q,de={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(q,de);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(q,de);case"moonshine":return this._call_moonshine(q,de);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(q,de){de.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),de.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const W=!Array.isArray(q);W&&(q=[q]);const fe=this.processor.feature_extractor.config.sampling_rate,ke=await f(q,fe),ye=[];for(const ge of ke){const Ee=await this.processor(ge),Ie=(await this.model(Ee)).logits[0],Oe=[];for(const be of Ie)Oe.push((0,l.max)(be.data)[1]);const We=this.tokenizer.decode(Oe);ye.push({text:We})}return W?ye[0]:ye}async _call_whisper(q,de){const W=de.return_timestamps??!1,fe=de.chunk_length_s??0,ke=de.force_full_sequences??!1;let ye=de.stride_length_s??null;const ge={...de};W==="word"&&(ge.return_token_timestamps=!0,ge.return_timestamps=!1);const Ee=!Array.isArray(q);Ee&&(q=[q]);const we=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Ie=this.processor.feature_extractor.config.hop_length,Oe=this.processor.feature_extractor.config.sampling_rate,We=await f(q,Oe),be=[];for(const st of We){let Ne=[];if(fe>0){if(ye===null)ye=fe/6;else if(fe<=ye)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const qe=Oe*fe,Ye=Oe*ye,Ze=qe-2*Ye;let Pt=0;for(;;){const It=Pt+qe,ht=st.subarray(Pt,It),br=await this.processor(ht),Wr=Pt===0,Or=It>=st.length;if(Ne.push({stride:[ht.length,Wr?0:Ye,Or?0:Ye],input_features:br.input_features,is_last:Or}),Or)break;Pt+=Ze}}else Ne=[{stride:[st.length,0,0],input_features:(await this.processor(st)).input_features,is_last:!0}];for(const qe of Ne){ge.num_frames=Math.floor(qe.stride[0]/Ie);const Ye=await this.model.generate({inputs:qe.input_features,...ge});W==="word"?(qe.tokens=Ye.sequences.tolist()[0],qe.token_timestamps=Ye.token_timestamps.tolist()[0].map(Ze=>(0,l.round)(Ze,2))):qe.tokens=Ye[0].tolist(),qe.stride=qe.stride.map(Ze=>Ze/Oe)}const[je,et]=this.tokenizer._decode_asr(Ne,{time_precision:we,return_timestamps:W,force_full_sequences:ke});be.push({text:je,...et})}return Ee?be[0]:be}async _call_moonshine(q,de){const W=!Array.isArray(q);W&&(q=[q]);const fe=this.processor.feature_extractor.config.sampling_rate,ke=await f(q,fe),ye=[];for(const ge of ke){const Ee=await this.processor(ge),we=Math.floor(ge.length/fe)*6,Ie=await this.model.generate({max_new_tokens:we,...de,...Ee}),Oe=this.processor.batch_decode(Ie,{skip_special_tokens:!0})[0];ye.push({text:Oe})}return W?ye[0]:ye}}class Q extends v{constructor(q){super(q)}async _call(q,de={}){const W=Array.isArray(q),fe=await u(q),{pixel_values:ke}=await this.processor(fe),ye=[];for(const ge of ke){ge.dims=[1,...ge.dims];const Ee=await this.model.generate({inputs:ge,...de}),we=this.tokenizer.batch_decode(Ee,{skip_special_tokens:!0}).map(Ie=>({generated_text:Ie.trim()}));ye.push(we)}return W?ye:ye[0]}}class Y extends v{constructor(q){super(q)}async _call(q,{top_k:de=5}={}){const W=await u(q),{pixel_values:fe}=await this.processor(W),ke=await this.model({pixel_values:fe}),ye=this.model.config.id2label,ge=[];for(const Ee of ke.logits){const we=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ee.data),Ee.dims),de),Ie=we[0].tolist(),We=we[1].tolist().map((be,st)=>({label:ye?ye[be]:`LABEL_${be}`,score:Ie[st]}));ge.push(We)}return Array.isArray(q)?ge:ge[0]}}class re extends v{constructor(q){super(q),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(q,{threshold:de=.5,mask_threshold:W=.5,overlap_mask_area_threshold:fe=.8,label_ids_to_fuse:ke=null,target_sizes:ye=null,subtask:ge=null}={}){if(Array.isArray(q)&&q.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const we=await u(q),Ie=we.map(qe=>[qe.height,qe.width]),Oe=await this.processor(we),{inputNames:We,outputNames:be}=this.model.sessions.model;if(!We.includes("pixel_values")){if(We.length!==1)throw Error(`Expected a single input name, but got ${We.length} inputs: ${We}.`);const qe=We[0];if(qe in Oe)throw Error(`Input name ${qe} already exists in the inputs.`);Oe[qe]=Oe.pixel_values}const st=await this.model(Oe);let Ne=null;if(ge!==null)Ne=this.subtasks_mapping[ge];else if(this.processor.image_processor){for(const[qe,Ye]of Object.entries(this.subtasks_mapping))if(Ye in this.processor.image_processor){Ne=this.processor.image_processor[Ye].bind(this.processor.image_processor),ge=qe;break}}const je=this.model.config.id2label,et=[];if(ge)if(ge==="panoptic"||ge==="instance"){const qe=Ne(st,de,W,fe,ke,ye??Ie)[0],Ye=qe.segmentation;for(const Ze of qe.segments_info){const Pt=new Uint8ClampedArray(Ye.data.length);for(let ht=0;ht<Ye.data.length;++ht)Ye.data[ht]===Ze.id&&(Pt[ht]=255);const It=new d.RawImage(Pt,Ye.dims[1],Ye.dims[0],1);et.push({score:Ze.score,label:je[Ze.label_id],mask:It})}}else if(ge==="semantic"){const{segmentation:qe,labels:Ye}=Ne(st,ye??Ie)[0];for(const Ze of Ye){const Pt=new Uint8ClampedArray(qe.data.length);for(let ht=0;ht<qe.data.length;++ht)qe.data[ht]===Ze&&(Pt[ht]=255);const It=new d.RawImage(Pt,qe.dims[1],qe.dims[0],1);et.push({score:null,label:je[Ze],mask:It})}}else throw Error(`Subtask ${ge} not supported.`);else{const Ye=st[be[0]];for(let Ze=0;Ze<Ie.length;++Ze){const Pt=Ie[Ze],It=Ye[Ze];It.data.some(br=>br<-1e-5||br>1+1e-5)&&It.sigmoid_();const ht=await d.RawImage.fromTensor(It.mul_(255).to("uint8")).resize(Pt[1],Pt[0]);et.push({label:null,score:null,mask:ht})}}return et}}class te extends re{constructor(q){super(q)}async _call(q,de={}){if(Array.isArray(q)&&q.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const fe=await u(q),ke=await super._call(q,de);return fe.map((ge,Ee)=>{const we=ge.clone();return we.putAlpha(ke[Ee].mask),we})}}class ce extends v{constructor(q){super(q)}async _call(q,de,{hypothesis_template:W="This is a photo of {}"}={}){const fe=Array.isArray(q),ke=await u(q),ye=de.map(We=>W.replace("{}",We)),ge=this.tokenizer(ye,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:Ee}=await this.processor(ke),we=await this.model({...ge,pixel_values:Ee}),Ie=this.model.config.model_type==="siglip"?We=>We.sigmoid().data:We=>(0,l.softmax)(We.data),Oe=[];for(const We of we.logits_per_image){const st=[...Ie(We)].map((Ne,je)=>({score:Ne,label:de[je]}));st.sort((Ne,je)=>je.score-Ne.score),Oe.push(st)}return fe?Oe:Oe[0]}}class ue extends v{constructor(q){super(q)}async _call(q,{threshold:de=.9,percentage:W=!1}={}){const fe=Array.isArray(q);if(fe&&q.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const ke=await u(q),ye=W?null:ke.map(be=>[be.height,be.width]),{pixel_values:ge,pixel_mask:Ee}=await this.processor(ke),we=await this.model({pixel_values:ge,pixel_mask:Ee}),Ie=this.processor.image_processor.post_process_object_detection(we,de,ye),Oe=this.model.config.id2label,We=Ie.map(be=>be.boxes.map((st,Ne)=>({score:be.scores[Ne],label:Oe[be.classes[Ne]],box:_(st,!W)})));return fe?We:We[0]}}class B extends v{constructor(q){super(q)}async _call(q,de,{threshold:W=.1,top_k:fe=null,percentage:ke=!1}={}){const ye=Array.isArray(q),ge=await u(q),Ee=this.tokenizer(de,{padding:!0,truncation:!0}),we=await this.processor(ge),Ie=[];for(let Oe=0;Oe<ge.length;++Oe){const We=ge[Oe],be=ke?null:[[We.height,We.width]],st=we.pixel_values[Oe].unsqueeze_(0),Ne=await this.model({...Ee,pixel_values:st});let je;if("post_process_grounded_object_detection"in this.processor){const et=this.processor.post_process_grounded_object_detection(Ne,Ee.input_ids,{box_threshold:W,text_threshold:W,target_sizes:be})[0];je=et.boxes.map((qe,Ye)=>({score:et.scores[Ye],label:et.labels[Ye],box:_(qe,!ke)}))}else{const et=this.processor.image_processor.post_process_object_detection(Ne,W,be,!0)[0];je=et.boxes.map((qe,Ye)=>({score:et.scores[Ye],label:de[et.classes[Ye]],box:_(qe,!ke)}))}je.sort((et,qe)=>qe.score-et.score),fe!==null&&(je=je.slice(0,fe)),Ie.push(je)}return ye?Ie:Ie[0]}}class F extends v{constructor(q){super(q)}async _call(q,de,W={}){const fe=(await u(q))[0],{pixel_values:ke}=await this.processor(fe),ye=`<s_docvqa><s_question>${de}</s_question><s_answer>`,ge=this.tokenizer(ye,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,Ee=await this.model.generate({inputs:ke,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:ge,...W}),Ie=this.tokenizer.batch_decode(Ee)[0].match(/<s_answer>(.*?)<\/s_answer>/);let Oe=null;return Ie&&Ie.length>=2&&(Oe=Ie[1].trim()),[{answer:Oe}]}}class G extends v{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(q){super(q),this.vocoder=q.vocoder??null}async _call(q,{speaker_embeddings:de=null}={}){return this.processor?this._call_text_to_spectrogram(q,{speaker_embeddings:de}):this._call_text_to_waveform(q)}async _call_text_to_waveform(q){const de=this.tokenizer(q,{padding:!0,truncation:!0}),{waveform:W}=await this.model(de),fe=this.model.config.sampling_rate;return new c.RawAudio(W.data,fe)}async _call_text_to_spectrogram(q,{speaker_embeddings:de}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await n.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof de=="string"||de instanceof URL)&&(de=new Float32Array(await(await fetch(de)).arrayBuffer())),de instanceof Float32Array)de=new p.Tensor("float32",de,[1,de.length]);else if(!(de instanceof p.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:W}=this.tokenizer(q,{padding:!0,truncation:!0}),{waveform:fe}=await this.model.generate_speech(W,de,{vocoder:this.vocoder}),ke=this.processor.feature_extractor.config.sampling_rate;return new c.RawAudio(fe.data,ke)}}class j extends v{constructor(q){super(q)}async _call(q){const de=await u(q),W=await this.processor(de),fe=await this.model(W),ke=[];for(const ye of fe.reconstruction){const ge=ye.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");ke.push(d.RawImage.fromTensor(ge))}return ke.length>1?ke:ke[0]}}class ae extends v{constructor(q){super(q)}async _call(q){const de=await u(q),W=await this.processor(de),{predicted_depth:fe}=await this.model(W),ke=[];for(let ye=0;ye<de.length;++ye){const ge=fe[ye],[Ee,we]=ge.dims.slice(-2),[Ie,Oe]=de[ye].size,We=(await(0,p.interpolate_4d)(ge.view(1,1,Ee,we),{size:[Oe,Ie],mode:"bilinear"})).view(Oe,Ie),be=We.min().item(),st=We.max().item(),Ne=We.sub(be).div_(st-be).mul_(255).to("uint8").unsqueeze(0),je=d.RawImage.fromTensor(Ne);ke.push({predicted_depth:We,depth:je})}return ke.length>1?ke:ke[0]}}const Ae=Object.freeze({"text-classification":{tokenizer:s.AutoTokenizer,pipeline:I,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:s.AutoTokenizer,pipeline:b,model:n.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:s.AutoTokenizer,pipeline:M,model:n.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:s.AutoTokenizer,pipeline:$,model:n.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:s.AutoTokenizer,pipeline:T,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:s.AutoTokenizer,pipeline:E,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:s.AutoTokenizer,pipeline:y,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:s.AutoTokenizer,pipeline:S,model:n.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:s.AutoTokenizer,pipeline:z,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:H,model:n.AutoModelForAudioClassification,processor:o.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:s.AutoTokenizer,pipeline:D,model:n.AutoModel,processor:o.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:s.AutoTokenizer,pipeline:Z,model:[n.AutoModelForSpeechSeq2Seq,n.AutoModelForCTC],processor:o.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:s.AutoTokenizer,pipeline:G,model:[n.AutoModelForTextToWaveform,n.AutoModelForTextToSpectrogram],processor:[o.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:s.AutoTokenizer,pipeline:Q,model:n.AutoModelForVision2Seq,processor:o.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Y,model:n.AutoModelForImageClassification,processor:o.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:re,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:o.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:te,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:o.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:s.AutoTokenizer,pipeline:ce,model:n.AutoModel,processor:o.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ue,model:n.AutoModelForObjectDetection,processor:o.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:s.AutoTokenizer,pipeline:B,model:n.AutoModelForZeroShotObjectDetection,processor:o.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:s.AutoTokenizer,pipeline:F,model:n.AutoModelForDocumentQuestionAnswering,processor:o.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:j,model:n.AutoModelForImageToImage,processor:o.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:ae,model:n.AutoModelForDepthEstimation,processor:o.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:s.AutoTokenizer,pipeline:O,model:n.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:o.AutoProcessor,pipeline:K,model:[n.AutoModelForImageFeatureExtraction,n.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),ve=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function Fe(xe,q=null,{progress_callback:de=null,config:W=null,cache_dir:fe=null,local_files_only:ke=!1,revision:ye="main",device:ge=null,dtype:Ee=null,subfolder:we="onnx",use_external_data_format:Ie=null,model_file_name:Oe=null,session_options:We={}}={}){xe=ve[xe]??xe;const be=Ae[xe.split("_",1)[0]];if(!be)throw Error(`Unsupported pipeline: ${xe}. Must be one of [${Object.keys(Ae)}]`);q||(q=be.default.model,console.log(`No model specified. Using default model: "${q}".`));const st={progress_callback:de,config:W,cache_dir:fe,local_files_only:ke,revision:ye,device:ge,dtype:Ee,subfolder:we,use_external_data_format:Ie,model_file_name:Oe,session_options:We},Ne=new Map([["tokenizer",be.tokenizer],["model",be.model],["processor",be.processor]]),je=await Qe(Ne,q,st);je.task=xe,(0,i.dispatchCallback)(de,{status:"ready",task:xe,model:q});const et=be.pipeline;return new et(je)}async function Qe(xe,q,de){const W=Object.create(null),fe=[];for(const[ke,ye]of xe.entries()){if(!ye)continue;let ge;Array.isArray(ye)?ge=new Promise(async(Ee,we)=>{let Ie;for(const Oe of ye){if(Oe===null){Ee(null);return}try{Ee(await Oe.from_pretrained(q,de));return}catch(We){if(We.message?.includes("Unsupported model type"))Ie=We;else if(We.message?.includes("Could not locate file"))Ie=We;else{we(We);return}}}we(Ie)}):ge=ye.from_pretrained(q,de),W[ke]=ge,fe.push(ge)}await Promise.all(fe);for(const[ke,ye]of Object.entries(W))W[ke]=await ye;return W}},"./src/tokenizers.js":(e,r,t)=>{t.r(r),t.d(r,{AlbertTokenizer:()=>Ut,AutoTokenizer:()=>In,BartTokenizer:()=>$t,BertTokenizer:()=>Es,BlenderbotSmallTokenizer:()=>Xt,BlenderbotTokenizer:()=>rt,BloomTokenizer:()=>Gr,CLIPTokenizer:()=>Ds,CamembertTokenizer:()=>Se,CodeGenTokenizer:()=>Hr,CodeLlamaTokenizer:()=>es,CohereTokenizer:()=>ds,ConvBertTokenizer:()=>J,DebertaTokenizer:()=>C,DebertaV2Tokenizer:()=>X,DistilBertTokenizer:()=>me,ElectraTokenizer:()=>lt,Ernie4_5_Tokenizer:()=>sn,EsmTokenizer:()=>Cs,FalconTokenizer:()=>cs,GPT2Tokenizer:()=>Ct,GPTNeoXTokenizer:()=>Dr,GemmaTokenizer:()=>sr,Grok1Tokenizer:()=>Kr,HerbertTokenizer:()=>N,LlamaTokenizer:()=>fr,M2M100Tokenizer:()=>ts,MBart50Tokenizer:()=>Bt,MBartTokenizer:()=>_r,MPNetTokenizer:()=>ls,MarianTokenizer:()=>Le,MgpstrTokenizer:()=>rn,MobileBertTokenizer:()=>Tt,NllbTokenizer:()=>yr,NougatTokenizer:()=>$s,PreTrainedTokenizer:()=>dt,Qwen2Tokenizer:()=>us,RoFormerTokenizer:()=>ne,RobertaTokenizer:()=>cr,SiglipTokenizer:()=>Lr,SpeechT5Tokenizer:()=>Ls,SqueezeBertTokenizer:()=>Ps,T5Tokenizer:()=>Ge,TokenizerModel:()=>K,VitsTokenizer:()=>zs,Wav2Vec2CTCTokenizer:()=>Re,WhisperTokenizer:()=>Ss,XLMRobertaTokenizer:()=>ur,XLMTokenizer:()=>tt,is_chinese_char:()=>$});var s=t("./src/utils/generic.js"),n=t("./src/utils/core.js"),o=t("./src/utils/hub.js"),a=t("./src/utils/maths.js"),i=t("./src/utils/tensor.js"),l=t("./src/utils/data-structures.js"),c=t("./node_modules/@huggingface/jinja/dist/index.js"),p=t("./src/models/whisper/common_whisper.js");async function d(le,k){const U=await Promise.all([(0,o.getModelJSON)(le,"tokenizer.json",!0,k),(0,o.getModelJSON)(le,"tokenizer_config.json",!0,k)]);return k.legacy!==null&&(U[1].legacy=k.legacy),U}function u(le,k){const U=[];let ee=0;for(const se of le.matchAll(k)){const he=se[0];ee<se.index&&U.push(le.slice(ee,se.index)),he.length>0&&U.push(he),ee=se.index+he.length}return ee<le.length&&U.push(le.slice(ee)),U}function f(le,k=!0){if(le.Regex!==void 0){let U=le.Regex.replace(/\\([#&~])/g,"$1");for(const[ee,se]of z)U=U.replaceAll(ee,se);return new RegExp(U,"gu")}else if(le.String!==void 0){const U=(0,n.escapeRegExp)(le.String);return new RegExp(k?U:`(${U})`,"gu")}else return console.warn("Unknown pattern type:",le),null}function _(le){return new Map(Object.entries(le))}function v(le){const k=le.dims;switch(k.length){case 1:return le.tolist();case 2:if(k[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return le.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${k.length}.`)}}function I(le){return le.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function b(le){return le.replace(new RegExp("\\p{M}","gu"),"")}function M(le){return b(le.toLowerCase())}function $(le){return le>=19968&&le<=40959||le>=13312&&le<=19903||le>=131072&&le<=173791||le>=173824&&le<=177983||le>=177984&&le<=178207||le>=178208&&le<=183983||le>=63744&&le<=64255||le>=194560&&le<=195103}function y(le,k,U){const ee=[];let se=0;for(;se<le.length;){if(ee.push(le[se]),(k.get(le[se])??U)!==U){++se;continue}for(;++se<le.length&&(k.get(le[se])??U)===U;)k.get(ee.at(-1))!==U&&(ee[ee.length-1]+=le[se])}return ee}function T(le){return le.match(/\S+/g)||[]}const E="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",x=new RegExp(`^[${E}]+$`,"gu"),S=".,!?…。，、।۔،",z=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${S}])]+`,` ?[^\\s${S}]+`]]);class O{constructor(k){this.content=k.content,this.id=k.id,this.single_word=k.single_word??!1,this.lstrip=k.lstrip??!1,this.rstrip=k.rstrip??!1,this.special=k.special??!1,this.normalized=k.normalized??null}}class K extends s.Callable{constructor(k){super(),this.config=k,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(k,...U){switch(k.type){case"WordPiece":return new H(k);case"Unigram":return new D(k,...U);case"BPE":return new Y(k);default:if(k.vocab)return Array.isArray(k.vocab)?new D(k,...U):Object.hasOwn(k,"continuing_subword_prefix")&&Object.hasOwn(k,"unk_token")?Object.hasOwn(k,"merges")?new Y(k):new H(k):new re(k,...U);throw new Error(`Unknown TokenizerModel type: ${k.type}`)}}_call(k){return k=this.encode(k),this.fuse_unk&&(k=y(k,this.tokens_to_ids,this.unk_token_id)),k}encode(k){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(k){return k.map(U=>this.tokens_to_ids.get(U)??this.unk_token_id)}convert_ids_to_tokens(k){return k.map(U=>this.vocab[U]??this.unk_token)}}class H extends K{constructor(k){super(k),this.tokens_to_ids=_(k.vocab),this.unk_token_id=this.tokens_to_ids.get(k.unk_token),this.unk_token=k.unk_token,this.max_input_chars_per_word=k.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[U,ee]of this.tokens_to_ids)this.vocab[ee]=U}encode(k){const U=[];for(const ee of k){const se=[...ee];if(se.length>this.max_input_chars_per_word){U.push(this.unk_token);continue}let he=!1,Ce=0;const Ke=[];for(;Ce<se.length;){let Xe=se.length,Je=null;for(;Ce<Xe;){let Ue=se.slice(Ce,Xe).join("");if(Ce>0&&(Ue=this.config.continuing_subword_prefix+Ue),this.tokens_to_ids.has(Ue)){Je=Ue;break}--Xe}if(Je===null){he=!0;break}Ke.push(Je),Ce=Xe}he?U.push(this.unk_token):U.push(...Ke)}return U}}class D extends K{constructor(k,U){super(k);const ee=k.vocab.length;this.vocab=new Array(ee),this.scores=new Array(ee);for(let se=0;se<ee;++se)[this.vocab[se],this.scores[se]]=k.vocab[se];this.unk_token_id=k.unk_id,this.unk_token=this.vocab[k.unk_id],this.tokens_to_ids=new Map(this.vocab.map((se,he)=>[se,he])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=U.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,a.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new l.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(k){const U=k.chars,ee=1;let se=0;for(;se<U.length;){let he=!1;const Ce=U.slice(se).join(""),Ke=this.trie.commonPrefixSearch(Ce);for(const Xe of Ke){const Je=this.tokens_to_ids.get(Xe),Ue=this.scores[Je],St=(0,n.len)(Xe);k.insert(se,St,Ue,Je),!he&&St===ee&&(he=!0)}he||k.insert(se,ee,this.unk_score,this.unk_token_id),se+=ee}}tokenize(k){const U=new l.TokenLattice(k,this.bos_token_id,this.eos_token_id);return this.populateNodes(U),U.tokens()}encode(k){const U=[];for(const ee of k){const se=this.tokenize(ee);U.push(...se)}return U}}const Z=(()=>{const le=[...Array.from({length:94},(se,he)=>he+33),...Array.from({length:12},(se,he)=>he+161),...Array.from({length:82},(se,he)=>he+174)],k=le.slice();let U=0;for(let se=0;se<256;++se)le.includes(se)||(le.push(se),k.push(256+U),U+=1);const ee=k.map(se=>String.fromCharCode(se));return Object.fromEntries(le.map((se,he)=>[se,ee[he]]))})(),Q=(0,n.reverseDictionary)(Z);class Y extends K{constructor(k){super(k),this.tokens_to_ids=_(k.vocab),this.unk_token_id=this.tokens_to_ids.get(k.unk_token),this.unk_token=k.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[ee,se]of this.tokens_to_ids)this.vocab[se]=ee;const U=Array.isArray(k.merges[0]);this.merges=U?k.merges:k.merges.map(ee=>ee.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((ee,se)=>[JSON.stringify(ee),se])),this.end_of_word_suffix=k.end_of_word_suffix,this.continuing_subword_suffix=k.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new l.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(k){if(k.length===0)return[];const U=this.cache.get(k);if(U!==void 0)return U;const ee=Array.from(k);this.end_of_word_suffix&&(ee[ee.length-1]+=this.end_of_word_suffix);let se=[];if(ee.length>1){const he=new l.PriorityQueue((Xe,Je)=>Xe.score<Je.score);let Ce={token:ee[0],bias:0,prev:null,next:null},Ke=Ce;for(let Xe=1;Xe<ee.length;++Xe){const Je={bias:Xe/ee.length,token:ee[Xe],prev:Ke,next:null};Ke.next=Je,this._add_node(he,Ke),Ke=Je}for(;!he.isEmpty();){const Xe=he.pop();if(Xe.deleted||!Xe.next||Xe.next.deleted)continue;if(Xe.deleted=!0,Xe.next.deleted=!0,Xe.prev){const Ue={...Xe.prev};Xe.prev.deleted=!0,Xe.prev=Ue,Ue.prev?Ue.prev.next=Ue:Ce=Ue}const Je={token:Xe.token+Xe.next.token,bias:Xe.bias,prev:Xe.prev,next:Xe.next.next};Je.prev?(Je.prev.next=Je,this._add_node(he,Je.prev)):Ce=Je,Je.next&&(Je.next.prev=Je,this._add_node(he,Je))}for(let Xe=Ce;Xe!==null;Xe=Xe.next)se.push(Xe.token)}else se=ee;if(this.continuing_subword_suffix)for(let he=0;he<se.length-1;++he)se[he]+=this.continuing_subword_suffix;return k.length<this.max_length_to_cache&&this.cache.put(k,se),se}_add_node(k,U){const ee=this.bpe_ranks.get(JSON.stringify([U.token,U.next.token]));ee!==void 0&&(U.score=ee+U.bias,k.push(U))}encode(k){const U=[];for(const ee of k){if(this.ignore_merges&&this.tokens_to_ids.has(ee)){U.push(ee);continue}const se=this.bpe(ee);for(const he of se)if(this.tokens_to_ids.has(he))U.push(he);else if(this.byte_fallback){const Ce=Array.from(this.text_encoder.encode(he)).map(Ke=>`<0x${Ke.toString(16).toUpperCase().padStart(2,"0")}>`);Ce.every(Ke=>this.tokens_to_ids.has(Ke))?U.push(...Ce):U.push(this.unk_token)}else U.push(this.unk_token)}return U}}class re extends K{constructor(k,U){super(k),this.tokens_to_ids=_(U.target_lang?k.vocab[U.target_lang]:k.vocab),this.bos_token=U.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=U.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=U.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=U.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[ee,se]of this.tokens_to_ids)this.vocab[se]=ee}encode(k){return k}}class te extends s.Callable{constructor(k){super(),this.config=k}static fromConfig(k){if(k===null)return null;switch(k.type){case"BertNormalizer":return new xe(k);case"Precompiled":return new Or(k);case"Sequence":return new Qe(k);case"Replace":return new ce(k);case"NFC":return new B(k);case"NFD":return new F(k);case"NFKC":return new G(k);case"NFKD":return new j(k);case"Strip":return new ae(k);case"StripAccents":return new Ae(k);case"Lowercase":return new ve(k);case"Prepend":return new Fe(k);default:throw new Error(`Unknown Normalizer type: ${k.type}`)}}normalize(k){throw Error("normalize should be implemented in subclass.")}_call(k){return this.normalize(k)}}class ce extends te{normalize(k){const U=f(this.config.pattern);return U===null?k:k.replaceAll(U,this.config.content)}}class ue extends te{form=void 0;normalize(k){return k=k.normalize(this.form),k}}class B extends ue{form="NFC"}class F extends ue{form="NFD"}class G extends ue{form="NFKC"}class j extends ue{form="NFKD"}class ae extends te{normalize(k){return this.config.strip_left&&this.config.strip_right?k=k.trim():(this.config.strip_left&&(k=k.trimStart()),this.config.strip_right&&(k=k.trimEnd())),k}}class Ae extends te{normalize(k){return k=b(k),k}}class ve extends te{normalize(k){return k=k.toLowerCase(),k}}class Fe extends te{normalize(k){return k=this.config.prepend+k,k}}class Qe extends te{constructor(k){super(k),this.normalizers=k.normalizers.map(U=>te.fromConfig(U))}normalize(k){return this.normalizers.reduce((U,ee)=>ee.normalize(U),k)}}class xe extends te{_tokenize_chinese_chars(k){const U=[];for(let ee=0;ee<k.length;++ee){const se=k[ee],he=se.charCodeAt(0);$(he)?(U.push(" "),U.push(se),U.push(" ")):U.push(se)}return U.join("")}stripAccents(k){return k.normalize("NFD").replace(new RegExp("\\p{Mn}","gu"),"")}_is_control(k){switch(k){case"	":case`
`:case"\r":return!1;default:return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$","u").test(k)}}_clean_text(k){const U=[];for(const ee of k){const se=ee.charCodeAt(0);se===0||se===65533||this._is_control(ee)||(/^\s$/.test(ee)?U.push(" "):U.push(ee))}return U.join("")}normalize(k){return this.config.clean_text&&(k=this._clean_text(k)),this.config.handle_chinese_chars&&(k=this._tokenize_chinese_chars(k)),this.config.lowercase?(k=k.toLowerCase(),this.config.strip_accents!==!1&&(k=this.stripAccents(k))):this.config.strip_accents&&(k=this.stripAccents(k)),k}}class q extends s.Callable{static fromConfig(k){if(k===null)return null;switch(k.type){case"BertPreTokenizer":return new de(k);case"Sequence":return new Zr(k);case"Whitespace":return new Gt(k);case"WhitespaceSplit":return new kr(k);case"Metaspace":return new br(k);case"ByteLevel":return new W(k);case"Split":return new fe(k);case"Punctuation":return new ke(k);case"Digits":return new ye(k);case"Replace":return new Vs(k);default:throw new Error(`Unknown PreTokenizer type: ${k.type}`)}}pre_tokenize_text(k,U){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(k,U){return(Array.isArray(k)?k.map(ee=>this.pre_tokenize_text(ee,U)):this.pre_tokenize_text(k,U)).flat()}_call(k,U){return this.pre_tokenize(k,U)}}class de extends q{constructor(k){super(),this.pattern=new RegExp(`[^\\s${E}]+|[${E}]`,"gu")}pre_tokenize_text(k,U){return k.trim().match(this.pattern)||[]}}class W extends q{constructor(k){super(),this.config=k,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+","gu"),this.byte_encoder=Z,this.text_encoder=new TextEncoder}pre_tokenize_text(k,U){return this.add_prefix_space&&!k.startsWith(" ")&&(k=" "+k),(this.use_regex?k.match(this.pattern)||[]:[k]).map(se=>Array.from(this.text_encoder.encode(se),he=>this.byte_encoder[he]).join(""))}}class fe extends q{constructor(k){super(),this.config=k,this.pattern=f(this.config.pattern,this.config.invert)}pre_tokenize_text(k,U){return this.pattern===null?[]:this.config.invert?k.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?k.split(this.pattern).filter(ee=>ee):u(k,this.pattern)}}class ke extends q{constructor(k){super(),this.config=k,this.pattern=new RegExp(`[^${E}]+|[${E}]+`,"gu")}pre_tokenize_text(k,U){return k.match(this.pattern)||[]}}class ye extends q{constructor(k){super(),this.config=k;const U=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(U,"gu")}pre_tokenize_text(k,U){return k.match(this.pattern)||[]}}class ge extends s.Callable{constructor(k){super(),this.config=k}static fromConfig(k){if(k===null)return null;switch(k.type){case"TemplateProcessing":return new Ie(k);case"ByteLevel":return new Oe(k);case"RobertaProcessing":return new we(k);case"BertProcessing":return new Ee(k);case"Sequence":return new We(k);default:throw new Error(`Unknown PostProcessor type: ${k.type}`)}}post_process(k,...U){throw Error("post_process should be implemented in subclass.")}_call(k,...U){return this.post_process(k,...U)}}class Ee extends ge{constructor(k){super(k),this.cls=k.cls[0],this.sep=k.sep[0]}post_process(k,U=null,{add_special_tokens:ee=!0}={}){ee&&(k=(0,n.mergeArrays)([this.cls],k,[this.sep]));let se=new Array(k.length).fill(0);if(U!==null){const he=ee&&this instanceof we?[this.sep]:[],Ce=ee?[this.sep]:[];k=(0,n.mergeArrays)(k,he,U,Ce),se=(0,n.mergeArrays)(se,new Array(U.length+he.length+Ce.length).fill(1))}return{tokens:k,token_type_ids:se}}}class we extends Ee{}class Ie extends ge{constructor(k){super(k),this.single=k.single,this.pair=k.pair}post_process(k,U=null,{add_special_tokens:ee=!0}={}){const se=U===null?this.single:this.pair;let he=[],Ce=[];for(const Ke of se)"SpecialToken"in Ke?ee&&(he.push(Ke.SpecialToken.id),Ce.push(Ke.SpecialToken.type_id)):"Sequence"in Ke&&(Ke.Sequence.id==="A"?(he=(0,n.mergeArrays)(he,k),Ce=(0,n.mergeArrays)(Ce,new Array(k.length).fill(Ke.Sequence.type_id))):Ke.Sequence.id==="B"&&(he=(0,n.mergeArrays)(he,U),Ce=(0,n.mergeArrays)(Ce,new Array(U.length).fill(Ke.Sequence.type_id))));return{tokens:he,token_type_ids:Ce}}}class Oe extends ge{post_process(k,U=null){return U&&(k=(0,n.mergeArrays)(k,U)),{tokens:k}}}class We extends ge{constructor(k){super(k),this.processors=k.processors.map(U=>ge.fromConfig(U))}post_process(k,U=null,ee={}){let se;for(const he of this.processors)if(he instanceof Oe)k=he.post_process(k).tokens,U&&(U=he.post_process(U).tokens);else{const Ce=he.post_process(k,U,ee);k=Ce.tokens,se=Ce.token_type_ids}return{tokens:k,token_type_ids:se}}}class be extends s.Callable{constructor(k){super(),this.config=k,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=k.trim_offsets}static fromConfig(k){if(k===null)return null;switch(k.type){case"WordPiece":return new qe(k);case"Metaspace":return new Wr(k);case"ByteLevel":return new Ye(k);case"Replace":return new st(k);case"ByteFallback":return new Ne(k);case"Fuse":return new je(k);case"Strip":return new et(k);case"Sequence":return new Pt(k);case"CTC":return new Ze(k);case"BPEDecoder":return new It(k);default:throw new Error(`Unknown Decoder type: ${k.type}`)}}_call(k){return this.decode(k)}decode(k){return this.decode_chain(k).join("")}decode_chain(k){throw Error("`decode_chain` should be implemented in subclass.")}}class st extends be{decode_chain(k){const U=f(this.config.pattern);return U===null?k:k.map(ee=>ee.replaceAll(U,this.config.content))}}class Ne extends be{constructor(k){super(k),this.text_decoder=new TextDecoder}decode_chain(k){const U=[];let ee=[];for(const se of k){let he=null;if(se.length===6&&se.startsWith("<0x")&&se.endsWith(">")){const Ce=parseInt(se.slice(3,5),16);isNaN(Ce)||(he=Ce)}if(he!==null)ee.push(he);else{if(ee.length>0){const Ce=this.text_decoder.decode(Uint8Array.from(ee));U.push(Ce),ee=[]}U.push(se)}}if(ee.length>0){const se=this.text_decoder.decode(Uint8Array.from(ee));U.push(se),ee=[]}return U}}class je extends be{decode_chain(k){return[k.join("")]}}class et extends be{constructor(k){super(k),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(k){return k.map(U=>{let ee=0;for(let he=0;he<this.start&&U[he]===this.content;++he){ee=he+1;continue}let se=U.length;for(let he=0;he<this.stop;++he){const Ce=U.length-he-1;if(U[Ce]===this.content){se=Ce;continue}else break}return U.slice(ee,se)})}}class qe extends be{constructor(k){super(k),this.cleanup=k.cleanup}decode_chain(k){return k.map((U,ee)=>(ee!==0&&(U.startsWith(this.config.prefix)?U=U.replace(this.config.prefix,""):U=" "+U),this.cleanup&&(U=I(U)),U))}}class Ye extends be{constructor(k){super(k),this.byte_decoder=Q,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(k){const U=k.join(""),ee=new Uint8Array([...U].map(he=>this.byte_decoder[he]));return this.text_decoder.decode(ee)}decode_chain(k){const U=[];let ee=[];for(const se of k)this.added_tokens.find(he=>he.content===se)!==void 0?(ee.length>0&&(U.push(this.convert_tokens_to_string(ee)),ee=[]),U.push(se)):ee.push(se);return ee.length>0&&U.push(this.convert_tokens_to_string(ee)),U}}class Ze extends be{constructor(k){super(k),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(k){if(k.length===0)return"";const U=[k[0]];for(let he=1;he<k.length;++he)k[he]!==U.at(-1)&&U.push(k[he]);let se=U.filter(he=>he!==this.pad_token).join("");return this.cleanup&&(se=I(se).replaceAll(this.word_delimiter_token," ").trim()),se}decode_chain(k){return[this.convert_tokens_to_string(k)]}}class Pt extends be{constructor(k){super(k),this.decoders=k.decoders.map(U=>be.fromConfig(U))}decode_chain(k){return this.decoders.reduce((U,ee)=>ee.decode_chain(U),k)}}class It extends be{constructor(k){super(k),this.suffix=this.config.suffix}decode_chain(k){return k.map((U,ee)=>U.replaceAll(this.suffix,ee===k.length-1?"":" "))}}class ht extends be{decode_chain(k){let U="";for(let ee=1;ee<k.length;ee+=2)U+=k[ee];return[U]}}class br extends q{constructor(k){super(),this.addPrefixSpace=k.add_prefix_space,this.replacement=k.replacement,this.strRep=k.str_rep||this.replacement,this.prepend_scheme=k.prepend_scheme??"always"}pre_tokenize_text(k,{section_index:U=void 0}={}){let ee=k.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!ee.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&U===0)&&(ee=this.strRep+ee),[ee]}}class Wr extends be{constructor(k){super(k),this.addPrefixSpace=k.add_prefix_space,this.replacement=k.replacement}decode_chain(k){const U=[];for(let ee=0;ee<k.length;++ee){let se=k[ee].replaceAll(this.replacement," ");this.addPrefixSpace&&ee==0&&se.startsWith(" ")&&(se=se.substring(1)),U.push(se)}return U}}class Or extends te{constructor(k){super(k),this.charsmap=k.precompiled_charsmap}normalize(k){return k=k.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),k=k.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),k.includes("～")?k=k.split("～").map(ee=>ee.normalize("NFKC")).join("～"):k=k.normalize("NFKC"),k}}class Zr extends q{constructor(k){super(),this.tokenizers=k.pretokenizers.map(U=>q.fromConfig(U))}pre_tokenize_text(k,U){return this.tokenizers.reduce((ee,se)=>se.pre_tokenize(ee,U),[k])}}class Gt extends q{constructor(k){super()}pre_tokenize_text(k,U){return k.match(/\w+|[^\w\s]+/g)||[]}}class kr extends q{constructor(k){super()}pre_tokenize_text(k,U){return T(k)}}class Vs extends q{constructor(k){super(),this.config=k,this.pattern=f(this.config.pattern),this.content=this.config.content}pre_tokenize_text(k,U){return this.pattern===null?[k]:[k.replaceAll(this.pattern,this.config.content)]}}const Us=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Fs(le,k,U,ee){for(const se of Object.keys(le)){const he=k-le[se].length,Ce=U(se),Ke=new Array(he).fill(Ce);le[se]=ee==="right"?(0,n.mergeArrays)(le[se],Ke):(0,n.mergeArrays)(Ke,le[se])}}function Os(le,k){for(const U of Object.keys(le))le[U].length=k}class dt extends s.Callable{return_token_type_ids=!1;padding_side="right";constructor(k,U){super(),this.config=U,this.normalizer=te.fromConfig(k.normalizer),this.pre_tokenizer=q.fromConfig(k.pre_tokenizer),this.model=K.fromConfig(k.model,U),this.post_processor=ge.fromConfig(k.post_processor),this.decoder=be.fromConfig(k.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const ee of k.added_tokens){const se=new O(ee);this.added_tokens.push(se),this.model.tokens_to_ids.set(se.content,se.id),this.model.vocab[se.id]=se.content,se.special&&(this.special_tokens.push(se.content),this.all_special_ids.push(se.id))}if(this.additional_special_tokens=U.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new l.DictionarySplitter(this.added_tokens.map(ee=>ee.content)),this.added_tokens_map=new Map(this.added_tokens.map(ee=>[ee.content,ee])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=U.model_max_length,this.remove_space=U.remove_space,this.clean_up_tokenization_spaces=U.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=U.do_lowercase_and_remove_accent??!1,U.padding_side&&(this.padding_side=U.padding_side),this.add_bos_token=U.add_bos_token,this.add_eos_token=U.add_eos_token,this.legacy=!1,this.chat_template=U.chat_template??null,Array.isArray(this.chat_template)){const ee=Object.create(null);for(const{name:se,template:he}of this.chat_template){if(typeof se!="string"||typeof he!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');ee[se]=he}this.chat_template=ee}this._compiled_template_cache=new Map}getToken(...k){for(const U of k){const ee=this.config[U];if(ee)if(typeof ee=="object"){if(ee.__type==="AddedToken")return ee.content;throw Error(`Unknown token: ${ee}`)}else return ee}return null}static async from_pretrained(k,{progress_callback:U=null,config:ee=null,cache_dir:se=null,local_files_only:he=!1,revision:Ce="main",legacy:Ke=null}={}){const Xe=await d(k,{progress_callback:U,config:ee,cache_dir:se,local_files_only:he,revision:Ce,legacy:Ke});return new this(...Xe)}_call(k,{text_pair:U=null,add_special_tokens:ee=!0,padding:se=!1,truncation:he=null,max_length:Ce=null,return_tensor:Ke=!0,return_token_type_ids:Xe=null}={}){const Je=Array.isArray(k);let Ue;if(Je){if(k.length===0)throw Error("text array must be non-empty");if(U!==null){if(Array.isArray(U)){if(k.length!==U.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Ue=k.map((gt,tr)=>this._encode_plus(gt,{text_pair:U[tr],add_special_tokens:ee,return_token_type_ids:Xe}))}else Ue=k.map(gt=>this._encode_plus(gt,{add_special_tokens:ee,return_token_type_ids:Xe}))}else{if(k==null)throw Error("text may not be null or undefined");if(Array.isArray(U))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ue=[this._encode_plus(k,{text_pair:U,add_special_tokens:ee,return_token_type_ids:Xe})]}if(Ce===null?Ce=this.model_max_length:he===null&&(se===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),Ce=this.model_max_length):se===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),he=!0)),se===!0&&(Ce=Math.min((0,a.max)(Ue.map(gt=>gt.input_ids.length))[0],Ce??1/0)),Ce=Math.min(Ce,this.model_max_length??1/0),se||he)for(let gt=0;gt<Ue.length;++gt)Ue[gt].input_ids.length!==Ce&&(Ue[gt].input_ids.length>Ce?he&&Os(Ue[gt],Ce):se&&Fs(Ue[gt],Ce,tr=>tr==="input_ids"?this.pad_token_id:0,this.padding_side));const St={};if(Ke){if(!(se&&he)&&Ue.some(tr=>{for(const vr of Object.keys(tr))if(tr[vr].length!==Ue[0][vr]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const gt=[Ue.length,Ue[0].input_ids.length];for(const tr of Object.keys(Ue[0]))St[tr]=new i.Tensor("int64",BigInt64Array.from(Ue.flatMap(vr=>vr[tr]).map(BigInt)),gt)}else{for(const gt of Object.keys(Ue[0]))St[gt]=Ue.map(tr=>tr[gt]);if(!Je)for(const gt of Object.keys(St))St[gt]=St[gt][0]}return St}_encode_text(k){if(k===null)return null;const U=this.added_tokens_splitter.split(k);for(let se=0;se<U.length;++se){const he=this.added_tokens_map.get(U[se]);he&&(he.lstrip&&se>0&&(U[se-1]=U[se-1].trimEnd()),he.rstrip&&se<U.length-1&&(U[se+1]=U[se+1].trimStart()))}return U.flatMap((se,he)=>{if(se.length===0)return[];if(this.added_tokens_map.has(se))return[se];if(this.remove_space===!0&&(se=se.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(se=M(se)),this.normalizer!==null&&(se=this.normalizer(se)),se.length===0)return[];const Ce=this.pre_tokenizer!==null?this.pre_tokenizer(se,{section_index:he}):[se];return this.model(Ce)})}_encode_plus(k,{text_pair:U=null,add_special_tokens:ee=!0,return_token_type_ids:se=null}={}){const{tokens:he,token_type_ids:Ce}=this._tokenize_helper(k,{pair:U,add_special_tokens:ee}),Ke=this.model.convert_tokens_to_ids(he),Xe={input_ids:Ke,attention_mask:new Array(Ke.length).fill(1)};return(se??this.return_token_type_ids)&&Ce&&(Xe.token_type_ids=Ce),Xe}_tokenize_helper(k,{pair:U=null,add_special_tokens:ee=!1}={}){const se=this._encode_text(k),he=this._encode_text(U);return this.post_processor?this.post_processor(se,he,{add_special_tokens:ee}):{tokens:(0,n.mergeArrays)(se??[],he??[])}}tokenize(k,{pair:U=null,add_special_tokens:ee=!1}={}){return this._tokenize_helper(k,{pair:U,add_special_tokens:ee}).tokens}encode(k,{text_pair:U=null,add_special_tokens:ee=!0,return_token_type_ids:se=null}={}){return this._encode_plus(k,{text_pair:U,add_special_tokens:ee,return_token_type_ids:se}).input_ids}batch_decode(k,U={}){return k instanceof i.Tensor&&(k=k.tolist()),k.map(ee=>this.decode(ee,U))}decode(k,U={}){if(k instanceof i.Tensor&&(k=v(k)),!Array.isArray(k)||k.length===0||!(0,n.isIntegralNumber)(k[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(k,U)}decode_single(k,{skip_special_tokens:U=!1,clean_up_tokenization_spaces:ee=null}){let se=this.model.convert_ids_to_tokens(k);U&&(se=se.filter(Ce=>!this.special_tokens.includes(Ce)));let he=this.decoder?this.decoder(se):se.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(he=he.replaceAll(this.decoder.end_of_word_suffix," "),U&&(he=he.trim())),(ee??this.clean_up_tokenization_spaces)&&(he=I(he)),he}get_chat_template({chat_template:k=null,tools:U=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const ee=this.chat_template;if(k!==null&&Object.hasOwn(ee,k))k=ee[k];else if(k===null)if(U!==null&&"tool_use"in ee)k=ee.tool_use;else if("default"in ee)k=ee.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(ee).sort()}.`)}else if(k===null)if(this.chat_template)k=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return k}apply_chat_template(k,{tools:U=null,documents:ee=null,chat_template:se=null,add_generation_prompt:he=!1,tokenize:Ce=!0,padding:Ke=!1,truncation:Xe=!1,max_length:Je=null,return_tensor:Ue=!0,return_dict:St=!1,tokenizer_kwargs:gt={},...tr}={}){if(se=this.get_chat_template({chat_template:se,tools:U}),typeof se!="string")throw Error(`chat_template must be a string, but got ${typeof se}`);let vr=this._compiled_template_cache.get(se);vr===void 0&&(vr=new c.Template(se),this._compiled_template_cache.set(se,vr));const Kt=Object.create(null);for(const Wt of Us){const Nr=this.getToken(Wt);Nr&&(Kt[Wt]=Nr)}const rr=vr.render({messages:k,add_generation_prompt:he,tools:U,documents:ee,...Kt,...tr});if(Ce){const Wt=this._call(rr,{add_special_tokens:!1,padding:Ke,truncation:Xe,max_length:Je,return_tensor:Ue,...gt});return St?Wt:Wt.input_ids}return rr}}class Es extends dt{return_token_type_ids=!0}class Ut extends dt{return_token_type_ids=!0}class Tt extends dt{return_token_type_ids=!0}class Ps extends dt{return_token_type_ids=!0}class C extends dt{return_token_type_ids=!0}class X extends dt{return_token_type_ids=!0}class N extends dt{return_token_type_ids=!0}class J extends dt{return_token_type_ids=!0}class ne extends dt{return_token_type_ids=!0}class me extends dt{}class Se extends dt{}class tt extends dt{return_token_type_ids=!0;constructor(k,U){super(k,U),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class lt extends dt{return_token_type_ids=!0}class Ge extends dt{}class Ct extends dt{}class $t extends dt{}class _r extends dt{constructor(k,U){super(k,U),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)),this.lang_to_token=ee=>ee}_build_translation_inputs(k,U,ee){return dr(this,k,U,ee)}}class Bt extends _r{}class cr extends dt{}class Gr extends dt{}const Qt="▁";class fr extends dt{padding_side="left";constructor(k,U){super(k,U),this.legacy=U.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new br({replacement:Qt,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(k){if(k===null)return null;if(this.legacy||k.length===0)return super._encode_text(k);let U=super._encode_text(Qt+k.replaceAll(Qt," "));return U.length>1&&U[0]===Qt&&this.special_tokens.includes(U[1])&&(U=U.slice(1)),U}}class es extends dt{}class ur extends dt{}class ls extends dt{}class cs extends dt{}class Dr extends dt{}class Cs extends dt{}class us extends dt{}class sr extends dt{}class Kr extends dt{}function dr(le,k,U,ee){if(!("language_codes"in le)||!Array.isArray(le.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in le)||!(le.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in le)||typeof le.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const se=ee.src_lang,he=ee.tgt_lang;if(!le.language_codes.includes(he))throw new Error(`Target language code "${he}" is not valid. Must be one of: {${le.language_codes.join(", ")}}`);if(se!==void 0){if(!le.language_codes.includes(se))throw new Error(`Source language code "${se}" is not valid. Must be one of: {${le.language_codes.join(", ")}}`);for(const Ce of le.post_processor.config.single)if("SpecialToken"in Ce&&le.languageRegex.test(Ce.SpecialToken.id)){Ce.SpecialToken.id=le.lang_to_token(se);break}}return ee.forced_bos_token_id=le.model.convert_tokens_to_ids([le.lang_to_token(he)])[0],le._call(k,U)}class yr extends dt{constructor(k,U){super(k,U),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)),this.lang_to_token=ee=>ee}_build_translation_inputs(k,U,ee){return dr(this,k,U,ee)}}class ts extends dt{constructor(k,U){super(k,U),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)).map(ee=>ee.slice(2,-2)),this.lang_to_token=ee=>`__${ee}__`}_build_translation_inputs(k,U,ee){return dr(this,k,U,ee)}}class Ss extends dt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(k,{return_timestamps:U=!1,return_language:ee=!1,time_precision:se=null,force_full_sequences:he=!0}={}){if(se===null)throw Error("Must specify time_precision");let Ce=null;const Ke=U==="word";function Xe(){return{language:Ce,timestamp:[null,null],text:""}}const Je=[];let Ue=Xe(),St=0;const gt=this.timestamp_begin,vr=gt+1500;let Kt=[],rr=[],Wt=!1,Nr=null;const rs=new Set(this.all_special_ids);for(const Zt of k){const pr=Zt.tokens,zr=Ke?Zt.token_timestamps:null;let Br=null,ps=gt;if("stride"in Zt){const[xr,Jt,mr]=Zt.stride;if(St-=Jt,Nr=xr-mr,Jt&&(ps=Jt/se+gt),mr)for(let ar=pr.length-1;ar>=0;--ar){const Rr=Number(pr[ar]);if(Rr>=gt){if(Br!==null&&(Rr-gt)*se<Nr)break;Br=Rr}}}let gr=[],ss=[];for(let xr=0;xr<pr.length;++xr){const Jt=Number(pr[xr]);if(rs.has(Jt)){const mr=this.decode([Jt]),ar=p.WHISPER_LANGUAGE_MAPPING.get(mr.slice(2,-2));if(ar!==void 0){if(Ce!==null&&ar!==Ce&&!U){Kt.push(gr);const Rr=this.findLongestCommonSequence(Kt)[0],Ws=this.decode(Rr);Ue.text=Ws,Je.push(Ue),Kt=[],gr=[],Ue=Xe()}Ce=Ue.language=ar}}else if(Jt>=gt&&Jt<=vr){const mr=(Jt-gt)*se+St,ar=(0,a.round)(mr,2);if(Br!==null&&Jt>=Br)Wt=!0;else if(Wt||Kt.length>0&&Jt<ps)Wt=!1;else if(Ue.timestamp[0]===null)Ue.timestamp[0]=ar;else if(ar!==Ue.timestamp[0]){Ue.timestamp[1]=ar,Kt.push(gr),Ke&&rr.push(ss);const[Rr,Ws]=this.findLongestCommonSequence(Kt,rr),An=this.decode(Rr);Ue.text=An,Ke&&(Ue.words=this.collateWordTimestamps(Rr,Ws,Ce)),Je.push(Ue),Kt=[],gr=[],rr=[],ss=[],Ue=Xe()}}else if(gr.push(Jt),Ke){let mr=(0,a.round)(zr[xr]+St,2),ar;if(xr+1<zr.length){ar=(0,a.round)(zr[xr+1]+St,2);const Rr=this.decode([Jt]);x.test(Rr)&&(ar=(0,a.round)(Math.min(mr+se,ar),2))}else ar=null;ss.push([mr,ar])}}if("stride"in Zt){const[xr,Jt,mr]=Zt.stride;St+=xr-mr}gr.length>0?(Kt.push(gr),Ke&&rr.push(ss)):Kt.every(xr=>xr.length===0)&&(Ue=Xe(),Kt=[],gr=[],rr=[],ss=[])}if(Kt.length>0){if(he&&U)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[Zt,pr]=this.findLongestCommonSequence(Kt,rr),zr=this.decode(Zt);Ue.text=zr,Ke&&(Ue.words=this.collateWordTimestamps(Zt,pr,Ce)),Je.push(Ue)}let Ir=Object.create(null);const qr=Je.map(Zt=>Zt.text).join("");if(U||ee){for(let Zt=0;Zt<Je.length;++Zt){const pr=Je[Zt];U||delete pr.timestamp,ee||delete pr.language}if(Ke){const Zt=[];for(const pr of Je)for(const zr of pr.words)Zt.push(zr);Ir={chunks:Zt}}else Ir={chunks:Je}}return[qr,Ir]}findLongestCommonSequence(k,U=null){let ee=k[0],se=ee.length,he=[];const Ce=Array.isArray(U)&&U.length>0;let Ke=Ce?[]:null,Xe=Ce?U[0]:null;for(let Je=1;Je<k.length;++Je){const Ue=k[Je];let St=0,gt=[se,se,0,0];const tr=Ue.length;for(let Ir=1;Ir<se+tr;++Ir){const qr=Math.max(0,se-Ir),Zt=Math.min(se,se+tr-Ir),pr=ee.slice(qr,Zt),zr=Math.max(0,Ir-se),Br=Math.min(tr,Ir),ps=Ue.slice(zr,Br);if(pr.length!==ps.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let gr;Ce?gr=pr.filter((Jt,mr)=>Jt===ps[mr]&&Xe[qr+mr]<=U[Je][zr+mr]).length:gr=pr.filter((Jt,mr)=>Jt===ps[mr]).length;const ss=Ir/1e4,xr=gr/Ir+ss;gr>1&&xr>St&&(St=xr,gt=[qr,Zt,zr,Br])}const[vr,Kt,rr,Wt]=gt,Nr=Math.floor((Kt+vr)/2),rs=Math.floor((Wt+rr)/2);he.push(...ee.slice(0,Nr)),ee=Ue.slice(rs),se=ee.length,Ce&&(Ke.push(...Xe.slice(0,Nr)),Xe=U[Je].slice(rs))}return he.push(...ee),Ce?(Ke.push(...Xe),[he,Ke]):[he,[]]}collateWordTimestamps(k,U,ee){const[se,he,Ce]=this.combineTokensIntoWords(k,ee),Ke=[];for(let Xe=0;Xe<se.length;++Xe){const Je=Ce[Xe];Ke.push({text:se[Xe],timestamp:[U[Je.at(0)][0],U[Je.at(-1)][1]]})}return Ke}combineTokensIntoWords(k,U,ee=`"'“¡¿([{-`,se=`"'.。,，!！?？:：”)]}、`){U=U??"english";let he,Ce,Ke;return["chinese","japanese","thai","lao","myanmar"].includes(U)?[he,Ce,Ke]=this.splitTokensOnUnicode(k):[he,Ce,Ke]=this.splitTokensOnSpaces(k),this.mergePunctuations(he,Ce,Ke,ee,se)}decode(k,U){let ee;return U?.decode_with_timestamps?(k instanceof i.Tensor&&(k=v(k)),ee=this.decodeWithTimestamps(k,U)):ee=super.decode(k,U),ee}decodeWithTimestamps(k,U){const ee=U?.time_precision??.02,se=Array.from(this.all_special_ids).at(-1)+1;let he=[[]];for(let Ce of k)if(Ce=Number(Ce),Ce>=se){const Ke=((Ce-se)*ee).toFixed(2);he.push(`<|${Ke}|>`),he.push([])}else he[he.length-1].push(Ce);return he=he.map(Ce=>typeof Ce=="string"?Ce:super.decode(Ce,U)),he.join("")}splitTokensOnUnicode(k){const U=this.decode(k,{decode_with_timestamps:!0}),ee="�",se=[],he=[],Ce=[];let Ke=[],Xe=[],Je=0;for(let Ue=0;Ue<k.length;++Ue){const St=k[Ue];Ke.push(St),Xe.push(Ue);const gt=this.decode(Ke,{decode_with_timestamps:!0});(!gt.includes(ee)||U[Je+gt.indexOf(ee)]===ee)&&(se.push(gt),he.push(Ke),Ce.push(Xe),Ke=[],Xe=[],Je+=gt.length)}return[se,he,Ce]}splitTokensOnSpaces(k){const[U,ee,se]=this.splitTokensOnUnicode(k),he=[],Ce=[],Ke=[],Xe=new RegExp(`^[${E}]$`,"gu");for(let Je=0;Je<U.length;++Je){const Ue=U[Je],St=ee[Je],gt=se[Je],tr=St[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),vr=Ue.startsWith(" "),Kt=Ue.trim(),rr=Xe.test(Kt);if(tr||vr||rr||he.length===0)he.push(Ue),Ce.push(St),Ke.push(gt);else{const Wt=he.length-1;he[Wt]+=Ue,Ce[Wt].push(...St),Ke[Wt].push(...gt)}}return[he,Ce,Ke]}mergePunctuations(k,U,ee,se,he){const Ce=structuredClone(k),Ke=structuredClone(U),Xe=structuredClone(ee);let Je=Ce.length-2,Ue=Ce.length-1;for(;Je>=0;)Ce[Je].startsWith(" ")&&se.includes(Ce[Je].trim())?(Ce[Ue]=Ce[Je]+Ce[Ue],Ke[Ue]=(0,n.mergeArrays)(Ke[Je],Ke[Ue]),Xe[Ue]=(0,n.mergeArrays)(Xe[Je],Xe[Ue]),Ce[Je]="",Ke[Je]=[],Xe[Je]=[]):Ue=Je,--Je;for(Je=0,Ue=1;Ue<Ce.length;)!Ce[Je].endsWith(" ")&&he.includes(Ce[Ue])?(Ce[Je]+=Ce[Ue],Ke[Je]=(0,n.mergeArrays)(Ke[Je],Ke[Ue]),Xe[Je]=(0,n.mergeArrays)(Xe[Je],Xe[Ue]),Ce[Ue]="",Ke[Ue]=[],Xe[Ue]=[]):Je=Ue,++Ue;return[Ce.filter(St=>St),Ke.filter(St=>St.length>0),Xe.filter(St=>St.length>0)]}}class Hr extends dt{}class Ds extends dt{}class Lr extends dt{}class Le extends dt{constructor(k,U){super(k,U),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(ee=>this.languageRegex.test(ee)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(k){if(k===null)return null;const[U,...ee]=k.trim().split(this.languageRegex);if(ee.length===0)return super._encode_text(U);if(ee.length===2){const[se,he]=ee;return this.supported_language_codes.includes(se)||console.warn(`Unsupported language code "${se}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,n.mergeArrays)([se],super._encode_text(he))}}}class Re extends dt{}class rt extends dt{}class Xt extends dt{}class Ls extends dt{}class $s extends dt{}class zs extends dt{constructor(k,U){super(k,U),this.decoder=new ht({})}}class ds extends dt{}class rn extends dt{}class sn extends dt{}class In{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:Ge,DistilBertTokenizer:me,CamembertTokenizer:Se,DebertaTokenizer:C,DebertaV2Tokenizer:X,BertTokenizer:Es,HerbertTokenizer:N,ConvBertTokenizer:J,RoFormerTokenizer:ne,XLMTokenizer:tt,ElectraTokenizer:lt,MobileBertTokenizer:Tt,SqueezeBertTokenizer:Ps,AlbertTokenizer:Ut,GPT2Tokenizer:Ct,BartTokenizer:$t,MBartTokenizer:_r,MBart50Tokenizer:Bt,RobertaTokenizer:cr,WhisperTokenizer:Ss,CodeGenTokenizer:Hr,CLIPTokenizer:Ds,SiglipTokenizer:Lr,MarianTokenizer:Le,BloomTokenizer:Gr,NllbTokenizer:yr,M2M100Tokenizer:ts,LlamaTokenizer:fr,CodeLlamaTokenizer:es,XLMRobertaTokenizer:ur,MPNetTokenizer:ls,FalconTokenizer:cs,GPTNeoXTokenizer:Dr,EsmTokenizer:Cs,Wav2Vec2CTCTokenizer:Re,BlenderbotTokenizer:rt,BlenderbotSmallTokenizer:Xt,SpeechT5Tokenizer:Ls,NougatTokenizer:$s,VitsTokenizer:zs,Qwen2Tokenizer:us,GemmaTokenizer:sr,Grok1Tokenizer:Kr,CohereTokenizer:ds,MgpstrTokenizer:rn,Ernie4_5_Tokenizer:sn,PreTrainedTokenizer:dt};static async from_pretrained(k,{progress_callback:U=null,config:ee=null,cache_dir:se=null,local_files_only:he=!1,revision:Ce="main",legacy:Ke=null}={}){const[Xe,Je]=await d(k,{progress_callback:U,config:ee,cache_dir:se,local_files_only:he,revision:Ce,legacy:Ke}),Ue=Je.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let St=this.TOKENIZER_CLASS_MAPPING[Ue];return St||(console.warn(`Unknown tokenizer class "${Ue}", attempting to construct from base class.`),St=dt),new St(Xe,Je)}}},"./src/utils/audio.js":(e,r,t)=>{t.r(r),t.d(r,{RawAudio:()=>H,hamming:()=>u,hanning:()=>d,mel_filter_bank:()=>$,read_audio:()=>c,spectrogram:()=>S,window_function:()=>z});var s=t("./src/utils/hub.js"),n=t("./src/utils/maths.js"),o=t("./src/utils/core.js"),a=t("./src/env.js"),i=t("./src/utils/tensor.js"),l=t("?7992");async function c(D,Z){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const Q=await(await(0,s.getFile)(D)).arrayBuffer(),Y=new AudioContext({sampleRate:Z});typeof Z>"u"&&console.warn(`No sampling rate provided, using default of ${Y.sampleRate}Hz.`);const re=await Y.decodeAudioData(Q);let te;if(re.numberOfChannels===2){const ce=Math.sqrt(2),ue=re.getChannelData(0),B=re.getChannelData(1);te=new Float32Array(ue.length);for(let F=0;F<re.length;++F)te[F]=ce*(ue[F]+B[F])/2}else te=re.getChannelData(0);return te}function p(D,Z){if(D<1)return new Float64Array;if(D===1)return new Float64Array([1]);const Q=1-Z,Y=2*Math.PI/(D-1),re=new Float64Array(D);for(let te=0;te<D;++te)re[te]=Z-Q*Math.cos(te*Y);return re}function d(D){return p(D,.5)}function u(D){return p(D,.54)}const f={htk:D=>2595*Math.log10(1+D/700),kaldi:D=>1127*Math.log(1+D/700),slaney:(D,Z=1e3,Q=15,Y=27/Math.log(6.4))=>D>=Z?Q+Math.log(D/Z)*Y:3*D/200};function _(D,Z="htk"){const Q=f[Z];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof D=="number"?Q(D):D.map(Y=>Q(Y))}const v={htk:D=>700*(10**(D/2595)-1),kaldi:D=>700*(Math.exp(D/1127)-1),slaney:(D,Z=1e3,Q=15,Y=Math.log(6.4)/27)=>D>=Q?Z*Math.exp(Y*(D-Q)):200*D/3};function I(D,Z="htk"){const Q=v[Z];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof D=="number"?Q(D):D.map(Y=>Q(Y))}function b(D,Z){const Q=Float64Array.from({length:Z.length-1},(ce,ue)=>Z[ue+1]-Z[ue]),Y=Array.from({length:D.length},()=>new Array(Z.length));for(let ce=0;ce<D.length;++ce){const ue=Y[ce];for(let B=0;B<Z.length;++B)ue[B]=Z[B]-D[ce]}const re=Z.length-2,te=Array.from({length:re},()=>new Array(D.length));for(let ce=0;ce<D.length;++ce){const ue=Y[ce];for(let B=0;B<re;++B){const F=-ue[B]/Q[B],G=ue[B+2]/Q[B+1];te[B][ce]=Math.max(0,Math.min(F,G))}}return te}function M(D,Z,Q){const Y=(Z-D)/(Q-1);return Float64Array.from({length:Q},(re,te)=>D+Y*te)}function $(D,Z,Q,Y,re,te=null,ce="htk",ue=!1){if(te!==null&&te!=="slaney")throw new Error('norm must be one of null or "slaney"');if(D<2)throw new Error(`Require num_frequency_bins: ${D} >= 2`);if(Q>Y)throw new Error(`Require min_frequency: ${Q} <= max_frequency: ${Y}`);const B=_(Q,ce),F=_(Y,ce),G=M(B,F,Z+2);let j=I(G,ce),ae;if(ue){const ve=re/((D-1)*2);ae=_(Float64Array.from({length:D},(Fe,Qe)=>Qe*ve),ce),j=G}else ae=M(0,Math.floor(re/2),D);const Ae=b(ae,j);if(te!==null&&te==="slaney")for(let ve=0;ve<Z;++ve){const Fe=Ae[ve],Qe=2/(j[ve+2]-j[ve]);for(let xe=0;xe<D;++xe)Fe[xe]*=Qe}return Ae}function y(D,Z,Q){const Y=new D.constructor(D.length+Z+Q),re=D.length-1;for(let te=0;te<D.length;++te)Y[Z+te]=D[te];for(let te=1;te<=Z;++te)Y[Z-te]=D[(0,o.calculateReflectOffset)(te,re)];for(let te=1;te<=Q;++te)Y[re+Z+te]=D[(0,o.calculateReflectOffset)(re-te,re)];return Y}function T(D,Z,Q,Y,re){if(Q<=0)throw new Error("reference must be greater than zero");if(Y<=0)throw new Error("min_value must be greater than zero");Q=Math.max(Y,Q);const te=Math.log10(Q);for(let ce=0;ce<D.length;++ce)D[ce]=Z*Math.log10(Math.max(Y,D[ce])-te);if(re!==null){if(re<=0)throw new Error("db_range must be greater than zero");const ce=(0,n.max)(D)[0]-re;for(let ue=0;ue<D.length;++ue)D[ue]=Math.max(D[ue],ce)}return D}function E(D,Z=1,Q=1e-5,Y=null){return T(D,20,Z,Q,Y)}function x(D,Z=1,Q=1e-10,Y=null){return T(D,10,Z,Q,Y)}async function S(D,Z,Q,Y,{fft_length:re=null,power:te=1,center:ce=!0,pad_mode:ue="reflect",onesided:B=!0,preemphasis:F=null,preemphasis_htk_flavor:G=!0,mel_filters:j=null,mel_floor:ae=1e-10,log_mel:Ae=null,reference:ve=1,min_value:Fe=1e-10,db_range:Qe=null,remove_dc_offset:xe=null,min_num_frames:q=null,max_num_frames:de=null,do_pad:W=!0,transpose:fe=!1}={}){const ke=Z.length;if(re===null&&(re=Q),Q>re)throw Error(`frame_length (${Q}) may not be larger than fft_length (${re})`);if(ke!==Q)throw new Error(`Length of the window (${ke}) must equal frame_length (${Q})`);if(Y<=0)throw new Error("hop_length must be greater than zero");if(te===null&&j!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(!G)throw new Error("`preemphasis_htk_flavor=false` is not currently supported.");if(ce){if(ue!=="reflect")throw new Error(`pad_mode="${ue}" not implemented yet.`);const et=Math.floor((re-1)/2)+1;D=y(D,et,et)}let ye=Math.floor(1+Math.floor((D.length-Q)/Y));q!==null&&ye<q&&(ye=q);const ge=B?Math.floor(re/2)+1:re;let Ee=ye,we=ye;de!==null&&(de>ye?W&&(we=de):we=Ee=de);const Ie=new n.FFT(re),Oe=new Float64Array(re),We=new Float64Array(Ie.outputBufferSize),be=new Float32Array(ge*we);for(let et=0;et<Ee;++et){const qe=et*Y,Ye=Math.min(D.length-qe,Q);Ye!==Q&&Oe.fill(0,0,Q);for(let Ze=0;Ze<Ye;++Ze)Oe[Ze]=D[qe+Ze];if(xe){let Ze=0;for(let It=0;It<Ye;++It)Ze+=Oe[It];const Pt=Ze/Ye;for(let It=0;It<Ye;++It)Oe[It]-=Pt}if(F!==null){for(let Ze=Ye-1;Ze>=1;--Ze)Oe[Ze]-=F*Oe[Ze-1];Oe[0]*=1-F}for(let Ze=0;Ze<Z.length;++Ze)Oe[Ze]*=Z[Ze];Ie.realTransform(We,Oe);for(let Ze=0;Ze<ge;++Ze){const Pt=Ze<<1;be[Ze*we+et]=We[Pt]**2+We[Pt+1]**2}}if(te!==null&&te!==2){const et=te/2;for(let qe=0;qe<be.length;++qe)be[qe]**=et}const st=j.length;let Ne=await(0,i.matmul)(new i.Tensor("float32",j.flat(),[st,ge]),new i.Tensor("float32",be,[ge,we]));fe&&(Ne=Ne.transpose(1,0));const je=Ne.data;for(let et=0;et<je.length;++et)je[et]=Math.max(ae,je[et]);if(te!==null&&Ae!==null){const et=Math.min(je.length,Ee*st);switch(Ae){case"log":for(let qe=0;qe<et;++qe)je[qe]=Math.log(je[qe]);break;case"log10":for(let qe=0;qe<et;++qe)je[qe]=Math.log10(je[qe]);break;case"dB":if(te===1)E(je,ve,Fe,Qe);else if(te===2)x(je,ve,Fe,Qe);else throw new Error(`Cannot use log_mel option '${Ae}' with power ${te}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ae}'`)}}return Ne}function z(D,Z,{periodic:Q=!0,frame_length:Y=null,center:re=!0}={}){const te=Q?D+1:D;let ce;switch(Z){case"boxcar":ce=new Float64Array(te).fill(1);break;case"hann":case"hann_window":ce=d(te);break;case"hamming":ce=u(te);break;case"povey":ce=d(te).map(ue=>Math.pow(ue,.85));break;default:throw new Error(`Unknown window type ${Z}.`)}if(Q&&(ce=ce.subarray(0,D)),Y===null)return ce;if(D>Y)throw new Error(`Length of the window (${D}) may not be larger than frame_length (${Y})`);return ce}function O(D,Z){let Q=44;const Y=new ArrayBuffer(Q+D.length*4),re=new DataView(Y);K(re,0,"RIFF"),re.setUint32(4,36+D.length*4,!0),K(re,8,"WAVE"),K(re,12,"fmt "),re.setUint32(16,16,!0),re.setUint16(20,3,!0),re.setUint16(22,1,!0),re.setUint32(24,Z,!0),re.setUint32(28,Z*4,!0),re.setUint16(32,4,!0),re.setUint16(34,32,!0),K(re,36,"data"),re.setUint32(40,D.length*4,!0);for(let te=0;te<D.length;++te,Q+=4)re.setFloat32(Q,D[te],!0);return Y}function K(D,Z,Q){for(let Y=0;Y<Q.length;++Y)D.setUint8(Z+Y,Q.charCodeAt(Y))}class H{constructor(Z,Q){this.audio=Z,this.sampling_rate=Q}toWav(){return O(this.audio,this.sampling_rate)}toBlob(){const Z=this.toWav();return new Blob([Z],{type:"audio/wav"})}async save(Z){let Q;if(a.apis.IS_BROWSER_ENV){if(a.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");Q=o.saveBlob}else if(a.apis.IS_FS_AVAILABLE)Q=async(Y,re)=>{let te=await re.arrayBuffer();l.writeFileSync(Y,Buffer.from(te))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await Q(Z,this.toBlob())}}},"./src/utils/constants.js":(e,r,t)=>{t.r(r),t.d(r,{CHAT_TEMPLATE_NAME:()=>l,CONFIG_NAME:()=>n,FEATURE_EXTRACTOR_NAME:()=>o,GENERATION_CONFIG_NAME:()=>c,GITHUB_ISSUE_URL:()=>s,IMAGE_PROCESSOR_NAME:()=>a,PROCESSOR_NAME:()=>i});const s="https://github.com/huggingface/transformers.js/issues/new/choose",n="config.json",o="preprocessor_config.json",a=o,i="processor_config.json",l="chat_template.jinja",c="generation_config.json"},"./src/utils/core.js":(e,r,t)=>{t.r(r),t.d(r,{calculateDimensions:()=>c,calculateReflectOffset:()=>f,count:()=>b,dispatchCallback:()=>s,escapeRegExp:()=>o,isIntegralNumber:()=>i,isNullishDimension:()=>l,isTypedArray:()=>a,len:()=>I,mergeArrays:()=>d,pick:()=>v,pop:()=>p,product:()=>u,reverseDictionary:()=>n,saveBlob:()=>_});function s(M,$){M&&M($)}function n(M){return Object.fromEntries(Object.entries(M).map(([$,y])=>[y,$]))}function o(M){return M.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function a(M){return M?.prototype?.__proto__?.constructor?.name==="TypedArray"}function i(M){return Number.isInteger(M)||typeof M=="bigint"}function l(M){return M==null||M===-1}function c(M){const $=[];let y=M;for(;Array.isArray(y);)$.push(y.length),y=y[0];return $}function p(M,$,y=void 0){const T=M[$];if(T!==void 0)return delete M[$],T;if(y===void 0)throw Error(`Key ${$} does not exist in object.`);return y}function d(...M){return Array.prototype.concat.apply([],M)}function u(...M){return M.reduce(($,y)=>$.flatMap(T=>y.map(E=>[T,E])))}function f(M,$){return Math.abs((M+$)%(2*$)-$)}function _(M,$){const y=URL.createObjectURL($),T=document.createElement("a");T.href=y,T.download=M,T.click(),T.remove(),URL.revokeObjectURL(y)}function v(M,$){return Object.assign({},...$.map(y=>{if(M[y]!==void 0)return{[y]:M[y]}}))}function I(M){let $=0;for(const y of M)++$;return $}function b(M,$){let y=0;for(const T of M)T===$&&++y;return y}},"./src/utils/data-structures.js":(e,r,t)=>{t.r(r),t.d(r,{CharTrie:()=>n,DictionarySplitter:()=>l,LRUCache:()=>c,PriorityQueue:()=>s,TokenLattice:()=>a});class s{constructor(d=(f,_)=>f>_,u=1/0){this._heap=[],this._comparator=d,this._maxSize=u}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...d){return this.extend(d)}extend(d){for(const u of d)if(this.size<this._maxSize)this._heap.push(u),this._siftUp();else{const f=this._smallest();this._comparator(u,this._heap[f])&&(this._heap[f]=u,this._siftUpFrom(f))}return this.size}pop(){const d=this.peek(),u=this.size-1;return u>0&&this._swap(0,u),this._heap.pop(),this._siftDown(),d}replace(d){const u=this.peek();return this._heap[0]=d,this._siftDown(),u}_parent(d){return(d+1>>>1)-1}_left(d){return(d<<1)+1}_right(d){return d+1<<1}_greater(d,u){return this._comparator(this._heap[d],this._heap[u])}_swap(d,u){const f=this._heap[d];this._heap[d]=this._heap[u],this._heap[u]=f}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(d){for(;d>0&&this._greater(d,this._parent(d));)this._swap(d,this._parent(d)),d=this._parent(d)}_siftDown(){let d=0;for(;this._left(d)<this.size&&this._greater(this._left(d),d)||this._right(d)<this.size&&this._greater(this._right(d),d);){const u=this._right(d)<this.size&&this._greater(this._right(d),this._left(d))?this._right(d):this._left(d);this._swap(d,u),d=u}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class n{constructor(){this.root=o.default()}extend(d){for(const u of d)this.push(u)}push(d){let u=this.root;for(const f of d){let _=u.children.get(f);_===void 0&&(_=o.default(),u.children.set(f,_)),u=_}u.isLeaf=!0}*commonPrefixSearch(d){let u=this.root;if(u===void 0)return;let f="";for(const _ of d){if(f+=_,u=u.children.get(_),u===void 0)return;u.isLeaf&&(yield f)}}}class o{constructor(d,u){this.isLeaf=d,this.children=u}static default(){return new o(!1,new Map)}}class a{constructor(d,u,f){this.chars=Array.from(d),this.len=this.chars.length,this.bosTokenId=u,this.eosTokenId=f,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const _=new i(this.bosTokenId,0,0,0,0),v=new i(this.eosTokenId,1,this.len,0,0);this.nodes.push(_.clone()),this.nodes.push(v.clone()),this.beginNodes[this.len].push(v),this.endNodes[0].push(_)}insert(d,u,f,_){const v=this.nodes.length,I=new i(_,v,d,u,f);this.beginNodes[d].push(I),this.endNodes[d+u].push(I),this.nodes.push(I)}viterbi(){const d=this.len;let u=0;for(;u<=d;){if(this.beginNodes[u].length==0)return[];for(let b of this.beginNodes[u]){b.prev=null;let M=0,$=null;for(let y of this.endNodes[u]){const T=y.backtraceScore+b.score;($===null||T>M)&&($=y.clone(),M=T)}if($!==null)b.prev=$,b.backtraceScore=M;else return[]}++u}const f=[],v=this.beginNodes[d][0].prev;if(v===null)return[];let I=v.clone();for(;I.prev!==null;)f.push(I.clone()),I=I.clone().prev.clone();return f.reverse(),f}piece(d){return this.chars.slice(d.pos,d.pos+d.length).join("")}tokens(){return this.viterbi().map(u=>this.piece(u))}tokenIds(){return this.viterbi().map(u=>u.tokenId)}}class i{constructor(d,u,f,_,v){this.tokenId=d,this.nodeId=u,this.pos=f,this.length=_,this.score=v,this.prev=null,this.backtraceScore=0}clone(){const d=new i(this.tokenId,this.nodeId,this.pos,this.length,this.score);return d.prev=this.prev,d.backtraceScore=this.backtraceScore,d}}class l{constructor(d){this.trie=this._buildTrie(d)}_buildTrie(d){const u=Object.create(null);for(const f of d){let _=u;for(let v=0;v<f.length;++v)_=_[f[v]]??=Object.create(null);_.end=f}return u}split(d){const u=[],f=d.length;let _=0,v=0;for(;v<f;){let I=this.trie,b=null,M=v;for(;M<f&&(I=I[d[M]]);)I.end&&(b=I.end),++M;b?(v>_&&u.push(d.slice(_,v)),u.push(b),v+=b.length,_=v):++v}return _<f&&u.push(d.slice(_)),u}}class c{constructor(d){this.capacity=d,this.cache=new Map}get(d){if(!this.cache.has(d))return;const u=this.cache.get(d);return this.cache.delete(d),this.cache.set(d,u),u}put(d,u){this.cache.has(d)&&this.cache.delete(d),this.cache.set(d,u),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(e,r,t)=>{t.r(r),t.d(r,{DEVICE_TYPES:()=>s});const s=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(e,r,t)=>{t.r(r),t.d(r,{DATA_TYPES:()=>a,DEFAULT_DEVICE_DTYPE_MAPPING:()=>i,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>l,isWebGpuFp16Supported:()=>o});var s=t("./src/env.js"),n=t("./src/utils/devices.js");const o=function(){let c;return async function(){if(c===void 0)if(!s.apis.IS_WEBGPU_AVAILABLE)c=!1;else try{c=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{c=!1}return c}}(),a=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),i=Object.freeze({[n.DEVICE_TYPES.wasm]:a.q8}),l=Object.freeze({[a.fp32]:"",[a.fp16]:"_fp16",[a.int8]:"_int8",[a.uint8]:"_uint8",[a.q8]:"_quantized",[a.q4]:"_q4",[a.q4f16]:"_q4f16",[a.bnb4]:"_bnb4"})},"./src/utils/generic.js":(e,r,t)=>{t.r(r),t.d(r,{Callable:()=>s});const s=class{constructor(){let n=function(...o){return n._call(...o)};return Object.setPrototypeOf(n,new.target.prototype)}_call(...n){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(e,r,t)=>{t.r(r),t.d(r,{MAX_EXTERNAL_DATA_CHUNKS:()=>i,getFile:()=>f,getModelFile:()=>M,getModelJSON:()=>y,getModelText:()=>$});var s=t("?7992"),n=t("?5af5"),o=t("./src/env.js"),a=t("./src/utils/core.js");const i=100,l={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class c{constructor(S){if(this.filePath=S,this.headers=new Headers,this.exists=s.existsSync(S),this.exists){this.status=200,this.statusText="OK";let z=s.statSync(S);this.headers.set("content-length",z.size.toString()),this.updateContentType();const O=s.createReadStream(S);this.body=new ReadableStream({start(K){O.on("data",H=>K.enqueue(H)),O.on("end",()=>K.close()),O.on("error",H=>K.error(H))},cancel(){O.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const S=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",l[S]??"application/octet-stream")}clone(){let S=new c(this.filePath);return S.exists=this.exists,S.status=this.status,S.statusText=this.statusText,S.headers=new Headers(this.headers),S}async arrayBuffer(){return(await s.promises.readFile(this.filePath)).buffer}async blob(){const S=await s.promises.readFile(this.filePath);return new Blob([S],{type:this.headers.get("content-type")})}async text(){return await s.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function p(x,S=null,z=null){let O;try{O=new URL(x)}catch{return!1}return!(S&&!S.includes(O.protocol)||z&&!z.includes(O.hostname))}const d=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function u(x){return!(!d.test(x)||x.includes("..")||x.includes("--")||x.endsWith(".git")||x.endsWith(".ipynb"))}async function f(x){if(o.env.useFS&&!p(x,["http:","https:","blob:"]))return new c(x instanceof URL?x.protocol==="file:"?x.pathname:x.toString():x);if(typeof process<"u"&&process?.release?.name==="node"){const S=!!Fc?.TESTING_REMOTELY,z=o.env.version,O=new Headers;if(O.set("User-Agent",`transformers.js/${z}; is_ci/${S};`),p(x,["http:","https:"],["huggingface.co","hf.co"])){const H=Fc?.HF_TOKEN??Fc?.HF_ACCESS_TOKEN;H&&O.set("Authorization",`Bearer ${H}`)}return fetch(x,{headers:O})}else return fetch(x)}const _={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function v(x,S,z){if(!z)return null;const O=_[x]??`Error (${x}) occurred while trying to load file`;throw Error(`${O}: "${S}".`)}class I{constructor(S){this.path=S}async match(S){let z=n.join(this.path,S),O=new c(z);if(O.exists)return O}async put(S,z,O=void 0){let K=n.join(this.path,S);try{const H=z.headers.get("Content-Length"),D=parseInt(H??"0");let Z=0;await s.promises.mkdir(n.dirname(K),{recursive:!0});const Q=s.createWriteStream(K),Y=z.body.getReader();for(;;){const{done:re,value:te}=await Y.read();if(re)break;await new Promise((ue,B)=>{Q.write(te,F=>{if(F){B(F);return}ue()})}),Z+=te.length;const ce=D?Z/D*100:0;O?.({progress:ce,loaded:Z,total:D})}Q.close()}catch(H){try{await s.promises.unlink(K)}catch{}throw H}}}async function b(x,...S){for(let z of S)try{let O=await x.match(z);if(O)return O}catch{continue}}async function M(x,S,z=!0,O={},K=!1){if(!o.env.allowLocalModels){if(O.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!o.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,a.dispatchCallback)(O.progress_callback,{status:"initiate",name:x,file:S});let H;if(!H&&o.env.useCustomCache){if(!o.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!o.env.customCache.match||!o.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");H=o.env.customCache}if(!H&&o.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{H=await caches.open("transformers-cache")}catch(ae){console.warn("An error occurred while opening the browser cache:",ae)}}if(!H&&o.env.useFSCache){if(!o.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");H=new I(O.cache_dir??o.env.cacheDir)}const D=O.revision??"main",Z=E(x,S),Q=u(x),Y=Q?E(o.env.localModelPath,Z):Z,re=E(o.env.remoteHost,o.env.remotePathTemplate.replaceAll("{model}",x).replaceAll("{revision}",encodeURIComponent(D)),S);let te;const ce=H instanceof I?D==="main"?Z:E(x,D,S):re;let ue=!1,B;H&&(B=await b(H,Y,ce));const F=B!==void 0;if(B===void 0){if(o.env.allowLocalModels)if(p(Z,["http:","https:"])){if(O.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${Z}.`);if(!o.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${Z}.`)}else try{B=await f(Y),te=Y}catch(Ae){console.warn(`Unable to load from local path "${Y}": "${Ae}"`)}if(B===void 0||B.status===404){if(O.local_files_only||!o.env.allowRemoteModels){if(z)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${Y}".`);return null}if(!Q)throw Error(`Local file missing at "${Y}" and download aborted due to invalid model ID "${x}".`);if(B=await f(re),B.status!==200)return v(B.status,re,z);te=ce}ue=H&&typeof Response<"u"&&B instanceof Response&&B.status===200}(0,a.dispatchCallback)(O.progress_callback,{status:"download",name:x,file:S});let G;if(!(o.apis.IS_NODE_ENV&&K)){let ae;O.progress_callback?F&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ae=new Uint8Array(await B.arrayBuffer()),(0,a.dispatchCallback)(O.progress_callback,{status:"progress",name:x,file:S,progress:100,loaded:ae.length,total:ae.length})):ae=await T(B,Ae=>{(0,a.dispatchCallback)(O.progress_callback,{status:"progress",name:x,file:S,...Ae})}):ae=new Uint8Array(await B.arrayBuffer()),G=ae}if(ue&&te&&await H.match(te)===void 0&&(G?await H.put(te,new Response(G,{headers:B.headers})).catch(ae=>{console.warn(`Unable to add response to browser cache: ${ae}.`)}):await H.put(te,B,O.progress_callback)),(0,a.dispatchCallback)(O.progress_callback,{status:"done",name:x,file:S}),G){if(!o.apis.IS_NODE_ENV&&K)throw new Error("Cannot return path in a browser environment.");return G}if(B instanceof c)return B.filePath;const j=await H?.match(te);if(j instanceof c)return j.filePath;if(j instanceof Response)return new Uint8Array(await j.arrayBuffer());if(typeof j=="string")return j;throw new Error("Unable to get model file path or buffer.")}async function $(x,S,z=!0,O={}){const K=await M(x,S,z,O,!1);return K===null?null:new TextDecoder("utf-8").decode(K)}async function y(x,S,z=!0,O={}){const K=await $(x,S,z,O);return K===null?{}:JSON.parse(K)}async function T(x,S){const z=x.headers.get("Content-Length");z===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let O=parseInt(z??"0"),K=new Uint8Array(O),H=0;const D=x.body.getReader();async function Z(){const{done:Q,value:Y}=await D.read();if(Q)return;const re=H+Y.length;if(re>O){O=re;const ce=new Uint8Array(O);ce.set(K),K=ce}K.set(Y,H),H=re;const te=H/O*100;return S({progress:te,loaded:H,total:O}),Z()}return await Z(),K}function E(...x){return x=x.map((S,z)=>(z&&(S=S.replace(new RegExp("^/"),"")),z!==x.length-1&&(S=S.replace(new RegExp("/$"),"")),S)),x.join("/")}},"./src/utils/image.js":(e,r,t)=>{t.r(r),t.d(r,{RawImage:()=>_,load_image:()=>v});var s=t("./src/utils/core.js"),n=t("./src/utils/hub.js"),o=t("./src/env.js"),a=t("./src/utils/tensor.js"),i=t("?2b25");let l,c,p;const d=o.apis.IS_BROWSER_ENV||o.apis.IS_WEBWORKER_ENV;if(d)l=(I,b)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(I,b)},p=self.createImageBitmap,c=self.ImageData;else if(i)p=async I=>{const M=(await I.metadata()).channels,{data:$,info:y}=await I.rotate().raw().toBuffer({resolveWithObject:!0}),T=new _(new Uint8ClampedArray($),y.width,y.height,y.channels);return M!==void 0&&M!==y.channels&&T.convert(M),T};else throw new Error("Unable to load image processing library.");const u={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},f=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class _{constructor(b,M,$,y){this.data=b,this.width=M,this.height=$,this.channels=y}get size(){return[this.width,this.height]}static async read(b){if(b instanceof _)return b;if(typeof b=="string"||b instanceof URL)return await this.fromURL(b);if(b instanceof Blob)return await this.fromBlob(b);if(typeof HTMLCanvasElement<"u"&&b instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&b instanceof OffscreenCanvas)return this.fromCanvas(b);throw new Error(`Unsupported input type: ${typeof b}`)}static fromCanvas(b){if(!d)throw new Error("fromCanvas() is only supported in browser environments.");const $=b.getContext("2d").getImageData(0,0,b.width,b.height).data;return new _($,b.width,b.height,4)}static async fromURL(b){const M=await(0,n.getFile)(b);if(M.status!==200)throw new Error(`Unable to read image from "${b}" (${M.status} ${M.statusText})`);const $=await M.blob();return this.fromBlob($)}static async fromBlob(b){if(d){const M=await p(b),$=l(M.width,M.height).getContext("2d");return $.drawImage(M,0,0),new this($.getImageData(0,0,M.width,M.height).data,M.width,M.height,4)}else{const M=i(await b.arrayBuffer());return await p(M)}}static fromTensor(b,M="CHW"){if(b.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${b.dims.length} dimensions.`);if(M==="CHW")b=b.transpose(1,2,0);else if(M!=="HWC")throw new Error(`Unsupported channel format: ${M}`);if(!(b.data instanceof Uint8ClampedArray||b.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${b.type}`);switch(b.dims[2]){case 1:case 2:case 3:case 4:return new _(b.data,b.dims[1],b.dims[0],b.dims[2]);default:throw new Error(`Unsupported number of channels: ${b.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const b=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let M=0,$=0;M<this.data.length;M+=this.channels){const y=this.data[M],T=this.data[M+1],E=this.data[M+2];b[$++]=Math.round(.2989*y+.587*T+.114*E)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(b,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const b=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let M=0,$=0;M<this.data.length;++M)b[$++]=this.data[M],b[$++]=this.data[M],b[$++]=this.data[M];break;case 4:for(let M=0,$=0;M<this.data.length;M+=4)b[$++]=this.data[M],b[$++]=this.data[M+1],b[$++]=this.data[M+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(b,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const b=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let M=0,$=0;M<this.data.length;++M)b[$++]=this.data[M],b[$++]=this.data[M],b[$++]=this.data[M],b[$++]=255;break;case 3:for(let M=0,$=0;M<this.data.length;M+=3)b[$++]=this.data[M],b[$++]=this.data[M+1],b[$++]=this.data[M+2],b[$++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(b,this.width,this.height,4)}putAlpha(b){if(b.width!==this.width||b.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${b.width}x${b.height}`);if(b.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${b.channels}`);const M=this.data,$=b.data,y=this.width*this.height;if(this.channels===3){const T=new Uint8ClampedArray(y*4);for(let E=0,x=0,S=0;E<y;++E)T[S++]=M[x++],T[S++]=M[x++],T[S++]=M[x++],T[S++]=$[E];return this._update(T,this.width,this.height,4)}else if(this.channels===4){for(let T=0;T<y;++T)M[4*T+3]=$[T];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(b,M,{resample:$=2}={}){if(this.width===b&&this.height===M)return this;let y=u[$]??$;const T=(0,s.isNullishDimension)(b),E=(0,s.isNullishDimension)(M);if(T&&E)return this;if(T?b=M/this.height*this.width:E&&(M=b/this.width*this.height),d){const x=this.channels,S=this.toCanvas(),z=l(b,M).getContext("2d");return z.drawImage(S,0,0,b,M),new _(z.getImageData(0,0,b,M).data,b,M,4).convert(x)}else{let x=this.toSharp();switch(y){case"box":case"hamming":(y==="box"||y==="hamming")&&(console.warn(`Resampling method ${y} is not yet supported. Using bilinear instead.`),y="bilinear");case"nearest":case"bilinear":case"bicubic":x=x.affine([b/this.width,0,0,M/this.height],{interpolator:y});break;case"lanczos":x=x.resize({width:b,height:M,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${y} is not supported.`)}return await p(x)}}async pad([b,M,$,y]){if(b=Math.max(b,0),M=Math.max(M,0),$=Math.max($,0),y=Math.max(y,0),b===0&&M===0&&$===0&&y===0)return this;if(d){const T=this.channels,E=this.toCanvas(),x=this.width+b+M,S=this.height+$+y,z=l(x,S).getContext("2d");return z.drawImage(E,0,0,this.width,this.height,b,$,this.width,this.height),new _(z.getImageData(0,0,x,S).data,x,S,4).convert(T)}else{const T=this.toSharp().extend({left:b,right:M,top:$,bottom:y});return await p(T)}}async crop([b,M,$,y]){if(b=Math.max(b,0),M=Math.max(M,0),$=Math.min($,this.width-1),y=Math.min(y,this.height-1),b===0&&M===0&&$===this.width-1&&y===this.height-1)return this;const T=$-b+1,E=y-M+1;if(d){const x=this.channels,S=this.toCanvas(),z=l(T,E).getContext("2d");return z.drawImage(S,b,M,T,E,0,0,T,E),new _(z.getImageData(0,0,T,E).data,T,E,4).convert(x)}else{const x=this.toSharp().extract({left:b,top:M,width:T,height:E});return await p(x)}}async center_crop(b,M){if(this.width===b&&this.height===M)return this;const $=(this.width-b)/2,y=(this.height-M)/2;if(d){const T=this.channels,E=this.toCanvas(),x=l(b,M).getContext("2d");let S=0,z=0,O=0,K=0;return $>=0?S=$:O=-$,y>=0?z=y:K=-y,x.drawImage(E,S,z,b,M,O,K,b,M),new _(x.getImageData(0,0,b,M).data,b,M,4).convert(T)}else{let T=this.toSharp();if($>=0&&y>=0)T=T.extract({left:Math.floor($),top:Math.floor(y),width:b,height:M});else if($<=0&&y<=0){const E=Math.floor(-y),x=Math.floor(-$);T=T.extend({top:E,left:x,right:b-this.width-x,bottom:M-this.height-E})}else{let E=[0,0],x=0;y<0?(E[0]=Math.floor(-y),E[1]=M-this.height-E[0]):x=Math.floor(y);let S=[0,0],z=0;$<0?(S[0]=Math.floor(-$),S[1]=b-this.width-S[0]):z=Math.floor($),T=T.extend({top:E[0],bottom:E[1],left:S[0],right:S[1]}).extract({left:z,top:x,width:b,height:M})}return await p(T)}}async toBlob(b="image/png",M=1){if(!d)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:b,quality:M})}toTensor(b="CHW"){let M=new a.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(b!=="HWC")if(b==="CHW")M=M.permute(2,0,1);else throw new Error(`Unsupported channel format: ${b}`);return M}toCanvas(){if(!d)throw new Error("toCanvas() is only supported in browser environments.");const b=this.clone().rgba(),M=l(b.width,b.height),$=new c(b.data,b.width,b.height);return M.getContext("2d").putImageData($,0,0),M}split(){const{data:b,width:M,height:$,channels:y}=this,T=b.constructor,E=b.length/y,x=Array.from({length:y},()=>new T(E));for(let S=0;S<E;++S){const z=y*S;for(let O=0;O<y;++O)x[O][S]=b[z+O]}return x.map(S=>new _(S,M,$,1))}_update(b,M,$,y=null){return this.data=b,this.width=M,this.height=$,y!==null&&(this.channels=y),this}clone(){return new _(this.data.slice(),this.width,this.height,this.channels)}convert(b){if(this.channels===b)return this;switch(b){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(b){if(d){if(o.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const M=b.split(".").pop().toLowerCase(),$=f.get(M)??"image/png",y=await this.toBlob($);(0,s.saveBlob)(b,y)}else{if(o.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(b);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(d)throw new Error("toSharp() is only supported in server-side environments.");return i(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const v=_.read.bind(_)},"./src/utils/maths.js":(e,r,t)=>{t.r(r),t.d(r,{FFT:()=>v,bankers_round:()=>M,cos_sim:()=>l,dot:()=>i,dynamic_time_warping:()=>$,interpolate_data:()=>s,log_softmax:()=>a,magnitude:()=>c,max:()=>d,medianFilter:()=>I,min:()=>p,permute_data:()=>n,round:()=>b,softmax:()=>o});function s(y,[T,E,x],[S,z],O="bilinear",K=!1){const H=z/x,D=S/E,Z=new y.constructor(S*z*T),Q=E*x,Y=S*z;for(let re=0;re<S;++re)for(let te=0;te<z;++te){const ce=re*z+te,ue=(te+.5)/H-.5,B=(re+.5)/D-.5;let F=Math.floor(ue),G=Math.floor(B);const j=Math.min(F+1,x-1),ae=Math.min(G+1,E-1);F=Math.max(F,0),G=Math.max(G,0);const Ae=ue-F,ve=B-G,Fe=(1-Ae)*(1-ve),Qe=Ae*(1-ve),xe=(1-Ae)*ve,q=Ae*ve,de=G*x,W=ae*x,fe=de+F,ke=de+j,ye=W+F,ge=W+j;for(let Ee=0;Ee<T;++Ee){const we=Ee*Q;Z[Ee*Y+ce]=Fe*y[we+fe]+Qe*y[we+ke]+xe*y[we+ye]+q*y[we+ge]}}return Z}function n(y,T,E){const x=new Array(E.length),S=new Array(E.length);for(let K=E.length-1,H=1;K>=0;--K)S[K]=H,x[K]=T[E[K]],H*=x[K];const z=E.map((K,H)=>S[E.indexOf(H)]),O=new y.constructor(y.length);for(let K=0;K<y.length;++K){let H=0;for(let D=T.length-1,Z=K;D>=0;--D)H+=Z%T[D]*z[D],Z=Math.floor(Z/T[D]);O[H]=y[K]}return[O,x]}function o(y){const T=d(y)[0],E=y.map(z=>Math.exp(z-T)),x=E.reduce((z,O)=>z+O,0);return E.map(z=>z/x)}function a(y){const T=d(y)[0];let E=0;for(let z=0;z<y.length;++z)E+=Math.exp(y[z]-T);const x=Math.log(E);return y.map(z=>z-T-x)}function i(y,T){let E=0;for(let x=0;x<y.length;++x)E+=y[x]*T[x];return E}function l(y,T){const E=i(y,T),x=c(y),S=c(T);return E/(x*S)}function c(y){return Math.sqrt(y.reduce((T,E)=>T+E*E,0))}function p(y){if(y.length===0)throw Error("Array must not be empty");let T=y[0],E=0;for(let x=1;x<y.length;++x)y[x]<T&&(T=y[x],E=x);return[T,E]}function d(y){if(y.length===0)throw Error("Array must not be empty");let T=y[0],E=0;for(let x=1;x<y.length;++x)y[x]>T&&(T=y[x],E=x);return[T,E]}function u(y){return y>0&&(y&y-1)===0}class f{constructor(T){if(this.size=T|0,this.size<=1||!u(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=T<<1,this.table=new Float64Array(this.size*2);for(let x=0;x<this.table.length;x+=2){const S=Math.PI*x/this.size;this.table[x]=Math.cos(S),this.table[x+1]=-Math.sin(S)}let E=0;for(let x=1;this.size>x;x<<=1)++E;this._width=E%2===0?E-1:E,this._bitrev=new Int32Array(1<<this._width);for(let x=0;x<this._bitrev.length;++x){this._bitrev[x]=0;for(let S=0;S<this._width;S+=2){const z=this._width-S-2;this._bitrev[x]|=(x>>>S&3)<<z}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(T,E){const x=E||new Array(T.length>>>1);for(let S=0;S<T.length;S+=2)x[S>>>1]=T[S];return x}toComplexArray(T,E){const x=E||this.createComplexArray();for(let S=0;S<x.length;S+=2)x[S]=T[S>>>1],x[S+1]=0;return x}transform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._transform4(T,E,1)}realTransform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._realTransform4(T,E,1)}inverseTransform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._transform4(T,E,-1);for(let x=0;x<T.length;++x)T[x]/=this.size}_transform4(T,E,x){const S=this._csize;let O=1<<this._width,K=S/O<<1,H,D;const Z=this._bitrev;if(K===4)for(H=0,D=0;H<S;H+=K,++D){const Y=Z[D];this._singleTransform2(E,T,H,Y,O)}else for(H=0,D=0;H<S;H+=K,++D){const Y=Z[D];this._singleTransform4(E,T,H,Y,O,x)}const Q=this.table;for(O>>=2;O>=2;O>>=2){K=S/O<<1;const Y=K>>>2;for(H=0;H<S;H+=K){const re=H+Y-1;for(let te=H,ce=0;te<re;te+=2,ce+=O){const ue=te,B=ue+Y,F=B+Y,G=F+Y,j=T[ue],ae=T[ue+1],Ae=T[B],ve=T[B+1],Fe=T[F],Qe=T[F+1],xe=T[G],q=T[G+1],de=Q[ce],W=x*Q[ce+1],fe=Ae*de-ve*W,ke=Ae*W+ve*de,ye=Q[2*ce],ge=x*Q[2*ce+1],Ee=Fe*ye-Qe*ge,we=Fe*ge+Qe*ye,Ie=Q[3*ce],Oe=x*Q[3*ce+1],We=xe*Ie-q*Oe,be=xe*Oe+q*Ie,st=j+Ee,Ne=ae+we,je=j-Ee,et=ae-we,qe=fe+We,Ye=ke+be,Ze=x*(fe-We),Pt=x*(ke-be);T[ue]=st+qe,T[ue+1]=Ne+Ye,T[B]=je+Pt,T[B+1]=et-Ze,T[F]=st-qe,T[F+1]=Ne-Ye,T[G]=je-Pt,T[G+1]=et+Ze}}}}_singleTransform2(T,E,x,S,z){const O=T[S],K=T[S+1],H=T[S+z],D=T[S+z+1];E[x]=O+H,E[x+1]=K+D,E[x+2]=O-H,E[x+3]=K-D}_singleTransform4(T,E,x,S,z,O){const K=z*2,H=z*3,D=T[S],Z=T[S+1],Q=T[S+z],Y=T[S+z+1],re=T[S+K],te=T[S+K+1],ce=T[S+H],ue=T[S+H+1],B=D+re,F=Z+te,G=D-re,j=Z-te,ae=Q+ce,Ae=Y+ue,ve=O*(Q-ce),Fe=O*(Y-ue);E[x]=B+ae,E[x+1]=F+Ae,E[x+2]=G+Fe,E[x+3]=j-ve,E[x+4]=B-ae,E[x+5]=F-Ae,E[x+6]=G-Fe,E[x+7]=j+ve}_realTransform4(T,E,x){const S=this._csize;let O=1<<this._width,K=S/O<<1,H,D;const Z=this._bitrev;if(K===4)for(H=0,D=0;H<S;H+=K,++D){const re=Z[D];this._singleRealTransform2(E,T,H,re>>>1,O>>>1)}else for(H=0,D=0;H<S;H+=K,++D){const re=Z[D];this._singleRealTransform4(E,T,H,re>>>1,O>>>1,x)}const Q=this.table;for(O>>=2;O>=2;O>>=2){K=S/O<<1;const re=K>>>1,te=re>>>1,ce=te>>>1;for(H=0;H<S;H+=K)for(let ue=0,B=0;ue<=ce;ue+=2,B+=O){const F=H+ue,G=F+te,j=G+te,ae=j+te,Ae=T[F],ve=T[F+1],Fe=T[G],Qe=T[G+1],xe=T[j],q=T[j+1],de=T[ae],W=T[ae+1],fe=Ae,ke=ve,ye=Q[B],ge=x*Q[B+1],Ee=Fe*ye-Qe*ge,we=Fe*ge+Qe*ye,Ie=Q[2*B],Oe=x*Q[2*B+1],We=xe*Ie-q*Oe,be=xe*Oe+q*Ie,st=Q[3*B],Ne=x*Q[3*B+1],je=de*st-W*Ne,et=de*Ne+W*st,qe=fe+We,Ye=ke+be,Ze=fe-We,Pt=ke-be,It=Ee+je,ht=we+et,br=x*(Ee-je),Wr=x*(we-et);if(T[F]=qe+It,T[F+1]=Ye+ht,T[G]=Ze+Wr,T[G+1]=Pt-br,ue===0){T[j]=qe-It,T[j+1]=Ye-ht;continue}if(ue===ce)continue;const Or=H+te-ue,Zr=H+re-ue;T[Or]=Ze-x*Wr,T[Or+1]=-Pt-x*br,T[Zr]=qe-x*It,T[Zr+1]=-Ye+x*ht}}const Y=S>>>1;for(let re=2;re<Y;re+=2)T[S-re]=T[re],T[S-re+1]=-T[re+1]}_singleRealTransform2(T,E,x,S,z){const O=T[S],K=T[S+z];E[x]=O+K,E[x+1]=0,E[x+2]=O-K,E[x+3]=0}_singleRealTransform4(T,E,x,S,z,O){const K=z*2,H=z*3,D=T[S],Z=T[S+z],Q=T[S+K],Y=T[S+H],re=D+Q,te=D-Q,ce=Z+Y,ue=O*(Z-Y);E[x]=re+ce,E[x+1]=0,E[x+2]=te,E[x+3]=-ue,E[x+4]=re-ce,E[x+5]=0,E[x+6]=te,E[x+7]=ue}}class _{constructor(T){const E=2*(T-1),x=2*(2*T-1),S=2**Math.ceil(Math.log2(x));this.bufferSize=S,this._a=E;const z=new Float64Array(x),O=new Float64Array(S);this._chirpBuffer=new Float64Array(S),this._buffer1=new Float64Array(S),this._buffer2=new Float64Array(S),this._outBuffer1=new Float64Array(S),this._outBuffer2=new Float64Array(S);const K=-2*Math.PI/T,H=Math.cos(K),D=Math.sin(K);for(let Z=0;Z<x>>1;++Z){const Q=(Z+1-T)**2/2,Y=Math.sqrt(H**2+D**2)**Q,re=Q*Math.atan2(D,H),te=2*Z;z[te]=Y*Math.cos(re),z[te+1]=Y*Math.sin(re),O[te]=z[te],O[te+1]=-z[te+1]}this._slicedChirpBuffer=z.subarray(E,x),this._f=new f(S>>1),this._f.transform(this._chirpBuffer,O)}_transform(T,E,x){const S=this._buffer1,z=this._buffer2,O=this._outBuffer1,K=this._outBuffer2,H=this._chirpBuffer,D=this._slicedChirpBuffer,Z=this._a;if(x)for(let Q=0;Q<D.length;Q+=2){const Y=Q+1,re=Q>>1,te=E[re];S[Q]=te*D[Q],S[Y]=te*D[Y]}else for(let Q=0;Q<D.length;Q+=2){const Y=Q+1;S[Q]=E[Q]*D[Q]-E[Y]*D[Y],S[Y]=E[Q]*D[Y]+E[Y]*D[Q]}this._f.transform(O,S);for(let Q=0;Q<H.length;Q+=2){const Y=Q+1;z[Q]=O[Q]*H[Q]-O[Y]*H[Y],z[Y]=O[Q]*H[Y]+O[Y]*H[Q]}this._f.inverseTransform(K,z);for(let Q=0;Q<K.length;Q+=2){const Y=K[Q+Z],re=K[Q+Z+1],te=D[Q],ce=D[Q+1];T[Q]=Y*te-re*ce,T[Q+1]=Y*ce+re*te}}transform(T,E){this._transform(T,E,!1)}realTransform(T,E){this._transform(T,E,!0)}}class v{constructor(T){this.fft_length=T,this.isPowerOfTwo=u(T),this.isPowerOfTwo?(this.fft=new f(T),this.outputBufferSize=2*T):(this.fft=new _(T),this.outputBufferSize=this.fft.bufferSize)}realTransform(T,E){this.fft.realTransform(T,E)}transform(T,E){this.fft.transform(T,E)}}function I(y,T){if(T%2===0||T<=0)throw new Error("Window size must be a positive odd number");const E=new y.constructor(y.length),x=new y.constructor(T),S=Math.floor(T/2);for(let z=0;z<y.length;++z){let O=0;for(let K=-S;K<=S;++K){let H=z+K;H<0?H=Math.abs(H):H>=y.length&&(H=2*(y.length-1)-H),x[O++]=y[H]}x.sort(),E[z]=x[S]}return E}function b(y,T){const E=Math.pow(10,T);return Math.round(y*E)/E}function M(y){const T=Math.round(y);return Math.abs(y)%1===.5?T%2===0?T:T-1:T}function $(y){const T=y.length,E=y[0].length,x=[T+1,E+1],S=Array.from({length:x[0]},()=>Array(x[1]).fill(1/0));S[0][0]=0;const z=Array.from({length:x[0]},()=>Array(x[1]).fill(-1));for(let Z=1;Z<x[1];++Z)for(let Q=1;Q<x[0];++Q){const Y=S[Q-1][Z-1],re=S[Q-1][Z],te=S[Q][Z-1];let ce,ue;Y<re&&Y<te?(ce=Y,ue=0):re<Y&&re<te?(ce=re,ue=1):(ce=te,ue=2),S[Q][Z]=y[Q-1][Z-1]+ce,z[Q][Z]=ue}for(let Z=0;Z<x[1];++Z)z[0][Z]=2;for(let Z=0;Z<x[0];++Z)z[Z][0]=1;let O=T,K=E,H=[],D=[];for(;O>0||K>0;)switch(H.push(O-1),D.push(K-1),z[O][K]){case 0:--O,--K;break;case 1:--O;break;case 2:--K;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${O}, ${K}]. Please file a bug report.`)}return H.reverse(),D.reverse(),[H,D]}},"./src/utils/tensor.js":(e,r,t)=>{t.r(r),t.d(r,{DataTypeMap:()=>a,Tensor:()=>i,cat:()=>E,full:()=>D,full_like:()=>Z,interpolate:()=>p,interpolate_4d:()=>d,layer_norm:()=>M,matmul:()=>u,mean:()=>O,mean_pooling:()=>b,ones:()=>Q,ones_like:()=>Y,permute:()=>c,quantize_embeddings:()=>ue,rand:()=>ce,rfft:()=>f,slice:()=>I,stack:()=>x,std_mean:()=>z,topk:()=>_,zeros:()=>re,zeros_like:()=>te});var s=t("./src/utils/maths.js"),n=t("./src/backends/onnx.js"),o=t("./src/ops/registry.js");const a=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class i{get dims(){return this.ort_tensor.dims}set dims(F){this.ort_tensor.dims=F}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...F){return(0,n.isONNXTensor)(F[0])?this.ort_tensor=F[0]:this.ort_tensor=new n.Tensor(F[0],F[1],F[2]),new Proxy(this,{get:(G,j)=>{if(typeof j=="string"){let ae=Number(j);if(Number.isInteger(ae))return G._getitem(ae)}return G[j]},set:(G,j,ae)=>G[j]=ae})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[F,...G]=this.dims;if(G.length>0){const j=G.reduce((ae,Ae)=>ae*Ae);for(let ae=0;ae<F;++ae)yield this._subarray(ae,j,G)}else yield*this.data}_getitem(F){const[G,...j]=this.dims;if(F=T(F,G),j.length>0){const ae=j.reduce((Ae,ve)=>Ae*ve);return this._subarray(F,ae,j)}else return new i(this.type,[this.data[F]],j)}indexOf(F){const G=this.data;for(let j=0;j<G.length;++j)if(G[j]==F)return j;return-1}_subarray(F,G,j){const ae=F*G,Ae=(F+1)*G,ve="subarray"in this.data?this.data.subarray(ae,Ae):this.data.slice(ae,Ae);return new i(this.type,ve,j)}item(){const F=this.data;if(F.length!==1)throw new Error(`a Tensor with ${F.length} elements cannot be converted to Scalar`);return F[0]}tolist(){return l(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const F=this.data;for(let G=0;G<F.length;++G)F[G]=1/(1+Math.exp(-F[G]));return this}map(F){return this.clone().map_(F)}map_(F){const G=this.data;for(let j=0;j<G.length;++j)G[j]=F(G[j],j,G);return this}mul(F){return this.clone().mul_(F)}mul_(F){const G=this.data;for(let j=0;j<G.length;++j)G[j]*=F;return this}div(F){return this.clone().div_(F)}div_(F){const G=this.data;for(let j=0;j<G.length;++j)G[j]/=F;return this}add(F){return this.clone().add_(F)}add_(F){const G=this.data;for(let j=0;j<G.length;++j)G[j]+=F;return this}sub(F){return this.clone().sub_(F)}sub_(F){const G=this.data;for(let j=0;j<G.length;++j)G[j]-=F;return this}clone(){return new i(this.type,this.data.slice(),this.dims.slice())}slice(...F){const G=[],j=[];for(let q=0;q<this.dims.length;++q){let de=F[q];if(de==null)j.push([0,this.dims[q]]),G.push(this.dims[q]);else if(typeof de=="number")de=T(de,this.dims[q],q),j.push([de,de+1]);else if(Array.isArray(de)&&de.length===2){let[W,fe]=de;if(W=W===null?0:T(W,this.dims[q],q,!1),fe=fe===null?this.dims[q]:T(fe,this.dims[q],q,!1),W>fe)throw new Error(`Invalid slice: ${de}`);const ke=[Math.max(W,0),Math.min(fe,this.dims[q])];j.push(ke),G.push(ke[1]-ke[0])}else throw new Error(`Invalid slice: ${de}`)}const ae=j.map(([q,de])=>de-q),Ae=ae.reduce((q,de)=>q*de),ve=this.data,Fe=new ve.constructor(Ae),Qe=this.stride();let xe=!0;for(let q=1;q<ae.length;++q)if(j[q][0]!==0||j[q][1]!==this.dims[q]){xe=!1;break}if(xe){const q=j[0][0]*Qe[0],de=j[0][1]*Qe[0];if(ArrayBuffer.isView(ve))Fe.set(ve.subarray(q,de));else if(Array.isArray(ve)){const W=ve.slice(q,de);for(let fe=0;fe<W.length;++fe)Fe[fe]=W[fe]}else throw new Error("Unsupported data type for slicing")}else for(let q=0;q<Ae;++q){let de=0;for(let W=ae.length-1,fe=q;W>=0;--W){const ke=ae[W];de+=(fe%ke+j[W][0])*Qe[W],fe=Math.floor(fe/ke)}Fe[q]=ve[de]}return new i(this.type,Fe,G)}permute(...F){return c(this,F)}transpose(...F){return this.permute(...F)}sum(F=null,G=!1){return this.norm(1,F,G)}norm(F="fro",G=null,j=!1){if(F==="fro")F=2;else if(typeof F=="string")throw Error(`Unsupported norm: ${F}`);const ae=this.data,Ae=(xe,q)=>xe+q**F;if(G===null){const xe=ae.reduce(Ae,0)**(1/F);return new i(this.type,[xe],[])}const[ve,Fe,Qe]=S(Ae,this,G,j);if(F!==1)for(let xe=0;xe<Fe.length;++xe)Fe[xe]=Fe[xe]**(1/F);return new i(ve,Fe,Qe)}normalize_(F=2,G=1){G=T(G,this.dims.length);const j=this.norm(F,G,!0),ae=this.data,Ae=j.data;for(let ve=0;ve<ae.length;++ve){let Fe=0;for(let Qe=this.dims.length-1,xe=ve,q=1;Qe>=0;--Qe){const de=this.dims[Qe];if(Qe!==G){const W=xe%de;Fe+=W*q,q*=this.dims[Qe]}xe=Math.floor(xe/de)}ae[ve]/=Ae[Fe]}return this}normalize(F=2,G=1){return this.clone().normalize_(F,G)}stride(){return K(this.dims)}squeeze(F=null){return new i(this.type,this.data,$(this.dims,F))}squeeze_(F=null){return this.dims=$(this.dims,F),this}unsqueeze(F=null){return new i(this.type,this.data,y(this.dims,F))}unsqueeze_(F=null){return this.dims=y(this.dims,F),this}flatten_(F=0,G=-1){G=(G+this.dims.length)%this.dims.length;let j=this.dims.slice(0,F),ae=this.dims.slice(F,G+1),Ae=this.dims.slice(G+1);return this.dims=[...j,ae.reduce((ve,Fe)=>ve*Fe,1),...Ae],this}flatten(F=0,G=-1){return this.clone().flatten_(F,G)}view(...F){let G=-1;for(let ae=0;ae<F.length;++ae)if(F[ae]===-1){if(G!==-1)throw new Error("Only one dimension can be inferred");G=ae}const j=this.data;if(G!==-1){const ae=F.reduce((Ae,ve,Fe)=>Fe!==G?Ae*ve:Ae,1);F[G]=j.length/ae}return new i(this.type,j,F)}neg_(){const F=this.data;for(let G=0;G<F.length;++G)F[G]=-F[G];return this}neg(){return this.clone().neg_()}gt(F){const G=new Uint8Array(this.data.length),j=this.data;for(let ae=0;ae<j.length;++ae)G[ae]=j[ae]>F?1:0;return new i("bool",G,this.dims)}lt(F){const G=new Uint8Array(this.data.length),j=this.data;for(let ae=0;ae<j.length;++ae)G[ae]=j[ae]<F?1:0;return new i("bool",G,this.dims)}clamp_(F,G){const j=this.data;for(let ae=0;ae<j.length;++ae)j[ae]=Math.min(Math.max(j[ae],F),G);return this}clamp(F,G){return this.clone().clamp_(F,G)}round_(){const F=this.data;for(let G=0;G<F.length;++G)F[G]=Math.round(F[G]);return this}round(){return this.clone().round_()}mean(F=null,G=!1){return O(this,F,G)}min(F=null,G=!1){if(F===null){const ve=(0,s.min)(this.data)[0];return new i(this.type,[ve],[])}const[j,ae,Ae]=S((ve,Fe)=>Math.min(ve,Fe),this,F,G,1/0);return new i(j,ae,Ae)}max(F=null,G=!1){if(F===null){const ve=(0,s.max)(this.data)[0];return new i(this.type,[ve],[])}const[j,ae,Ae]=S((ve,Fe)=>Math.max(ve,Fe),this,F,G,-1/0);return new i(j,ae,Ae)}argmin(F=null,G=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const j=(0,s.min)(this.data)[1];return new i("int64",[BigInt(j)],[])}argmax(F=null,G=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const j=(0,s.max)(this.data)[1];return new i("int64",[BigInt(j)],[])}to(F){if(this.type===F)return this;if(!a.hasOwnProperty(F))throw new Error(`Unsupported type: ${F}`);let G;const j=["int64","uint64"].includes(this.type),ae=["int64","uint64"].includes(F);return j&&!ae?G=Number:!j&&ae&&(G=BigInt),new i(F,a[F].from(this.data,G),this.dims)}}function l(B,F){const G=B.length,j=F.reduce((Ae,ve)=>Ae*ve);if(G!==j)throw Error(`cannot reshape array of size ${G} into shape (${F})`);let ae=B;for(let Ae=F.length-1;Ae>=0;Ae--)ae=ae.reduce((ve,Fe)=>{let Qe=ve[ve.length-1];return Qe.length<F[Ae]?Qe.push(Fe):ve.push([Fe]),ve},[[]]);return ae[0]}function c(B,F){const[G,j]=(0,s.permute_data)(B.data,B.dims,F);return new i(B.type,G,j)}function p(B,[F,G],j="bilinear",ae=!1){const Ae=B.dims.at(-3)??1,ve=B.dims.at(-2),Fe=B.dims.at(-1);let Qe=(0,s.interpolate_data)(B.data,[Ae,ve,Fe],[F,G],j,ae);return new i(B.type,Qe,[Ae,F,G])}async function d(B,{size:F=null,mode:G="bilinear"}={}){if(B.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!F)throw new Error("`interpolate_4d` requires a `size` argument.");let j;if(F.length===2)j=[...B.dims.slice(0,2),...F];else if(F.length===3)j=[B.dims[0],...F];else if(F.length===4)j=F;else throw new Error("`size` must be of length 2, 3, or 4.");let ae;if(G==="nearest")ae=await o.TensorOpRegistry.nearest_interpolate_4d;else if(G==="bilinear")ae=await o.TensorOpRegistry.bilinear_interpolate_4d;else if(G==="bicubic")ae=await o.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${G}`);const Ae=new i("int64",new BigInt64Array(j.map(BigInt)),[j.length]);return await ae({x:B,s:Ae})}async function u(B,F){return await(await o.TensorOpRegistry.matmul)({a:B,b:F})}async function f(B,F){return await(await o.TensorOpRegistry.rfft)({x:B,a:F})}async function _(B,F){const G=await o.TensorOpRegistry.top_k;return F==null?F=B.dims.at(-1):F=Math.min(F,B.dims.at(-1)),await G({x:B,k:new i("int64",[BigInt(F)],[1])})}const v=B=>new i("int64",B,[B.length]);async function I(B,F,G,j,ae){return await(await o.TensorOpRegistry.slice)({x:B,s:v(F),e:v(G),a:v(j),t:v(ae??new Array(j.length).fill(1))})}function b(B,F){const G=B.data,j=F.data,ae=[B.dims[0],B.dims[2]],Ae=new G.constructor(ae[0]*ae[1]),[ve,Fe,Qe]=B.dims;let xe=0;for(let q=0;q<ve;++q){const de=q*Qe*Fe;for(let W=0;W<Qe;++W){let fe=0,ke=0;const ye=q*Fe,ge=de+W;for(let we=0;we<Fe;++we){const Ie=Number(j[ye+we]);ke+=Ie,fe+=G[ge+we*Qe]*Ie}const Ee=fe/ke;Ae[xe++]=Ee}}return new i(B.type,Ae,ae)}function M(B,F,{eps:G=1e-5}={}){if(B.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[j,ae]=B.dims;if(F.length!==1&&F[0]!==ae)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[Ae,ve]=z(B,1,0,!0),Fe=Ae.data,Qe=ve.data,xe=B.data,q=new xe.constructor(xe.length);for(let de=0;de<j;++de){const W=de*ae;for(let fe=0;fe<ae;++fe){const ke=W+fe;q[ke]=(xe[ke]-Qe[de])/(Fe[de]+G)}}return new i(B.type,q,B.dims)}function $(B,F){return B=B.slice(),F===null?B=B.filter(G=>G!==1):typeof F=="number"?B[F]===1&&B.splice(F,1):Array.isArray(F)&&(B=B.filter((G,j)=>G!==1||!F.includes(j))),B}function y(B,F){return F=T(F,B.length+1),B=B.slice(),B.splice(F,0,1),B}function T(B,F,G=null,j=!0){if(B<-F||B>=F){if(j)throw new Error(`IndexError: index ${B} is out of bounds for dimension${G===null?"":" "+G} with size ${F}`);return B<-F?0:F}return B<0&&(B=(B%F+F)%F),B}function E(B,F=0){F=T(F,B[0].dims.length);const G=B[0].dims.slice();G[F]=B.reduce((ve,Fe)=>ve+Fe.dims[F],0);const j=G.reduce((ve,Fe)=>ve*Fe,1),ae=new B[0].data.constructor(j),Ae=B[0].type;if(F===0){let ve=0;for(const Fe of B){const Qe=Fe.data;ae.set(Qe,ve),ve+=Qe.length}}else{let ve=0;for(let Fe=0;Fe<B.length;++Fe){const{data:Qe,dims:xe}=B[Fe];for(let q=0;q<Qe.length;++q){let de=0;for(let W=xe.length-1,fe=q,ke=1;W>=0;--W){const ye=xe[W];let ge=fe%ye;W===F&&(ge+=ve),de+=ge*ke,ke*=G[W],fe=Math.floor(fe/ye)}ae[de]=Qe[q]}ve+=xe[F]}}return new i(Ae,ae,G)}function x(B,F=0){return E(B.map(G=>G.unsqueeze(F)),F)}function S(B,F,G=null,j=!1,ae=null){const Ae=F.data,ve=F.dims;G=T(G,ve.length);const Fe=ve.slice();Fe[G]=1;const Qe=new Ae.constructor(Ae.length/ve[G]);ae!==null&&Qe.fill(ae);for(let xe=0;xe<Ae.length;++xe){let q=0;for(let de=ve.length-1,W=xe,fe=1;de>=0;--de){const ke=ve[de];if(de!==G){const ye=W%ke;q+=ye*fe,fe*=Fe[de]}W=Math.floor(W/ke)}Qe[q]=B(Qe[q],Ae[xe],xe,q)}return j||Fe.splice(G,1),[F.type,Qe,Fe]}function z(B,F=null,G=1,j=!1){const ae=B.data,Ae=B.dims;if(F===null){const fe=ae.reduce((Ee,we)=>Ee+we,0)/ae.length,ke=Math.sqrt(ae.reduce((Ee,we)=>Ee+(we-fe)**2,0)/(ae.length-G)),ye=new i(B.type,[fe],[]);return[new i(B.type,[ke],[]),ye]}F=T(F,Ae.length);const ve=O(B,F,j),Fe=ve.data,[Qe,xe,q]=S((W,fe,ke,ye)=>W+(fe-Fe[ye])**2,B,F,j);for(let W=0;W<xe.length;++W)xe[W]=Math.sqrt(xe[W]/(Ae[F]-G));return[new i(Qe,xe,q),ve]}function O(B,F=null,G=!1){const j=B.dims,ae=B.data;if(F===null){const Qe=ae.reduce((xe,q)=>xe+q,0);return new i(B.type,[Qe/ae.length],[])}F=T(F,j.length);const[Ae,ve,Fe]=S((Qe,xe)=>Qe+xe,B,F,G);if(j[F]!==1)for(let Qe=0;Qe<ve.length;++Qe)ve[Qe]/=j[F];return new i(Ae,ve,Fe)}function K(B){const F=new Array(B.length);for(let G=B.length-1,j=1;G>=0;--G)F[G]=j,j*=B[G];return F}function H(B,F,G,j){const ae=B.reduce((Ae,ve)=>Ae*ve,1);return new i(G,new j(ae).fill(F),B)}function D(B,F){let G,j;if(typeof F=="number")G="float32",j=Float32Array;else if(typeof F=="bigint")G="int64",j=BigInt64Array;else if(typeof F=="boolean")G="bool",j=Uint8Array;else throw new Error(`Unsupported data type: ${typeof F}`);return H(B,F,G,j)}function Z(B,F){return D(B.dims,F)}function Q(B){return H(B,1n,"int64",BigInt64Array)}function Y(B){return Q(B.dims)}function re(B){return H(B,0n,"int64",BigInt64Array)}function te(B){return re(B.dims)}function ce(B){const F=B.reduce((G,j)=>G*j,1);return new i("float32",Float32Array.from({length:F},()=>Math.random()),B)}function ue(B,F){if(B.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(B.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(F))throw new Error("The precision must be either 'binary' or 'ubinary'");const G=F==="binary",j=G?"int8":"uint8",ae=G?Int8Array:Uint8Array,Ae=B.data,ve=new ae(Ae.length/8);for(let Fe=0;Fe<Ae.length;++Fe){const Qe=Ae[Fe]>0?1:0,xe=Math.floor(Fe/8),q=Fe%8;ve[xe]|=Qe<<7-q,G&&q===0&&(ve[xe]-=128)}return new i(j,ve,[B.dims[0],B.dims[1]/8])}},"./src/utils/video.js":(e,r,t)=>{t.r(r),t.d(r,{RawVideo:()=>a,RawVideoFrame:()=>o,load_video:()=>i});var s=t("./src/utils/image.js"),n=t("./src/env.js");class o{constructor(c,p){this.image=c,this.timestamp=p}}class a{constructor(c,p){c.length>0&&c[0]instanceof s.RawImage&&(c=c.map((d,u)=>new o(d,(u+1)/(c.length+1)*p))),this.frames=c,this.duration=p}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function i(l,{num_frames:c=null,fps:p=null}={}){if(!n.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(c==null&&p==null)throw new Error("Either num_frames or fps must be provided.");const d=[],u=document.createElement("video");if(u.crossOrigin="anonymous",u.muted=!0,typeof l=="string")u.src=l;else if(l instanceof Blob)u.src=URL.createObjectURL(l);else if(l instanceof HTMLVideoElement)u.src=l.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise($=>u.onloadedmetadata=$),u.seekable.start(0)===u.seekable.end(0)){const y=await(await fetch(u.src)).blob();u.src=URL.createObjectURL(y),await new Promise(T=>u.onloadedmetadata=T)}const f=u.duration;let _,v;c!=null?(_=c,v=c===1?0:f/(c-1)):(v=1/p,_=Math.floor(f/v));let I=[];for(let $=0;$<_;++$)I.push(c===1?f/2:$*v);const b=document.createElement("canvas");b.width=u.videoWidth,b.height=u.videoHeight;const M=b.getContext("2d",{willReadFrequently:!0});for(const $ of I){u.currentTime=$,await new Promise(x=>{u.onseeked=x}),M.drawImage(u,0,0,b.width,b.height);const y=M.getImageData(0,0,b.width,b.height),T=new s.RawImage(y.data,b.width,b.height,4),E=new o(T,$);d.push(E)}return u.remove(),new a(d,f)}}},Xw={};function Lt(e){var r=Xw[e];if(r!==void 0)return r.exports;var t=Xw[e]={exports:{}};return bT[e](t,t.exports,Lt),t.exports}(()=>{var e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,r;Lt.t=function(t,s){if(s&1&&(t=this(t)),s&8||typeof t=="object"&&t&&(s&4&&t.__esModule||s&16&&typeof t.then=="function"))return t;var n=Object.create(null);Lt.r(n);var o={};r=r||[null,e({}),e([]),e(e)];for(var a=s&2&&t;typeof a=="object"&&!~r.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach(i=>o[i]=()=>t[i]);return o.default=()=>t,Lt.d(n,o),n}})();Lt.d=(e,r)=>{for(var t in r)Lt.o(r,t)&&!Lt.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})};Lt.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r);Lt.r=e=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var h={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Lt.r(h),Lt.d(h,{ASTFeatureExtractor:()=>d.ASTFeatureExtractor,ASTForAudioClassification:()=>t.ASTForAudioClassification,ASTModel:()=>t.ASTModel,ASTPreTrainedModel:()=>t.ASTPreTrainedModel,AlbertForMaskedLM:()=>t.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>t.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>t.AlbertForSequenceClassification,AlbertModel:()=>t.AlbertModel,AlbertPreTrainedModel:()=>t.AlbertPreTrainedModel,AlbertTokenizer:()=>s.AlbertTokenizer,ArceeForCausalLM:()=>t.ArceeForCausalLM,ArceeModel:()=>t.ArceeModel,ArceePreTrainedModel:()=>t.ArceePreTrainedModel,AudioClassificationPipeline:()=>r.AudioClassificationPipeline,AutoConfig:()=>n.AutoConfig,AutoFeatureExtractor:()=>u.AutoFeatureExtractor,AutoImageProcessor:()=>v.AutoImageProcessor,AutoModel:()=>t.AutoModel,AutoModelForAudioClassification:()=>t.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>t.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>t.AutoModelForAudioTextToText,AutoModelForCTC:()=>t.AutoModelForCTC,AutoModelForCausalLM:()=>t.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>t.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>t.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>t.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>t.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>t.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>t.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>t.AutoModelForImageTextToText,AutoModelForImageToImage:()=>t.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>t.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>t.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>t.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>t.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>t.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>t.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>t.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>t.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>t.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>t.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>t.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>t.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>t.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>t.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>t.AutoModelForVision2Seq,AutoModelForXVector:()=>t.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>t.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>M.AutoProcessor,AutoTokenizer:()=>s.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>r.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>r.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>t.BartForConditionalGeneration,BartForSequenceClassification:()=>t.BartForSequenceClassification,BartModel:()=>t.BartModel,BartPretrainedModel:()=>t.BartPretrainedModel,BartTokenizer:()=>s.BartTokenizer,BaseModelOutput:()=>t.BaseModelOutput,BaseStreamer:()=>$.BaseStreamer,BeitFeatureExtractor:()=>_.BeitFeatureExtractor,BeitForImageClassification:()=>t.BeitForImageClassification,BeitModel:()=>t.BeitModel,BeitPreTrainedModel:()=>t.BeitPreTrainedModel,BertForMaskedLM:()=>t.BertForMaskedLM,BertForQuestionAnswering:()=>t.BertForQuestionAnswering,BertForSequenceClassification:()=>t.BertForSequenceClassification,BertForTokenClassification:()=>t.BertForTokenClassification,BertModel:()=>t.BertModel,BertPreTrainedModel:()=>t.BertPreTrainedModel,BertTokenizer:()=>s.BertTokenizer,BitImageProcessor:()=>_.BitImageProcessor,BlenderbotForConditionalGeneration:()=>t.BlenderbotForConditionalGeneration,BlenderbotModel:()=>t.BlenderbotModel,BlenderbotPreTrainedModel:()=>t.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>t.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>t.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>t.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>s.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>s.BlenderbotTokenizer,BloomForCausalLM:()=>t.BloomForCausalLM,BloomModel:()=>t.BloomModel,BloomPreTrainedModel:()=>t.BloomPreTrainedModel,BloomTokenizer:()=>s.BloomTokenizer,CLIPFeatureExtractor:()=>_.CLIPFeatureExtractor,CLIPImageProcessor:()=>_.CLIPImageProcessor,CLIPModel:()=>t.CLIPModel,CLIPPreTrainedModel:()=>t.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>t.CLIPSegForImageSegmentation,CLIPSegModel:()=>t.CLIPSegModel,CLIPSegPreTrainedModel:()=>t.CLIPSegPreTrainedModel,CLIPTextModel:()=>t.CLIPTextModel,CLIPTextModelWithProjection:()=>t.CLIPTextModelWithProjection,CLIPTokenizer:()=>s.CLIPTokenizer,CLIPVisionModel:()=>t.CLIPVisionModel,CLIPVisionModelWithProjection:()=>t.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>t.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>t.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>t.CamembertForSequenceClassification,CamembertForTokenClassification:()=>t.CamembertForTokenClassification,CamembertModel:()=>t.CamembertModel,CamembertPreTrainedModel:()=>t.CamembertPreTrainedModel,CamembertTokenizer:()=>s.CamembertTokenizer,CausalLMOutput:()=>t.CausalLMOutput,CausalLMOutputWithPast:()=>t.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>_.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>t.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>t.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>t.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>d.ClapFeatureExtractor,ClapModel:()=>t.ClapModel,ClapPreTrainedModel:()=>t.ClapPreTrainedModel,ClapTextModelWithProjection:()=>t.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>T.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>t.CodeGenForCausalLM,CodeGenModel:()=>t.CodeGenModel,CodeGenPreTrainedModel:()=>t.CodeGenPreTrainedModel,CodeGenTokenizer:()=>s.CodeGenTokenizer,CodeLlamaTokenizer:()=>s.CodeLlamaTokenizer,CohereForCausalLM:()=>t.CohereForCausalLM,CohereModel:()=>t.CohereModel,CoherePreTrainedModel:()=>t.CoherePreTrainedModel,CohereTokenizer:()=>s.CohereTokenizer,ConvBertForMaskedLM:()=>t.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>t.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>t.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>t.ConvBertForTokenClassification,ConvBertModel:()=>t.ConvBertModel,ConvBertPreTrainedModel:()=>t.ConvBertPreTrainedModel,ConvBertTokenizer:()=>s.ConvBertTokenizer,ConvNextFeatureExtractor:()=>_.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>t.ConvNextForImageClassification,ConvNextImageProcessor:()=>_.ConvNextImageProcessor,ConvNextModel:()=>t.ConvNextModel,ConvNextPreTrainedModel:()=>t.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>t.ConvNextV2ForImageClassification,ConvNextV2Model:()=>t.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>t.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>t.DFineForObjectDetection,DFineModel:()=>t.DFineModel,DFinePreTrainedModel:()=>t.DFinePreTrainedModel,DPTFeatureExtractor:()=>_.DPTFeatureExtractor,DPTForDepthEstimation:()=>t.DPTForDepthEstimation,DPTImageProcessor:()=>_.DPTImageProcessor,DPTModel:()=>t.DPTModel,DPTPreTrainedModel:()=>t.DPTPreTrainedModel,DacDecoderModel:()=>t.DacDecoderModel,DacDecoderOutput:()=>t.DacDecoderOutput,DacEncoderModel:()=>t.DacEncoderModel,DacEncoderOutput:()=>t.DacEncoderOutput,DacFeatureExtractor:()=>d.DacFeatureExtractor,DacModel:()=>t.DacModel,DacPreTrainedModel:()=>t.DacPreTrainedModel,DataTypeMap:()=>l.DataTypeMap,DebertaForMaskedLM:()=>t.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>t.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>t.DebertaForSequenceClassification,DebertaForTokenClassification:()=>t.DebertaForTokenClassification,DebertaModel:()=>t.DebertaModel,DebertaPreTrainedModel:()=>t.DebertaPreTrainedModel,DebertaTokenizer:()=>s.DebertaTokenizer,DebertaV2ForMaskedLM:()=>t.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>t.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>t.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>t.DebertaV2ForTokenClassification,DebertaV2Model:()=>t.DebertaV2Model,DebertaV2PreTrainedModel:()=>t.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>s.DebertaV2Tokenizer,DecisionTransformerModel:()=>t.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>t.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>_.DeiTFeatureExtractor,DeiTForImageClassification:()=>t.DeiTForImageClassification,DeiTImageProcessor:()=>_.DeiTImageProcessor,DeiTModel:()=>t.DeiTModel,DeiTPreTrainedModel:()=>t.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>t.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>t.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>r.DepthEstimationPipeline,DepthProForDepthEstimation:()=>t.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>t.DepthProPreTrainedModel,DetrFeatureExtractor:()=>_.DetrFeatureExtractor,DetrForObjectDetection:()=>t.DetrForObjectDetection,DetrForSegmentation:()=>t.DetrForSegmentation,DetrImageProcessor:()=>_.DetrImageProcessor,DetrModel:()=>t.DetrModel,DetrObjectDetectionOutput:()=>t.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>t.DetrPreTrainedModel,DetrSegmentationOutput:()=>t.DetrSegmentationOutput,Dinov2ForImageClassification:()=>t.Dinov2ForImageClassification,Dinov2Model:()=>t.Dinov2Model,Dinov2PreTrainedModel:()=>t.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>t.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>t.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>t.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>t.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>t.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>t.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>t.DistilBertForTokenClassification,DistilBertModel:()=>t.DistilBertModel,DistilBertPreTrainedModel:()=>t.DistilBertPreTrainedModel,DistilBertTokenizer:()=>s.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>r.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>_.DonutFeatureExtractor,DonutImageProcessor:()=>_.DonutImageProcessor,DonutSwinModel:()=>t.DonutSwinModel,DonutSwinPreTrainedModel:()=>t.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>t.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>_.EfficientNetImageProcessor,EfficientNetModel:()=>t.EfficientNetModel,EfficientNetPreTrainedModel:()=>t.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>t.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>t.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>t.ElectraForSequenceClassification,ElectraForTokenClassification:()=>t.ElectraForTokenClassification,ElectraModel:()=>t.ElectraModel,ElectraPreTrainedModel:()=>t.ElectraPreTrainedModel,ElectraTokenizer:()=>s.ElectraTokenizer,EncodecFeatureExtractor:()=>d.EncodecFeatureExtractor,EosTokenCriteria:()=>y.EosTokenCriteria,Ernie4_5_ForCausalLM:()=>t.Ernie4_5_ForCausalLM,Ernie4_5_Model:()=>t.Ernie4_5_Model,Ernie4_5_PretrainedModel:()=>t.Ernie4_5_PretrainedModel,Ernie4_5_Tokenizer:()=>s.Ernie4_5_Tokenizer,EsmForMaskedLM:()=>t.EsmForMaskedLM,EsmForSequenceClassification:()=>t.EsmForSequenceClassification,EsmForTokenClassification:()=>t.EsmForTokenClassification,EsmModel:()=>t.EsmModel,EsmPreTrainedModel:()=>t.EsmPreTrainedModel,EsmTokenizer:()=>s.EsmTokenizer,ExaoneForCausalLM:()=>t.ExaoneForCausalLM,ExaoneModel:()=>t.ExaoneModel,ExaonePreTrainedModel:()=>t.ExaonePreTrainedModel,FFT:()=>c.FFT,FalconForCausalLM:()=>t.FalconForCausalLM,FalconModel:()=>t.FalconModel,FalconPreTrainedModel:()=>t.FalconPreTrainedModel,FalconTokenizer:()=>s.FalconTokenizer,FastViTForImageClassification:()=>t.FastViTForImageClassification,FastViTModel:()=>t.FastViTModel,FastViTPreTrainedModel:()=>t.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>r.FeatureExtractionPipeline,FeatureExtractor:()=>p.FeatureExtractor,FillMaskPipeline:()=>r.FillMaskPipeline,Florence2ForConditionalGeneration:()=>t.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>t.Florence2PreTrainedModel,Florence2Processor:()=>b.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>T.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>T.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>_.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>t.GLPNForDepthEstimation,GLPNModel:()=>t.GLPNModel,GLPNPreTrainedModel:()=>t.GLPNPreTrainedModel,GPT2LMHeadModel:()=>t.GPT2LMHeadModel,GPT2Model:()=>t.GPT2Model,GPT2PreTrainedModel:()=>t.GPT2PreTrainedModel,GPT2Tokenizer:()=>s.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>t.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>t.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>t.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>t.GPTJForCausalLM,GPTJModel:()=>t.GPTJModel,GPTJPreTrainedModel:()=>t.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>t.GPTNeoForCausalLM,GPTNeoModel:()=>t.GPTNeoModel,GPTNeoPreTrainedModel:()=>t.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>t.GPTNeoXForCausalLM,GPTNeoXModel:()=>t.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>t.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>s.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>t.Gemma2ForCausalLM,Gemma2Model:()=>t.Gemma2Model,Gemma2PreTrainedModel:()=>t.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>t.Gemma3ForCausalLM,Gemma3Model:()=>t.Gemma3Model,Gemma3PreTrainedModel:()=>t.Gemma3PreTrainedModel,Gemma3nAudioFeatureExtractor:()=>d.Gemma3nAudioFeatureExtractor,Gemma3nForConditionalGeneration:()=>t.Gemma3nForConditionalGeneration,Gemma3nPreTrainedModel:()=>t.Gemma3nPreTrainedModel,Gemma3nProcessor:()=>b.Gemma3nProcessor,GemmaForCausalLM:()=>t.GemmaForCausalLM,GemmaModel:()=>t.GemmaModel,GemmaPreTrainedModel:()=>t.GemmaPreTrainedModel,GemmaTokenizer:()=>s.GemmaTokenizer,GlmForCausalLM:()=>t.GlmForCausalLM,GlmModel:()=>t.GlmModel,GlmPreTrainedModel:()=>t.GlmPreTrainedModel,GraniteForCausalLM:()=>t.GraniteForCausalLM,GraniteModel:()=>t.GraniteModel,GranitePreTrainedModel:()=>t.GranitePreTrainedModel,Grok1Tokenizer:()=>s.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>t.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>_.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>t.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>b.GroundingDinoProcessor,GroupViTModel:()=>t.GroupViTModel,GroupViTPreTrainedModel:()=>t.GroupViTPreTrainedModel,HeliumForCausalLM:()=>t.HeliumForCausalLM,HeliumModel:()=>t.HeliumModel,HeliumPreTrainedModel:()=>t.HeliumPreTrainedModel,HerbertTokenizer:()=>s.HerbertTokenizer,HieraForImageClassification:()=>t.HieraForImageClassification,HieraModel:()=>t.HieraModel,HieraPreTrainedModel:()=>t.HieraPreTrainedModel,HubertForCTC:()=>t.HubertForCTC,HubertForSequenceClassification:()=>t.HubertForSequenceClassification,HubertModel:()=>t.HubertModel,HubertPreTrainedModel:()=>t.HubertPreTrainedModel,IJepaForImageClassification:()=>t.IJepaForImageClassification,IJepaModel:()=>t.IJepaModel,IJepaPreTrainedModel:()=>t.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>t.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>_.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>t.Idefics3PreTrainedModel,Idefics3Processor:()=>b.Idefics3Processor,ImageClassificationPipeline:()=>r.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>r.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>d.ImageFeatureExtractor,ImageMattingOutput:()=>t.ImageMattingOutput,ImageProcessor:()=>f.ImageProcessor,ImageSegmentationPipeline:()=>r.ImageSegmentationPipeline,ImageToImagePipeline:()=>r.ImageToImagePipeline,ImageToTextPipeline:()=>r.ImageToTextPipeline,InterruptableStoppingCriteria:()=>y.InterruptableStoppingCriteria,JAISLMHeadModel:()=>t.JAISLMHeadModel,JAISModel:()=>t.JAISModel,JAISPreTrainedModel:()=>t.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>_.JinaCLIPImageProcessor,JinaCLIPModel:()=>t.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>t.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>b.JinaCLIPProcessor,JinaCLIPTextModel:()=>t.JinaCLIPTextModel,JinaCLIPVisionModel:()=>t.JinaCLIPVisionModel,Lfm2ForCausalLM:()=>t.Lfm2ForCausalLM,Lfm2Model:()=>t.Lfm2Model,Lfm2PreTrainedModel:()=>t.Lfm2PreTrainedModel,LiteWhisperForConditionalGeneration:()=>t.LiteWhisperForConditionalGeneration,LlamaForCausalLM:()=>t.LlamaForCausalLM,LlamaModel:()=>t.LlamaModel,LlamaPreTrainedModel:()=>t.LlamaPreTrainedModel,LlamaTokenizer:()=>s.LlamaTokenizer,LlavaForConditionalGeneration:()=>t.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>t.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>_.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>t.LlavaPreTrainedModel,LlavaProcessor:()=>b.LlavaProcessor,LlavaQwen2ForCausalLM:()=>t.LlavaQwen2ForCausalLM,LogitsProcessor:()=>T.LogitsProcessor,LogitsProcessorList:()=>T.LogitsProcessorList,LogitsWarper:()=>T.LogitsWarper,LongT5ForConditionalGeneration:()=>t.LongT5ForConditionalGeneration,LongT5Model:()=>t.LongT5Model,LongT5PreTrainedModel:()=>t.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>t.M2M100ForConditionalGeneration,M2M100Model:()=>t.M2M100Model,M2M100PreTrainedModel:()=>t.M2M100PreTrainedModel,M2M100Tokenizer:()=>s.M2M100Tokenizer,MBart50Tokenizer:()=>s.MBart50Tokenizer,MBartForCausalLM:()=>t.MBartForCausalLM,MBartForConditionalGeneration:()=>t.MBartForConditionalGeneration,MBartForSequenceClassification:()=>t.MBartForSequenceClassification,MBartModel:()=>t.MBartModel,MBartPreTrainedModel:()=>t.MBartPreTrainedModel,MBartTokenizer:()=>s.MBartTokenizer,MPNetForMaskedLM:()=>t.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>t.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>t.MPNetForSequenceClassification,MPNetForTokenClassification:()=>t.MPNetForTokenClassification,MPNetModel:()=>t.MPNetModel,MPNetPreTrainedModel:()=>t.MPNetPreTrainedModel,MPNetTokenizer:()=>s.MPNetTokenizer,MT5ForConditionalGeneration:()=>t.MT5ForConditionalGeneration,MT5Model:()=>t.MT5Model,MT5PreTrainedModel:()=>t.MT5PreTrainedModel,MarianMTModel:()=>t.MarianMTModel,MarianModel:()=>t.MarianModel,MarianPreTrainedModel:()=>t.MarianPreTrainedModel,MarianTokenizer:()=>s.MarianTokenizer,Mask2FormerImageProcessor:()=>_.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>_.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>t.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>_.MaskFormerImageProcessor,MaskFormerModel:()=>t.MaskFormerModel,MaskFormerPreTrainedModel:()=>t.MaskFormerPreTrainedModel,MaskedLMOutput:()=>t.MaskedLMOutput,MaxLengthCriteria:()=>y.MaxLengthCriteria,Metric3DForDepthEstimation:()=>t.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>t.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>t.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>t.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>t.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>t.MgpstrModelOutput,MgpstrPreTrainedModel:()=>t.MgpstrPreTrainedModel,MgpstrProcessor:()=>b.MgpstrProcessor,MgpstrTokenizer:()=>s.MgpstrTokenizer,MimiDecoderModel:()=>t.MimiDecoderModel,MimiDecoderOutput:()=>t.MimiDecoderOutput,MimiEncoderModel:()=>t.MimiEncoderModel,MimiEncoderOutput:()=>t.MimiEncoderOutput,MimiModel:()=>t.MimiModel,MimiPreTrainedModel:()=>t.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>T.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>T.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>t.MistralForCausalLM,MistralModel:()=>t.MistralModel,MistralPreTrainedModel:()=>t.MistralPreTrainedModel,MobileBertForMaskedLM:()=>t.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>t.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>t.MobileBertForSequenceClassification,MobileBertModel:()=>t.MobileBertModel,MobileBertPreTrainedModel:()=>t.MobileBertPreTrainedModel,MobileBertTokenizer:()=>s.MobileBertTokenizer,MobileLLMForCausalLM:()=>t.MobileLLMForCausalLM,MobileLLMModel:()=>t.MobileLLMModel,MobileLLMPreTrainedModel:()=>t.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>_.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>t.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>t.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>_.MobileNetV1ImageProcessor,MobileNetV1Model:()=>t.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>t.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>_.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>t.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>t.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>_.MobileNetV2ImageProcessor,MobileNetV2Model:()=>t.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>t.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>_.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>t.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>t.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>_.MobileNetV3ImageProcessor,MobileNetV3Model:()=>t.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>t.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>_.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>t.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>t.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>_.MobileNetV4ImageProcessor,MobileNetV4Model:()=>t.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>t.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>_.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>t.MobileViTForImageClassification,MobileViTImageProcessor:()=>_.MobileViTImageProcessor,MobileViTModel:()=>t.MobileViTModel,MobileViTPreTrainedModel:()=>t.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>t.MobileViTV2ForImageClassification,MobileViTV2Model:()=>t.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>t.MobileViTV2PreTrainedModel,ModelOutput:()=>t.ModelOutput,ModernBertDecoderForCausalLM:()=>t.ModernBertDecoderForCausalLM,ModernBertDecoderModel:()=>t.ModernBertDecoderModel,ModernBertDecoderPreTrainedModel:()=>t.ModernBertDecoderPreTrainedModel,ModernBertForMaskedLM:()=>t.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>t.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>t.ModernBertForTokenClassification,ModernBertModel:()=>t.ModernBertModel,ModernBertPreTrainedModel:()=>t.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>t.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>d.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>t.MoonshineForConditionalGeneration,MoonshineModel:()=>t.MoonshineModel,MoonshinePreTrainedModel:()=>t.MoonshinePreTrainedModel,MoonshineProcessor:()=>b.MoonshineProcessor,MptForCausalLM:()=>t.MptForCausalLM,MptModel:()=>t.MptModel,MptPreTrainedModel:()=>t.MptPreTrainedModel,MultiModalityCausalLM:()=>t.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>t.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>t.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>t.MusicgenForConditionalGeneration,MusicgenModel:()=>t.MusicgenModel,MusicgenPreTrainedModel:()=>t.MusicgenPreTrainedModel,NeoBertForMaskedLM:()=>t.NeoBertForMaskedLM,NeoBertForQuestionAnswering:()=>t.NeoBertForQuestionAnswering,NeoBertForSequenceClassification:()=>t.NeoBertForSequenceClassification,NeoBertForTokenClassification:()=>t.NeoBertForTokenClassification,NeoBertModel:()=>t.NeoBertModel,NeoBertPreTrainedModel:()=>t.NeoBertPreTrainedModel,NllbTokenizer:()=>s.NllbTokenizer,NoBadWordsLogitsProcessor:()=>T.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>T.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>t.NomicBertModel,NomicBertPreTrainedModel:()=>t.NomicBertPreTrainedModel,NougatImageProcessor:()=>_.NougatImageProcessor,NougatTokenizer:()=>s.NougatTokenizer,OPTForCausalLM:()=>t.OPTForCausalLM,OPTModel:()=>t.OPTModel,OPTPreTrainedModel:()=>t.OPTPreTrainedModel,ObjectDetectionPipeline:()=>r.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>t.Olmo2ForCausalLM,Olmo2Model:()=>t.Olmo2Model,Olmo2PreTrainedModel:()=>t.Olmo2PreTrainedModel,OlmoForCausalLM:()=>t.OlmoForCausalLM,OlmoModel:()=>t.OlmoModel,OlmoPreTrainedModel:()=>t.OlmoPreTrainedModel,OpenELMForCausalLM:()=>t.OpenELMForCausalLM,OpenELMModel:()=>t.OpenELMModel,OpenELMPreTrainedModel:()=>t.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>_.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>t.OwlViTForObjectDetection,OwlViTImageProcessor:()=>_.OwlViTImageProcessor,OwlViTModel:()=>t.OwlViTModel,OwlViTPreTrainedModel:()=>t.OwlViTPreTrainedModel,OwlViTProcessor:()=>b.OwlViTProcessor,Owlv2ForObjectDetection:()=>t.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>_.Owlv2ImageProcessor,Owlv2Model:()=>t.Owlv2Model,Owlv2PreTrainedModel:()=>t.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>t.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>t.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>b.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>t.PatchTSMixerForPrediction,PatchTSMixerModel:()=>t.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>t.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>t.PatchTSTForPrediction,PatchTSTModel:()=>t.PatchTSTModel,PatchTSTPreTrainedModel:()=>t.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>t.Phi3ForCausalLM,Phi3Model:()=>t.Phi3Model,Phi3PreTrainedModel:()=>t.Phi3PreTrainedModel,Phi3VForCausalLM:()=>t.Phi3VForCausalLM,Phi3VImageProcessor:()=>_.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>t.Phi3VPreTrainedModel,Phi3VProcessor:()=>b.Phi3VProcessor,PhiForCausalLM:()=>t.PhiForCausalLM,PhiModel:()=>t.PhiModel,PhiPreTrainedModel:()=>t.PhiPreTrainedModel,Pipeline:()=>r.Pipeline,PreTrainedModel:()=>t.PreTrainedModel,PreTrainedTokenizer:()=>s.PreTrainedTokenizer,PretrainedConfig:()=>n.PretrainedConfig,PretrainedMixin:()=>t.PretrainedMixin,Processor:()=>I.Processor,PvtForImageClassification:()=>t.PvtForImageClassification,PvtImageProcessor:()=>_.PvtImageProcessor,PvtModel:()=>t.PvtModel,PvtPreTrainedModel:()=>t.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>d.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>t.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>t.PyAnnoteModel,PyAnnotePreTrainedModel:()=>t.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>b.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>t.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>r.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>t.Qwen2ForCausalLM,Qwen2Model:()=>t.Qwen2Model,Qwen2PreTrainedModel:()=>t.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>s.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>t.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>_.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>t.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>b.Qwen2VLProcessor,Qwen3ForCausalLM:()=>t.Qwen3ForCausalLM,Qwen3Model:()=>t.Qwen3Model,Qwen3PreTrainedModel:()=>t.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>t.RFDetrForObjectDetection,RFDetrModel:()=>t.RFDetrModel,RFDetrObjectDetectionOutput:()=>t.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>t.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>t.RTDetrForObjectDetection,RTDetrImageProcessor:()=>_.RTDetrImageProcessor,RTDetrModel:()=>t.RTDetrModel,RTDetrObjectDetectionOutput:()=>t.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>t.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>t.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>t.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>t.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>t.RTDetrV2PreTrainedModel,RawAudio:()=>o.RawAudio,RawImage:()=>a.RawImage,RawVideo:()=>i.RawVideo,RawVideoFrame:()=>i.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>T.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>t.ResNetForImageClassification,ResNetModel:()=>t.ResNetModel,ResNetPreTrainedModel:()=>t.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>t.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>t.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>t.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>t.RoFormerForTokenClassification,RoFormerModel:()=>t.RoFormerModel,RoFormerPreTrainedModel:()=>t.RoFormerPreTrainedModel,RoFormerTokenizer:()=>s.RoFormerTokenizer,RobertaForMaskedLM:()=>t.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>t.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>t.RobertaForSequenceClassification,RobertaForTokenClassification:()=>t.RobertaForTokenClassification,RobertaModel:()=>t.RobertaModel,RobertaPreTrainedModel:()=>t.RobertaPreTrainedModel,RobertaTokenizer:()=>s.RobertaTokenizer,SamImageProcessor:()=>_.SamImageProcessor,SamImageSegmentationOutput:()=>t.SamImageSegmentationOutput,SamModel:()=>t.SamModel,SamPreTrainedModel:()=>t.SamPreTrainedModel,SamProcessor:()=>b.SamProcessor,SapiensForDepthEstimation:()=>t.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>t.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>t.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>t.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>d.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>_.SegformerFeatureExtractor,SegformerForImageClassification:()=>t.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>t.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>_.SegformerImageProcessor,SegformerModel:()=>t.SegformerModel,SegformerPreTrainedModel:()=>t.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>t.Seq2SeqLMOutput,SequenceClassifierOutput:()=>t.SequenceClassifierOutput,SiglipImageProcessor:()=>_.SiglipImageProcessor,SiglipModel:()=>t.SiglipModel,SiglipPreTrainedModel:()=>t.SiglipPreTrainedModel,SiglipTextModel:()=>t.SiglipTextModel,SiglipTokenizer:()=>s.SiglipTokenizer,SiglipVisionModel:()=>t.SiglipVisionModel,SmolLM3ForCausalLM:()=>t.SmolLM3ForCausalLM,SmolLM3Model:()=>t.SmolLM3Model,SmolLM3PreTrainedModel:()=>t.SmolLM3PreTrainedModel,SmolVLMForConditionalGeneration:()=>t.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>_.SmolVLMImageProcessor,SmolVLMProcessor:()=>b.SmolVLMProcessor,SnacDecoderModel:()=>t.SnacDecoderModel,SnacEncoderModel:()=>t.SnacEncoderModel,SnacFeatureExtractor:()=>d.SnacFeatureExtractor,SnacModel:()=>t.SnacModel,SnacPreTrainedModel:()=>t.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>d.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>t.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>t.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>t.SpeechT5HifiGan,SpeechT5Model:()=>t.SpeechT5Model,SpeechT5PreTrainedModel:()=>t.SpeechT5PreTrainedModel,SpeechT5Processor:()=>b.SpeechT5Processor,SpeechT5Tokenizer:()=>s.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>t.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>t.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>t.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>t.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>t.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>s.SqueezeBertTokenizer,StableLmForCausalLM:()=>t.StableLmForCausalLM,StableLmModel:()=>t.StableLmModel,StableLmPreTrainedModel:()=>t.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>t.Starcoder2ForCausalLM,Starcoder2Model:()=>t.Starcoder2Model,Starcoder2PreTrainedModel:()=>t.Starcoder2PreTrainedModel,StoppingCriteria:()=>y.StoppingCriteria,StoppingCriteriaList:()=>y.StoppingCriteriaList,StyleTextToSpeech2Model:()=>t.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>t.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>r.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>T.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>t.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>_.Swin2SRImageProcessor,Swin2SRModel:()=>t.Swin2SRModel,Swin2SRPreTrainedModel:()=>t.Swin2SRPreTrainedModel,SwinForImageClassification:()=>t.SwinForImageClassification,SwinForSemanticSegmentation:()=>t.SwinForSemanticSegmentation,SwinModel:()=>t.SwinModel,SwinPreTrainedModel:()=>t.SwinPreTrainedModel,T5ForConditionalGeneration:()=>t.T5ForConditionalGeneration,T5Model:()=>t.T5Model,T5PreTrainedModel:()=>t.T5PreTrainedModel,T5Tokenizer:()=>s.T5Tokenizer,TableTransformerForObjectDetection:()=>t.TableTransformerForObjectDetection,TableTransformerModel:()=>t.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>t.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>t.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>T.TemperatureLogitsWarper,Tensor:()=>l.Tensor,Text2TextGenerationPipeline:()=>r.Text2TextGenerationPipeline,TextClassificationPipeline:()=>r.TextClassificationPipeline,TextGenerationPipeline:()=>r.TextGenerationPipeline,TextStreamer:()=>$.TextStreamer,TextToAudioPipeline:()=>r.TextToAudioPipeline,TokenClassificationPipeline:()=>r.TokenClassificationPipeline,TokenClassifierOutput:()=>t.TokenClassifierOutput,TokenizerModel:()=>s.TokenizerModel,TopKLogitsWarper:()=>T.TopKLogitsWarper,TopPLogitsWarper:()=>T.TopPLogitsWarper,TrOCRForCausalLM:()=>t.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>t.TrOCRPreTrainedModel,TranslationPipeline:()=>r.TranslationPipeline,UltravoxModel:()=>t.UltravoxModel,UltravoxPreTrainedModel:()=>t.UltravoxPreTrainedModel,UltravoxProcessor:()=>b.UltravoxProcessor,UniSpeechForCTC:()=>t.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>t.UniSpeechForSequenceClassification,UniSpeechModel:()=>t.UniSpeechModel,UniSpeechPreTrainedModel:()=>t.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>t.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>t.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>t.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>t.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>t.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>b.VLChatProcessor,VLMImageProcessor:()=>_.VLMImageProcessor,ViTFeatureExtractor:()=>_.ViTFeatureExtractor,ViTForImageClassification:()=>t.ViTForImageClassification,ViTImageProcessor:()=>_.ViTImageProcessor,ViTMAEModel:()=>t.ViTMAEModel,ViTMAEPreTrainedModel:()=>t.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>t.ViTMSNForImageClassification,ViTMSNModel:()=>t.ViTMSNModel,ViTMSNPreTrainedModel:()=>t.ViTMSNPreTrainedModel,ViTModel:()=>t.ViTModel,ViTPreTrainedModel:()=>t.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>t.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>t.VitMatteForImageMatting,VitMatteImageProcessor:()=>_.VitMatteImageProcessor,VitMattePreTrainedModel:()=>t.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>t.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>_.VitPoseImageProcessor,VitPosePreTrainedModel:()=>t.VitPosePreTrainedModel,VitsModel:()=>t.VitsModel,VitsModelOutput:()=>t.VitsModelOutput,VitsPreTrainedModel:()=>t.VitsPreTrainedModel,VitsTokenizer:()=>s.VitsTokenizer,VoxtralForConditionalGeneration:()=>t.VoxtralForConditionalGeneration,VoxtralProcessor:()=>b.VoxtralProcessor,Wav2Vec2BertForCTC:()=>t.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>t.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>t.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>t.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>s.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>d.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>t.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>t.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>t.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>t.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>t.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>b.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>b.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>t.WavLMForAudioFrameClassification,WavLMForCTC:()=>t.WavLMForCTC,WavLMForSequenceClassification:()=>t.WavLMForSequenceClassification,WavLMForXVector:()=>t.WavLMForXVector,WavLMModel:()=>t.WavLMModel,WavLMPreTrainedModel:()=>t.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>d.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>t.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>t.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>d.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>t.WhisperForConditionalGeneration,WhisperModel:()=>t.WhisperModel,WhisperPreTrainedModel:()=>t.WhisperPreTrainedModel,WhisperProcessor:()=>b.WhisperProcessor,WhisperTextStreamer:()=>$.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>T.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>s.WhisperTokenizer,XLMForQuestionAnswering:()=>t.XLMForQuestionAnswering,XLMForSequenceClassification:()=>t.XLMForSequenceClassification,XLMForTokenClassification:()=>t.XLMForTokenClassification,XLMModel:()=>t.XLMModel,XLMPreTrainedModel:()=>t.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>t.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>t.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>t.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>t.XLMRobertaForTokenClassification,XLMRobertaModel:()=>t.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>t.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>s.XLMRobertaTokenizer,XLMTokenizer:()=>s.XLMTokenizer,XLMWithLMHeadModel:()=>t.XLMWithLMHeadModel,XVectorOutput:()=>t.XVectorOutput,YolosFeatureExtractor:()=>_.YolosFeatureExtractor,YolosForObjectDetection:()=>t.YolosForObjectDetection,YolosImageProcessor:()=>_.YolosImageProcessor,YolosModel:()=>t.YolosModel,YolosObjectDetectionOutput:()=>t.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>t.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>r.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>r.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>r.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>r.ZeroShotObjectDetectionPipeline,bankers_round:()=>c.bankers_round,cat:()=>l.cat,cos_sim:()=>c.cos_sim,dot:()=>c.dot,dynamic_time_warping:()=>c.dynamic_time_warping,env:()=>e.env,full:()=>l.full,full_like:()=>l.full_like,getCacheShapes:()=>n.getCacheShapes,hamming:()=>o.hamming,hanning:()=>o.hanning,interpolate:()=>l.interpolate,interpolate_4d:()=>l.interpolate_4d,interpolate_data:()=>c.interpolate_data,is_chinese_char:()=>s.is_chinese_char,layer_norm:()=>l.layer_norm,load_image:()=>a.load_image,load_video:()=>i.load_video,log_softmax:()=>c.log_softmax,magnitude:()=>c.magnitude,matmul:()=>l.matmul,max:()=>c.max,mean:()=>l.mean,mean_pooling:()=>l.mean_pooling,medianFilter:()=>c.medianFilter,mel_filter_bank:()=>o.mel_filter_bank,min:()=>c.min,ones:()=>l.ones,ones_like:()=>l.ones_like,permute:()=>l.permute,permute_data:()=>c.permute_data,pipeline:()=>r.pipeline,quantize_embeddings:()=>l.quantize_embeddings,rand:()=>l.rand,read_audio:()=>o.read_audio,rfft:()=>l.rfft,round:()=>c.round,slice:()=>l.slice,softmax:()=>c.softmax,spectrogram:()=>o.spectrogram,stack:()=>l.stack,std_mean:()=>l.std_mean,topk:()=>l.topk,window_function:()=>o.window_function,zeros:()=>l.zeros,zeros_like:()=>l.zeros_like});var e=Lt("./src/env.js"),r=Lt("./src/pipelines.js"),t=Lt("./src/models.js"),s=Lt("./src/tokenizers.js"),n=Lt("./src/configs.js"),o=Lt("./src/utils/audio.js"),a=Lt("./src/utils/image.js"),i=Lt("./src/utils/video.js"),l=Lt("./src/utils/tensor.js"),c=Lt("./src/utils/maths.js"),p=Lt("./src/base/feature_extraction_utils.js"),d=Lt("./src/models/feature_extractors.js"),u=Lt("./src/models/auto/feature_extraction_auto.js"),f=Lt("./src/base/image_processors_utils.js"),_=Lt("./src/models/image_processors.js"),v=Lt("./src/models/auto/image_processing_auto.js"),I=Lt("./src/base/processing_utils.js"),b=Lt("./src/models/processors.js"),M=Lt("./src/models/auto/processing_auto.js"),$=Lt("./src/generation/streamers.js"),y=Lt("./src/generation/stopping_criteria.js"),T=Lt("./src/generation/logits_process.js")})();h.ASTFeatureExtractor;h.ASTForAudioClassification;h.ASTModel;h.ASTPreTrainedModel;h.AlbertForMaskedLM;h.AlbertForQuestionAnswering;h.AlbertForSequenceClassification;h.AlbertModel;h.AlbertPreTrainedModel;h.AlbertTokenizer;h.ArceeForCausalLM;h.ArceeModel;h.ArceePreTrainedModel;h.AudioClassificationPipeline;h.AutoConfig;h.AutoFeatureExtractor;h.AutoImageProcessor;h.AutoModel;h.AutoModelForAudioClassification;h.AutoModelForAudioFrameClassification;h.AutoModelForAudioTextToText;h.AutoModelForCTC;h.AutoModelForCausalLM;h.AutoModelForDepthEstimation;h.AutoModelForDocumentQuestionAnswering;h.AutoModelForImageClassification;h.AutoModelForImageFeatureExtraction;h.AutoModelForImageMatting;h.AutoModelForImageSegmentation;h.AutoModelForImageTextToText;h.AutoModelForImageToImage;h.AutoModelForMaskGeneration;h.AutoModelForMaskedLM;h.AutoModelForNormalEstimation;h.AutoModelForObjectDetection;h.AutoModelForPoseEstimation;h.AutoModelForQuestionAnswering;h.AutoModelForSemanticSegmentation;h.AutoModelForSeq2SeqLM;h.AutoModelForSequenceClassification;h.AutoModelForSpeechSeq2Seq;h.AutoModelForTextToSpectrogram;h.AutoModelForTextToWaveform;h.AutoModelForTokenClassification;h.AutoModelForUniversalSegmentation;h.AutoModelForVision2Seq;h.AutoModelForXVector;h.AutoModelForZeroShotObjectDetection;h.AutoProcessor;h.AutoTokenizer;h.AutomaticSpeechRecognitionPipeline;h.BackgroundRemovalPipeline;h.BartForConditionalGeneration;h.BartForSequenceClassification;h.BartModel;h.BartPretrainedModel;h.BartTokenizer;h.BaseModelOutput;h.BaseStreamer;h.BeitFeatureExtractor;h.BeitForImageClassification;h.BeitModel;h.BeitPreTrainedModel;h.BertForMaskedLM;h.BertForQuestionAnswering;h.BertForSequenceClassification;h.BertForTokenClassification;h.BertModel;h.BertPreTrainedModel;h.BertTokenizer;h.BitImageProcessor;h.BlenderbotForConditionalGeneration;h.BlenderbotModel;h.BlenderbotPreTrainedModel;h.BlenderbotSmallForConditionalGeneration;h.BlenderbotSmallModel;h.BlenderbotSmallPreTrainedModel;h.BlenderbotSmallTokenizer;h.BlenderbotTokenizer;h.BloomForCausalLM;h.BloomModel;h.BloomPreTrainedModel;h.BloomTokenizer;h.CLIPFeatureExtractor;h.CLIPImageProcessor;h.CLIPModel;h.CLIPPreTrainedModel;h.CLIPSegForImageSegmentation;h.CLIPSegModel;h.CLIPSegPreTrainedModel;h.CLIPTextModel;h.CLIPTextModelWithProjection;h.CLIPTokenizer;h.CLIPVisionModel;h.CLIPVisionModelWithProjection;h.CamembertForMaskedLM;h.CamembertForQuestionAnswering;h.CamembertForSequenceClassification;h.CamembertForTokenClassification;h.CamembertModel;h.CamembertPreTrainedModel;h.CamembertTokenizer;h.CausalLMOutput;h.CausalLMOutputWithPast;h.ChineseCLIPFeatureExtractor;h.ChineseCLIPModel;h.ChineseCLIPPreTrainedModel;h.ClapAudioModelWithProjection;h.ClapFeatureExtractor;h.ClapModel;h.ClapPreTrainedModel;h.ClapTextModelWithProjection;h.ClassifierFreeGuidanceLogitsProcessor;h.CodeGenForCausalLM;h.CodeGenModel;h.CodeGenPreTrainedModel;h.CodeGenTokenizer;h.CodeLlamaTokenizer;h.CohereForCausalLM;h.CohereModel;h.CoherePreTrainedModel;h.CohereTokenizer;h.ConvBertForMaskedLM;h.ConvBertForQuestionAnswering;h.ConvBertForSequenceClassification;h.ConvBertForTokenClassification;h.ConvBertModel;h.ConvBertPreTrainedModel;h.ConvBertTokenizer;h.ConvNextFeatureExtractor;h.ConvNextForImageClassification;h.ConvNextImageProcessor;h.ConvNextModel;h.ConvNextPreTrainedModel;h.ConvNextV2ForImageClassification;h.ConvNextV2Model;h.ConvNextV2PreTrainedModel;h.DFineForObjectDetection;h.DFineModel;h.DFinePreTrainedModel;h.DPTFeatureExtractor;h.DPTForDepthEstimation;h.DPTImageProcessor;h.DPTModel;h.DPTPreTrainedModel;h.DacDecoderModel;h.DacDecoderOutput;h.DacEncoderModel;h.DacEncoderOutput;h.DacFeatureExtractor;h.DacModel;h.DacPreTrainedModel;h.DataTypeMap;h.DebertaForMaskedLM;h.DebertaForQuestionAnswering;h.DebertaForSequenceClassification;h.DebertaForTokenClassification;h.DebertaModel;h.DebertaPreTrainedModel;h.DebertaTokenizer;h.DebertaV2ForMaskedLM;h.DebertaV2ForQuestionAnswering;h.DebertaV2ForSequenceClassification;h.DebertaV2ForTokenClassification;h.DebertaV2Model;h.DebertaV2PreTrainedModel;h.DebertaV2Tokenizer;h.DecisionTransformerModel;h.DecisionTransformerPreTrainedModel;h.DeiTFeatureExtractor;h.DeiTForImageClassification;h.DeiTImageProcessor;h.DeiTModel;h.DeiTPreTrainedModel;h.DepthAnythingForDepthEstimation;h.DepthAnythingPreTrainedModel;h.DepthEstimationPipeline;h.DepthProForDepthEstimation;h.DepthProPreTrainedModel;h.DetrFeatureExtractor;h.DetrForObjectDetection;h.DetrForSegmentation;h.DetrImageProcessor;h.DetrModel;h.DetrObjectDetectionOutput;h.DetrPreTrainedModel;h.DetrSegmentationOutput;h.Dinov2ForImageClassification;h.Dinov2Model;h.Dinov2PreTrainedModel;h.Dinov2WithRegistersForImageClassification;h.Dinov2WithRegistersModel;h.Dinov2WithRegistersPreTrainedModel;h.DistilBertForMaskedLM;h.DistilBertForQuestionAnswering;h.DistilBertForSequenceClassification;h.DistilBertForTokenClassification;h.DistilBertModel;h.DistilBertPreTrainedModel;h.DistilBertTokenizer;h.DocumentQuestionAnsweringPipeline;h.DonutFeatureExtractor;h.DonutImageProcessor;h.DonutSwinModel;h.DonutSwinPreTrainedModel;h.EfficientNetForImageClassification;h.EfficientNetImageProcessor;h.EfficientNetModel;h.EfficientNetPreTrainedModel;h.ElectraForMaskedLM;h.ElectraForQuestionAnswering;h.ElectraForSequenceClassification;h.ElectraForTokenClassification;h.ElectraModel;h.ElectraPreTrainedModel;h.ElectraTokenizer;h.EncodecFeatureExtractor;h.EosTokenCriteria;h.Ernie4_5_ForCausalLM;h.Ernie4_5_Model;h.Ernie4_5_PretrainedModel;h.Ernie4_5_Tokenizer;h.EsmForMaskedLM;h.EsmForSequenceClassification;h.EsmForTokenClassification;h.EsmModel;h.EsmPreTrainedModel;h.EsmTokenizer;h.ExaoneForCausalLM;h.ExaoneModel;h.ExaonePreTrainedModel;h.FFT;h.FalconForCausalLM;h.FalconModel;h.FalconPreTrainedModel;h.FalconTokenizer;h.FastViTForImageClassification;h.FastViTModel;h.FastViTPreTrainedModel;h.FeatureExtractionPipeline;h.FeatureExtractor;h.FillMaskPipeline;h.Florence2ForConditionalGeneration;h.Florence2PreTrainedModel;h.Florence2Processor;h.ForcedBOSTokenLogitsProcessor;h.ForcedEOSTokenLogitsProcessor;h.GLPNFeatureExtractor;h.GLPNForDepthEstimation;h.GLPNModel;h.GLPNPreTrainedModel;h.GPT2LMHeadModel;h.GPT2Model;h.GPT2PreTrainedModel;h.GPT2Tokenizer;h.GPTBigCodeForCausalLM;h.GPTBigCodeModel;h.GPTBigCodePreTrainedModel;h.GPTJForCausalLM;h.GPTJModel;h.GPTJPreTrainedModel;h.GPTNeoForCausalLM;h.GPTNeoModel;h.GPTNeoPreTrainedModel;h.GPTNeoXForCausalLM;h.GPTNeoXModel;h.GPTNeoXPreTrainedModel;h.GPTNeoXTokenizer;h.Gemma2ForCausalLM;h.Gemma2Model;h.Gemma2PreTrainedModel;h.Gemma3ForCausalLM;h.Gemma3Model;h.Gemma3PreTrainedModel;h.Gemma3nAudioFeatureExtractor;h.Gemma3nForConditionalGeneration;h.Gemma3nPreTrainedModel;h.Gemma3nProcessor;h.GemmaForCausalLM;h.GemmaModel;h.GemmaPreTrainedModel;h.GemmaTokenizer;h.GlmForCausalLM;h.GlmModel;h.GlmPreTrainedModel;h.GraniteForCausalLM;h.GraniteModel;h.GranitePreTrainedModel;h.Grok1Tokenizer;h.GroundingDinoForObjectDetection;h.GroundingDinoImageProcessor;h.GroundingDinoPreTrainedModel;h.GroundingDinoProcessor;h.GroupViTModel;h.GroupViTPreTrainedModel;h.HeliumForCausalLM;h.HeliumModel;h.HeliumPreTrainedModel;h.HerbertTokenizer;h.HieraForImageClassification;h.HieraModel;h.HieraPreTrainedModel;h.HubertForCTC;h.HubertForSequenceClassification;h.HubertModel;h.HubertPreTrainedModel;h.IJepaForImageClassification;h.IJepaModel;h.IJepaPreTrainedModel;h.Idefics3ForConditionalGeneration;h.Idefics3ImageProcessor;h.Idefics3PreTrainedModel;h.Idefics3Processor;h.ImageClassificationPipeline;h.ImageFeatureExtractionPipeline;h.ImageFeatureExtractor;h.ImageMattingOutput;h.ImageProcessor;h.ImageSegmentationPipeline;h.ImageToImagePipeline;h.ImageToTextPipeline;h.InterruptableStoppingCriteria;h.JAISLMHeadModel;h.JAISModel;h.JAISPreTrainedModel;h.JinaCLIPImageProcessor;h.JinaCLIPModel;h.JinaCLIPPreTrainedModel;h.JinaCLIPProcessor;h.JinaCLIPTextModel;h.JinaCLIPVisionModel;h.Lfm2ForCausalLM;h.Lfm2Model;h.Lfm2PreTrainedModel;h.LiteWhisperForConditionalGeneration;h.LlamaForCausalLM;h.LlamaModel;h.LlamaPreTrainedModel;h.LlamaTokenizer;h.LlavaForConditionalGeneration;h.LlavaOnevisionForConditionalGeneration;h.LlavaOnevisionImageProcessor;h.LlavaPreTrainedModel;h.LlavaProcessor;h.LlavaQwen2ForCausalLM;h.LogitsProcessor;h.LogitsProcessorList;h.LogitsWarper;h.LongT5ForConditionalGeneration;h.LongT5Model;h.LongT5PreTrainedModel;h.M2M100ForConditionalGeneration;h.M2M100Model;h.M2M100PreTrainedModel;h.M2M100Tokenizer;h.MBart50Tokenizer;h.MBartForCausalLM;h.MBartForConditionalGeneration;h.MBartForSequenceClassification;h.MBartModel;h.MBartPreTrainedModel;h.MBartTokenizer;h.MPNetForMaskedLM;h.MPNetForQuestionAnswering;h.MPNetForSequenceClassification;h.MPNetForTokenClassification;h.MPNetModel;h.MPNetPreTrainedModel;h.MPNetTokenizer;h.MT5ForConditionalGeneration;h.MT5Model;h.MT5PreTrainedModel;h.MarianMTModel;h.MarianModel;h.MarianPreTrainedModel;h.MarianTokenizer;h.Mask2FormerImageProcessor;h.MaskFormerFeatureExtractor;h.MaskFormerForInstanceSegmentation;h.MaskFormerImageProcessor;h.MaskFormerModel;h.MaskFormerPreTrainedModel;h.MaskedLMOutput;h.MaxLengthCriteria;h.Metric3DForDepthEstimation;h.Metric3DPreTrainedModel;h.Metric3Dv2ForDepthEstimation;h.Metric3Dv2PreTrainedModel;h.MgpstrForSceneTextRecognition;h.MgpstrModelOutput;h.MgpstrPreTrainedModel;h.MgpstrProcessor;h.MgpstrTokenizer;h.MimiDecoderModel;h.MimiDecoderOutput;h.MimiEncoderModel;h.MimiEncoderOutput;h.MimiModel;h.MimiPreTrainedModel;h.MinLengthLogitsProcessor;h.MinNewTokensLengthLogitsProcessor;h.MistralForCausalLM;h.MistralModel;h.MistralPreTrainedModel;h.MobileBertForMaskedLM;h.MobileBertForQuestionAnswering;h.MobileBertForSequenceClassification;h.MobileBertModel;h.MobileBertPreTrainedModel;h.MobileBertTokenizer;h.MobileLLMForCausalLM;h.MobileLLMModel;h.MobileLLMPreTrainedModel;h.MobileNetV1FeatureExtractor;h.MobileNetV1ForImageClassification;h.MobileNetV1ForSemanticSegmentation;h.MobileNetV1ImageProcessor;h.MobileNetV1Model;h.MobileNetV1PreTrainedModel;h.MobileNetV2FeatureExtractor;h.MobileNetV2ForImageClassification;h.MobileNetV2ForSemanticSegmentation;h.MobileNetV2ImageProcessor;h.MobileNetV2Model;h.MobileNetV2PreTrainedModel;h.MobileNetV3FeatureExtractor;h.MobileNetV3ForImageClassification;h.MobileNetV3ForSemanticSegmentation;h.MobileNetV3ImageProcessor;h.MobileNetV3Model;h.MobileNetV3PreTrainedModel;h.MobileNetV4FeatureExtractor;h.MobileNetV4ForImageClassification;h.MobileNetV4ForSemanticSegmentation;h.MobileNetV4ImageProcessor;h.MobileNetV4Model;h.MobileNetV4PreTrainedModel;h.MobileViTFeatureExtractor;h.MobileViTForImageClassification;h.MobileViTImageProcessor;h.MobileViTModel;h.MobileViTPreTrainedModel;h.MobileViTV2ForImageClassification;h.MobileViTV2Model;h.MobileViTV2PreTrainedModel;h.ModelOutput;h.ModernBertDecoderForCausalLM;h.ModernBertDecoderModel;h.ModernBertDecoderPreTrainedModel;h.ModernBertForMaskedLM;h.ModernBertForSequenceClassification;h.ModernBertForTokenClassification;h.ModernBertModel;h.ModernBertPreTrainedModel;h.Moondream1ForConditionalGeneration;h.MoonshineFeatureExtractor;h.MoonshineForConditionalGeneration;h.MoonshineModel;h.MoonshinePreTrainedModel;h.MoonshineProcessor;h.MptForCausalLM;h.MptModel;h.MptPreTrainedModel;h.MultiModalityCausalLM;h.MultiModalityPreTrainedModel;h.MusicgenForCausalLM;h.MusicgenForConditionalGeneration;h.MusicgenModel;h.MusicgenPreTrainedModel;h.NeoBertForMaskedLM;h.NeoBertForQuestionAnswering;h.NeoBertForSequenceClassification;h.NeoBertForTokenClassification;h.NeoBertModel;h.NeoBertPreTrainedModel;h.NllbTokenizer;h.NoBadWordsLogitsProcessor;h.NoRepeatNGramLogitsProcessor;h.NomicBertModel;h.NomicBertPreTrainedModel;h.NougatImageProcessor;h.NougatTokenizer;h.OPTForCausalLM;h.OPTModel;h.OPTPreTrainedModel;h.ObjectDetectionPipeline;h.Olmo2ForCausalLM;h.Olmo2Model;h.Olmo2PreTrainedModel;h.OlmoForCausalLM;h.OlmoModel;h.OlmoPreTrainedModel;h.OpenELMForCausalLM;h.OpenELMModel;h.OpenELMPreTrainedModel;h.OwlViTFeatureExtractor;h.OwlViTForObjectDetection;h.OwlViTImageProcessor;h.OwlViTModel;h.OwlViTPreTrainedModel;h.OwlViTProcessor;h.Owlv2ForObjectDetection;h.Owlv2ImageProcessor;h.Owlv2Model;h.Owlv2PreTrainedModel;h.PaliGemmaForConditionalGeneration;h.PaliGemmaPreTrainedModel;h.PaliGemmaProcessor;h.PatchTSMixerForPrediction;h.PatchTSMixerModel;h.PatchTSMixerPreTrainedModel;h.PatchTSTForPrediction;h.PatchTSTModel;h.PatchTSTPreTrainedModel;h.Phi3ForCausalLM;h.Phi3Model;h.Phi3PreTrainedModel;h.Phi3VForCausalLM;h.Phi3VImageProcessor;h.Phi3VPreTrainedModel;h.Phi3VProcessor;h.PhiForCausalLM;h.PhiModel;h.PhiPreTrainedModel;h.Pipeline;h.PreTrainedModel;h.PreTrainedTokenizer;h.PretrainedConfig;h.PretrainedMixin;h.Processor;h.PvtForImageClassification;h.PvtImageProcessor;h.PvtModel;h.PvtPreTrainedModel;h.PyAnnoteFeatureExtractor;h.PyAnnoteForAudioFrameClassification;h.PyAnnoteModel;h.PyAnnotePreTrainedModel;h.PyAnnoteProcessor;h.QuestionAnsweringModelOutput;h.QuestionAnsweringPipeline;h.Qwen2ForCausalLM;h.Qwen2Model;h.Qwen2PreTrainedModel;h.Qwen2Tokenizer;h.Qwen2VLForConditionalGeneration;h.Qwen2VLImageProcessor;h.Qwen2VLPreTrainedModel;h.Qwen2VLProcessor;h.Qwen3ForCausalLM;h.Qwen3Model;h.Qwen3PreTrainedModel;h.RFDetrForObjectDetection;h.RFDetrModel;h.RFDetrObjectDetectionOutput;h.RFDetrPreTrainedModel;h.RTDetrForObjectDetection;h.RTDetrImageProcessor;h.RTDetrModel;h.RTDetrObjectDetectionOutput;h.RTDetrPreTrainedModel;h.RTDetrV2ForObjectDetection;h.RTDetrV2Model;h.RTDetrV2ObjectDetectionOutput;h.RTDetrV2PreTrainedModel;h.RawAudio;h.RawImage;h.RawVideo;h.RawVideoFrame;h.RepetitionPenaltyLogitsProcessor;h.ResNetForImageClassification;h.ResNetModel;h.ResNetPreTrainedModel;h.RoFormerForMaskedLM;h.RoFormerForQuestionAnswering;h.RoFormerForSequenceClassification;h.RoFormerForTokenClassification;h.RoFormerModel;h.RoFormerPreTrainedModel;h.RoFormerTokenizer;h.RobertaForMaskedLM;h.RobertaForQuestionAnswering;h.RobertaForSequenceClassification;h.RobertaForTokenClassification;h.RobertaModel;h.RobertaPreTrainedModel;h.RobertaTokenizer;h.SamImageProcessor;h.SamImageSegmentationOutput;h.SamModel;h.SamPreTrainedModel;h.SamProcessor;h.SapiensForDepthEstimation;h.SapiensForNormalEstimation;h.SapiensForSemanticSegmentation;h.SapiensPreTrainedModel;h.SeamlessM4TFeatureExtractor;h.SegformerFeatureExtractor;h.SegformerForImageClassification;h.SegformerForSemanticSegmentation;h.SegformerImageProcessor;h.SegformerModel;h.SegformerPreTrainedModel;h.Seq2SeqLMOutput;h.SequenceClassifierOutput;h.SiglipImageProcessor;h.SiglipModel;h.SiglipPreTrainedModel;h.SiglipTextModel;h.SiglipTokenizer;h.SiglipVisionModel;h.SmolLM3ForCausalLM;h.SmolLM3Model;h.SmolLM3PreTrainedModel;h.SmolVLMForConditionalGeneration;h.SmolVLMImageProcessor;h.SmolVLMProcessor;h.SnacDecoderModel;h.SnacEncoderModel;h.SnacFeatureExtractor;h.SnacModel;h.SnacPreTrainedModel;h.SpeechT5FeatureExtractor;h.SpeechT5ForSpeechToText;h.SpeechT5ForTextToSpeech;h.SpeechT5HifiGan;h.SpeechT5Model;h.SpeechT5PreTrainedModel;h.SpeechT5Processor;h.SpeechT5Tokenizer;h.SqueezeBertForMaskedLM;h.SqueezeBertForQuestionAnswering;h.SqueezeBertForSequenceClassification;h.SqueezeBertModel;h.SqueezeBertPreTrainedModel;h.SqueezeBertTokenizer;h.StableLmForCausalLM;h.StableLmModel;h.StableLmPreTrainedModel;h.Starcoder2ForCausalLM;h.Starcoder2Model;h.Starcoder2PreTrainedModel;h.StoppingCriteria;h.StoppingCriteriaList;h.StyleTextToSpeech2Model;h.StyleTextToSpeech2PreTrainedModel;h.SummarizationPipeline;h.SuppressTokensAtBeginLogitsProcessor;h.Swin2SRForImageSuperResolution;h.Swin2SRImageProcessor;h.Swin2SRModel;h.Swin2SRPreTrainedModel;h.SwinForImageClassification;h.SwinForSemanticSegmentation;h.SwinModel;h.SwinPreTrainedModel;h.T5ForConditionalGeneration;h.T5Model;h.T5PreTrainedModel;h.T5Tokenizer;h.TableTransformerForObjectDetection;h.TableTransformerModel;h.TableTransformerObjectDetectionOutput;h.TableTransformerPreTrainedModel;h.TemperatureLogitsWarper;h.Tensor;h.Text2TextGenerationPipeline;h.TextClassificationPipeline;h.TextGenerationPipeline;h.TextStreamer;h.TextToAudioPipeline;h.TokenClassificationPipeline;h.TokenClassifierOutput;h.TokenizerModel;h.TopKLogitsWarper;h.TopPLogitsWarper;h.TrOCRForCausalLM;h.TrOCRPreTrainedModel;h.TranslationPipeline;h.UltravoxModel;h.UltravoxPreTrainedModel;h.UltravoxProcessor;h.UniSpeechForCTC;h.UniSpeechForSequenceClassification;h.UniSpeechModel;h.UniSpeechPreTrainedModel;h.UniSpeechSatForAudioFrameClassification;h.UniSpeechSatForCTC;h.UniSpeechSatForSequenceClassification;h.UniSpeechSatModel;h.UniSpeechSatPreTrainedModel;h.VLChatProcessor;h.VLMImageProcessor;h.ViTFeatureExtractor;h.ViTForImageClassification;h.ViTImageProcessor;h.ViTMAEModel;h.ViTMAEPreTrainedModel;h.ViTMSNForImageClassification;h.ViTMSNModel;h.ViTMSNPreTrainedModel;h.ViTModel;h.ViTPreTrainedModel;h.VisionEncoderDecoderModel;h.VitMatteForImageMatting;h.VitMatteImageProcessor;h.VitMattePreTrainedModel;h.VitPoseForPoseEstimation;h.VitPoseImageProcessor;h.VitPosePreTrainedModel;h.VitsModel;h.VitsModelOutput;h.VitsPreTrainedModel;h.VitsTokenizer;h.VoxtralForConditionalGeneration;h.VoxtralProcessor;h.Wav2Vec2BertForCTC;h.Wav2Vec2BertForSequenceClassification;h.Wav2Vec2BertModel;h.Wav2Vec2BertPreTrainedModel;h.Wav2Vec2CTCTokenizer;h.Wav2Vec2FeatureExtractor;h.Wav2Vec2ForAudioFrameClassification;h.Wav2Vec2ForCTC;h.Wav2Vec2ForSequenceClassification;h.Wav2Vec2Model;h.Wav2Vec2PreTrainedModel;h.Wav2Vec2Processor;h.Wav2Vec2ProcessorWithLM;h.WavLMForAudioFrameClassification;h.WavLMForCTC;h.WavLMForSequenceClassification;h.WavLMForXVector;h.WavLMModel;h.WavLMPreTrainedModel;h.WeSpeakerFeatureExtractor;h.WeSpeakerResNetModel;h.WeSpeakerResNetPreTrainedModel;h.WhisperFeatureExtractor;h.WhisperForConditionalGeneration;h.WhisperModel;h.WhisperPreTrainedModel;h.WhisperProcessor;h.WhisperTextStreamer;h.WhisperTimeStampLogitsProcessor;h.WhisperTokenizer;h.XLMForQuestionAnswering;h.XLMForSequenceClassification;h.XLMForTokenClassification;h.XLMModel;h.XLMPreTrainedModel;h.XLMRobertaForMaskedLM;h.XLMRobertaForQuestionAnswering;h.XLMRobertaForSequenceClassification;h.XLMRobertaForTokenClassification;h.XLMRobertaModel;h.XLMRobertaPreTrainedModel;h.XLMRobertaTokenizer;h.XLMTokenizer;h.XLMWithLMHeadModel;h.XVectorOutput;h.YolosFeatureExtractor;h.YolosForObjectDetection;h.YolosImageProcessor;h.YolosModel;h.YolosObjectDetectionOutput;h.YolosPreTrainedModel;h.ZeroShotAudioClassificationPipeline;h.ZeroShotClassificationPipeline;h.ZeroShotImageClassificationPipeline;h.ZeroShotObjectDetectionPipeline;h.bankers_round;h.cat;h.cos_sim;h.dot;h.dynamic_time_warping;h.env;h.full;h.full_like;h.getCacheShapes;h.hamming;h.hanning;h.interpolate;h.interpolate_4d;h.interpolate_data;h.is_chinese_char;h.layer_norm;h.load_image;h.load_video;h.log_softmax;h.magnitude;h.matmul;h.max;h.mean;h.mean_pooling;h.medianFilter;h.mel_filter_bank;h.min;h.ones;h.ones_like;h.permute;h.permute_data;var z0=h.pipeline;h.quantize_embeddings;h.rand;h.read_audio;h.rfft;h.round;h.slice;h.softmax;h.spectrogram;h.stack;h.std_mean;h.topk;h.window_function;h.zeros;h.zeros_like;function Yc(...e){console.log(...e)}class yT{pipelineOptions=void 0;classifier=null;constructor(r){r&&(this.pipelineOptions={device:"webgpu"})}async analyze(r){if(await this.setup(),this.classifier==null)throw new Error("Classifier is not initialized");const t=await this.classifier(r);return Yc("Analyzing message:",r,"output:",t),t[0].label}async setup(){if(this.classifier==null){const r=await z0("sentiment-analysis",void 0,this.pipelineOptions);this.classifier=r}}}class vT{synthesizer;speaker_embeddings="https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin";constructor(){}async setup(){if(this.synthesizer)return;const r=await z0("text-to-speech","Xenova/speecht5_tts",{progress_callback:t=>{Yc("Progress",t)}});this.synthesizer=r}async speak(r){if(await this.setup(),!this.synthesizer)throw new Error("Speech synthesis not supported");const t=await this.synthesizer(r,{speaker_embeddings:this.speaker_embeddings}),s=new AudioContext,n=s.createBufferSource(),o=s.createBuffer(1,t.audio.length,t.sampling_rate);o.copyToChannel(t.audio,0),n.buffer=o,n.connect(s.destination),n.start(),Yc(t)}}function xT(){return document.getElementById("use-webgpu").checked}async function TT(){const e=document.getElementById("sentiment-input"),r=document.getElementById("sentiment-output"),t=e.value,n=await new yT(xT()).analyze(t);r.innerText=`Sentiment: ${n}`}const Vo=document.getElementById("sentiment-analysis-button");Vo?.addEventListener("click",async()=>{Vo.disabled=!0,Vo.innerHTML="Analyzing...",await TT(),Vo.disabled=!1,Vo.innerHTML="Analyze"});const Uo=document.getElementById("text-to-speech-button");Uo?.addEventListener("click",async()=>{Uo.disabled=!0,Uo.innerHTML="Speaking...";const r=document.getElementById("text-to-speech-input").value;await new vT().speak(r),Uo.disabled=!1,Uo.innerHTML="Speak"});
